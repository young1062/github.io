[["index.html", "An Introduction to Unsupervised Learning Chapter 1 Introduction", " An Introduction to Unsupervised Learning Alex Young and Cenhao Zhu Version 0 Chapter 1 Introduction Unsupervised machine learning (UL) is an overarching term for methods designed to understand the patterns and relationships within a set of unlabeled data. UL is often discussed in contrast to (semi-)supervised learning. In the latter setting(s), one is primarly concerned with prediction and classification, and the machine learning algorithms therein focus on learning the relationship between a (often high dimensional) feature vector \\(\\vec{x}\\) and an observable outcome \\(y\\) by training on a labeled dataset \\(\\{(\\vec{x}_i,y_i)\\}_{i=1}^N\\). As a concrete example, consider the MNIST dataset which contains a compendium of labeled digitized grayscale images of handwritten digits [1]. The images themselves are the features, (\\(\\vec{x}\\)), and the identity of the digit (0 to 9) gives the label, \\(y\\) . A supervised learning algorithm trained on the MNIST dataset would be able to classify a handwritten digit in a new grayscale image. Prediction and classification are clearly defined goals which naturally translate to many settings. As such, supervised ML has found numerous applications across diverse fields of research from healthcare and medicine to astronomy and chemistry. Given the clearly translatable goals of supervised learning, most texts on Machine Learning tend to emphasize this setting with much smaller discussion on the un- or semi-supervised setting. For example, both The Elements of Statistical Learning by Hastie et al [2] and Modern Multivariate Statistical Techniques by Izenman [3] are wonderful texts – which were central to the early development of this book – but lean towards supervised problems. Unlike the supervised setting, however, UL algorithms are applied to datasets without (or ignoring) labels. In contrast to the MNIST example above, you can think of have of a case where one has access to a large collection of \\(\\vec{x}_i\\), such as images, without any labels indicating the content(s) of the image. Other examples include, a corpus of emails without any indication of which, if any, are spam genomic data for each individual in a large population of cancer patients collections of consumer data or ratings Without labels, it may be difficult (particularly to students first seeing this branch of machine learning) to grasp the usefulness of UL including its applicability and what one is learning in practice. In this book, we hope to address this difficulty and provide readers with a clear understanding of UL by covering motivating ideas, fundamental techniques, and clear and compelling applications. For now, we’ll discuss the high-altitude view of unsupervised learning. We’ll focus on those cases where we have a collection of independent observations of (preprocessed) features stored in vectors \\(\\vec{x}_1,\\dots,\\vec{x}_N\\in\\mathbb{R}^d\\). This setting will be formalized in 2. Broadly, UL learns patterns and similarities between the vectors which could allow us to find subsets of the data which more similar to each other (clustering) or find simpler representations of the data which preserves important relationships (dimension reduction) identify common relationships between variables in the data (association rules) Each of three cases provide a simplified lens through which we can view our data, and in doing so, can open up a number of interesting possibilities. Clustering different genomic data in cancer patients could provide information to medical practitioners on which cancers exhibit common genetics signatures. Applying dimension reduction to spam emails could allow one to identify odd emails which might be spam (anomaly detection). Learning the common relationships between variables in a consumer data set opens the possibility of matching consumers which items they might enjoy (recommendation systems). The examples above are by no means exhaustive, but they do raise a few critical points. Where Each application above is one step in a larger data science problem. Unsupervised learning is rarely detached from a broader data science pipeline. This is a stark difference from classification and prediction which are often viewed as isolated statistical problems (though careful practitioners recognize that data collection and cleaning and the communication of results are often of equal or greater importance than analysis). Examples are provided throughout the text demonstrating where UL can be useful. What One data set could be approached from one or more different perspectives. For example, one could apply dimension reduction to the cancer data to visualize the potentially complex data in a manner that preserves important relationships. Combining many approaches together makes unsupervised learning a powerful tool to exploratory data analysis and featurization, particularly when combined with expert level content knowledge. Choosing a UL method is linked with what we hope to learn about our data. How If we want an algorithm that clusters similar vectors or provides a visualization that keeps close points together, then we should be mindful of the meaning of similarity or proximity. UL algorithms, sometimes implicitly, prioritize different relationships. We explore how these algorithms work from a geometric perspective which is a helpful intellectual scaffolding. In the remainder of this text, we focus primarily on dimension reduction (4 and 6) and clustering (7). References "],["prerequisites.html", "1.1 Prerequisites", " 1.1 Prerequisites This text is targeted at upper level undergraduates with a well rounded background in the following courses and topics Probability: random variables, expectation, variance, and covariance Linear algebra: matrix-vector multiplication, linear spaces, eigendecompositions Multivariable calculus: gradients and basic optimization A brief review of the most important ideas is covered in Chapter 2. Additional tools and techniques needed for specific algorithms are covered at a cursory level as needed. References to more thorough discussions are provided throughout for the interested reader. "],["ch-prob.html", "Chapter 2 Mathematical Background and Notation", " Chapter 2 Mathematical Background and Notation This text assumes a familiarity with probability theory, multivariable calculus, and linear algebra consistent with what one would see in an undergraduate course. The most important concepts are Probability: Major concepts: mean, covariance, correlation, (in)dependence Minor concepts: likelihood functions, conditional expectation, parametric distributions (e.g. Gaussian) Linear Algebra Major concepts: interpretations of matrix-vector and matrix-matrix multiplication, spans, bases, matrix decompositions Minor concepts: orthonormal transformations, vector and matrix norms Multivariable calculus: Major concepts: gradients (computation and interpretation), optimization with and without constraints Minor concepts: multivariate Taylor expansions, determing properties of local optima via Hessian matrix In this chapter, we will identify common notation and review the most important prerequisite material. "],["important-notation.html", "2.1 Important notation", " 2.1 Important notation Throughout this text, we will be working with vectors and matrices quite often so we begin with a bit of notation and a few important conventions we will adopt hereafter. We’ll use notation \\(\\vec{x}\\in\\mathbb{R}^d\\) to denote a \\(d\\)-dimensional vector. Importantly, we adopt the convention that vectors are columns vectors by default so that \\[\\vec{x} = \\begin{bmatrix} x_1 \\\\ \\vdots \\\\ x_d \\end{bmatrix}\\] where \\(x_1,\\dots,x_d\\) are the entries or coordinates of vector \\(\\vec{x}\\). Row vectors are then the transpose of column vectors so that \\(\\vec{x}^T = (x_1,\\dots, x_d)\\). When needed we’ll let \\(\\vec{0}\\) denote a vector of all zeros and \\(\\vec{1}\\) a vector of all ones with the dimensionality defined implicitly, e.g. if \\(\\vec{x}\\in\\mathbb{R}^d\\) then in the expression \\(\\vec{x} + \\vec{1}\\), you may interpret \\(\\vec{1}\\in\\mathbb{R}^d\\) so the summation is well defined. Matrices will be denoted in bold so that \\({\\bf A}\\in\\mathbb{R}^{m\\times n}\\) denotes an \\(m\\times n\\) matrix with real entries. Subscripts are read as row,column so that \\({\\bf A}_{ij}\\) is the entry of \\({\\bf A}\\) in the \\(i\\)th row and \\(j\\)th column. A superscript \\(T\\) denotes the transpose of a matrix. For a square matrix \\({\\bf B}\\in \\mathbb{R}^{n\\times n}\\), we use notation \\(Tr({\\bf B})\\) to denote the trace of \\({\\bf B}\\) and \\(det({\\bf B}) = |{\\bf B}|\\) to denotes its determinant. Using this above notation, we may also define the inner product and outer product of two vectors. For vectors \\(\\vec{x}\\) and \\(\\vec{y}\\), the inner product or dot product of \\(\\vec{x}\\) and \\(\\vec{y}\\) is the scalar \\(\\vec{x}^T \\vec{y} = \\sum_{i=1}^d x_i y_i\\). Alternatively, we may also consider the outer product \\(\\vec{x}\\vec{y}^T\\) which is a matrix such that \\((\\vec{x} \\vec{y}^T)_{ij} = x_i y_j.\\) For the inner product to be well defined \\(\\vec{x}\\) and \\(\\vec{y}\\) must have the same dimension. This is not the case for the outer product. If \\(\\vec{x}\\in\\mathbb{R}^m\\) and \\(\\vec{y}\\in\\mathbb{R}^n\\) then \\(\\vec{x} \\vec{y}^T \\in \\mathbb{R}^{m\\times n}.\\) If we view a \\(d\\)-dimensional vector as a \\(d\\times 1\\) matrix, then both of these algebraic computations are completely consistent with standard matrix multiplication which we will revisit near the end of this chapter. Let \\(f:\\mathbb{R}^d\\to \\mathbb{R}\\) be a function of \\(d\\)-dimensional vector \\(\\vec{x}\\). Then we define the gradient of \\(f\\) with respect to \\(\\vec{x}\\), denoted \\(\\nabla f\\), to be the \\(d\\)-dimensional vector of partial deriviates of \\(f\\) with respect to the coordinates of \\(\\vec{x}\\) so that \\[\\nabla f = \\begin{bmatrix} \\frac{\\partial f}{ \\partial x_1} \\\\ \\vdots \\\\ \\frac{\\partial f}{\\partial x_d} \\end{bmatrix}.\\] The Hessian matrix of \\(f\\) with respect to \\(\\vec{x}\\), denoted as \\(\\mathcal{H}f\\), is the \\(d\\times d\\) matrix of second order partial derivatives of \\(f\\) with respect to the coordinates of \\(\\vec{x}\\) so that \\((\\mathcal{H}f)_{ij} = \\frac{\\partial^2 f}{\\partial x_i \\partial x_j}\\). If we are considering a function of multiple vector valued variables, e.g. \\(f(\\vec{x},\\vec{y},\\vec{z})\\) then we use \\(\\nabla_{\\vec{x}}\\) to denote the gradient of \\(f\\) w.r.t. the vector \\(\\vec{x}\\) only. "],["random-vectors-in-mathbbrd.html", "2.2 Random vectors in \\(\\mathbb{R}^d\\)", " 2.2 Random vectors in \\(\\mathbb{R}^d\\) Throughout this text, we will consider independent, identically distributed (iid) samples of a \\(d\\)-dimensional random vector \\(\\vec{x} = (x_1,\\dots,x_d)^T\\). Each coordinate \\(x_i\\) is a random variable and we may view the distribution of the random vector \\(\\vec{x}\\) as the joint distribution of all of its coordinates. The cumulative distribution function of \\(\\vec{x}\\) is then \\[F(\\vec{x} \\le \\vec{x}^o\\,) = P(\\vec{x} \\le \\vec{x}^o\\,) = P(x_1\\le x_1^o, \\dots ,x_d \\le x_d^o\\,).\\] We’ll largely consider continuous entries so we can rewrite the above in terms of the joint density, \\(f: \\mathbb{R}^d \\to [0,\\infty)\\), of \\(\\vec{x}\\) such that \\[F(\\vec{x} \\le \\vec{x}^o\\,) = \\int_{-\\infty}^{x_1^o}\\dots\\int_{-\\infty}^{x_d^o} f(x_1,\\dots,x_d) dx_d\\dots dx_1.\\] To simplify notation, we’ll often write the above as \\[\\int_{-\\infty}^{x_1^o}\\dots\\int_{-\\infty}^{x_d^o} f(x_1,\\dots,x_d) dx_d\\dots dx_1 = \\int_{-\\infty}^{\\vec{x}^0} f(\\vec{x})d\\vec{x}.\\] In the case that \\(\\vec{x}\\) may only take one of a countable set of outcomes, one can replace the integral above with a corresponding summation. Generally speaking we will be considering data drawn from an unknown distribution. However, considering known cases which we can analyze and sample from is often helpful to study how different algorithms perform. With this idea in mind, let’s define a few different distributions which we will revisit throughout this chapter as examples. In each case, we will also provide scatterplots of independent samples from these distributions so that you can visualize the distributions more directly. Definition 2.1 (Multivariate Gaussian Distribution) The multivariate Gaussian distribution in \\(\\mathbb{R}^d\\) with mean \\(\\vec{\\mu} \\in \\mathbb{R}^d\\) and symmetric positive definite covariance matrix \\({\\bf \\Sigma} \\in \\mathbb{R}^{d\\times d}\\) is the random \\(d\\)-dimensional vector \\(\\vec{x}\\) with probability density function \\[f(\\vec{x}) = \\frac{1}{(2\\pi)^{d/2} det({\\bf \\Sigma})^{1/2}}\\exp\\left(-\\frac{1}{2}(\\vec{x}-\\vec{\\mu})^T{\\bf \\Sigma}^{-1}(\\vec{x}-\\vec{\\mu})\\right).\\] We use shorthand \\(\\vec{x}\\sim \\mathcal{N}(\\vec{\\mu},{\\bf \\Sigma})\\) to indicate \\(\\vec{x}\\) follows this distribution. The Multivariate Gaussian distribution is also often called the Multivariate Normal (MVN) distribution. For example of the MVN, first consider the two-dimensional case with \\(\\vec{\\mu} = \\vec{0}\\) and \\[{\\bf \\Sigma} = \\begin{bmatrix}1 &amp; p \\\\ p &amp; 1\\end{bmatrix}.\\] Below, we show scatterplots of \\(1000\\) independent samples from this distribution for three different values of \\(p.\\) We will also refer to a collection of points in \\(\\mathbb{R}^d\\) as a point cloud. For an examples in \\(\\mathbb{R}^3\\) we again consider case where \\(\\vec{\\mu}=0\\) and let \\[{\\bf \\Sigma} = \\begin{bmatrix}1 &amp; p &amp; p^2 \\\\ p &amp; 1 &amp;p \\\\ p^2 &amp;p &amp; 1 \\end{bmatrix}.\\] In the preceding examples, different choices of \\(p\\), hence different covariance matrices, resulted in point clouds with different orientations and shapes. Later, we’ll discuss how we can determine the shape and orientation from the covariance matrix with the aid of linear algebra. What about changes to \\(\\vec{\\mu}\\)? Changing \\(\\vec{\\mu}\\) translates the point cloud. If in the preceding examples, we had taken \\(\\vec{\\mu}=\\vec{1}\\) the scatterplots would have had the same shape and orientation, but they would have been tranlated by a shift of \\(\\vec{1}.\\) Definition 2.2 (Multivariate t Distribution) The multivariate t-distribution on \\(\\mathbb{R}^d\\) with location vector \\(\\vec{\\mu}\\in\\mathbb{R}^d\\), positive definite scale matrix \\({\\bf \\Sigma}\\in \\mathbb{R}^{d\\times d}\\) and degrees of freedom \\(\\nu\\) has density \\[f(\\vec{x}) = \\frac{\\Gamma\\left(\\frac{\\nu+d}{2}\\right)}{\\Gamma(\\nu/2)\\nu^{d/2}\\pi^{d/2}|{\\bf \\Sigma}|^{1/2}}\\left[1 + \\frac{1}{\\nu}(\\vec{x}-\\vec{\\mu})^T{\\bf \\Sigma}^{-1}(\\vec{x}-\\vec{\\mu})\\right]^{-(\\nu +d)/2}.\\] We use shorthand \\(\\vec{x}\\sim t_\\nu(\\vec{\\mu},{\\bf \\Sigma})\\) to indicate \\(\\vec{x}\\) follows this distribution. We’ll only consider a three dimensional case where the location, which determines the mode of the distribution, is \\(\\vec{0}\\) and the scale is the identity matrix. As in the Gaussian case, changing \\(\\vec{\\mu}\\) translates the point cloud and different values of \\({\\bf \\Sigma}\\) give point clouds with different shapes. The remaining parameter to consider here is the degrees of freedom, \\(\\nu\\), which controls how spread out the samples can be. We show results for three different choices of the degrees of freedom. For smaller degrees of freedom, there are more points which are far from the mode at \\(\\vec{0}\\). "],["expectation-mean-and-covariance.html", "2.3 Expectation, Mean, and Covariance", " 2.3 Expectation, Mean, and Covariance As in the one-dimensional case, the cumulative distribution function determines the distribution of the random vector, and using the density we may establish a few important quantities which will appear often throughout this text. The first is the mean or expected value of the random vector which is the vector of expected values of each entry so that \\[\\begin{equation} E[\\vec{x}] = \\int_{\\mathbb{R}^d}\\vec{x} f(\\vec{x})d\\vec{x} = \\begin{bmatrix} E[x_1] \\\\ \\vdots \\\\ E[x_d] \\end{bmatrix} = \\begin{bmatrix} \\int_{\\mathbb{R}^d} x_1 f(\\vec{x})d\\vec{x} \\\\ \\vdots \\\\ \\int_{\\mathbb{R}^d} x_d f(\\vec{x})d\\vec{x} \\end{bmatrix} \\tag{2.1} \\end{equation}\\] where \\[\\int_{\\mathbb{R}^d} x_i f(\\vec{x})d\\vec{x} = \\int_{-\\infty}^\\infty \\dots \\int_{-\\infty}^\\infty x_i f(x_1,\\dots,x_d)dx_1 \\dots dx_d.\\] Note, we are assuming each of the integrals in (2.1) is well defined, which is a convention we adhere to throughout this text. Often, we’ll often use \\(\\vec{\\mu}\\) to denote the mean vector. When we are considering more than multiple random vectors \\(\\vec{x}\\) and \\(\\vec{y}\\) we will add a corresponding subscript \\(\\vec{\\mu}_\\vec{x}\\) to denote the corresponding mean of \\(\\vec{x}\\). The linearity of expectation for univariate random vectors holds here as well. If \\(\\vec{x}\\in\\mathbb{R}^d\\) is a random vector, \\({\\bf A}\\in\\mathbb{R}^{k\\times d}\\) is a matrix of constant entries, and \\(\\vec{b}\\in\\mathbb{R}^k\\) is a vector of constant entries then \\[E[{\\bf A}\\vec{x} + \\vec{b}] = {\\bf A}\\vec{\\mu} + \\vec{b}.\\] Importantly, for non-squared matrices \\({\\bf A}\\) then mean of \\({\\bf A}\\vec{x}\\) will be of a different dimension than \\(\\vec{x}.\\) In general, the coordinates of a random vector will not be independent. To quantify the pairwise dependence, we could consider the covariance \\[Cov(x_i,x_j) = E[(x_i - \\mu_i)(x_j -\\mu_j)] = \\int_\\mathbb{R}^d (x_i-\\mu_i)(x_j-\\mu_j) f(\\vec{x})d\\vec{x}\\] for \\(1\\le i,j \\le d\\). In the case \\(i=j\\), this simplifies to \\(Cov(x_i,x_i) = Var(x_i)\\). Importantly, we do not want to consider each all of the pairwise covariance separately. Instead, we can organize them as a \\(d\\times d\\) matrix \\({\\bf \\Sigma}\\) with entries \\({\\bf \\Sigma}_{ij} = Cov(x_i,x_j)\\). Hereafter, we will refer to \\({\\bf \\Sigma}\\) as the covariance matrix of \\(\\vec{x}.\\) When we are considering multiple random vectors we will use subscripts so that \\({\\bf \\Sigma}_{\\vec{x}}\\) and \\({\\bf \\Sigma}_{\\vec{y}}\\) denote the covariance matrices or random vectors \\({\\vec{x}}\\) and \\({\\vec{y}}\\) respectively. Following the notational conventions, it follows that \\(\\vec{x} - E[\\vec{x}] = \\vec{x} - \\vec{\\mu} \\in \\mathbb{R}^d\\) so that the outer product of \\(\\vec{x} - \\vec{\\mu}\\) with itself is the \\(d\\times d\\) matrix with entries \\[[(\\vec{x} - \\vec{\\mu})(\\vec{x} - \\vec{\\mu})^T]_{ij} = (x_i-\\mu_i)(x_j-\\mu_j)\\] so that we may more compactly write \\[\\begin{equation} \\text{Var}(\\vec{x}) = E\\left[(\\vec{x} - \\vec{\\mu})(\\vec{x} - \\vec{\\mu})^T\\right] \\tag{2.2} \\end{equation}\\] where we interpret the expectation operation as applying to each entry of the matrix \\((\\vec{x} - \\vec{\\mu})(\\vec{x} - \\vec{\\mu})^T\\). This looks very similar to the univariate case save that we must be mindful of the multidimensional nature of our random vector. In fact with some algebra, we have the following alternative formula for the covariance matrix \\[{\\bf \\Sigma} = E[\\vec{x}\\,\\vec{x}^T] -\\vec{\\mu}\\vec{\\mu}^T\\] which is again reminiscent of the univariate case. Showing this result is left as a short exercise. One brief note to avoid confusion. Other texts refer to \\(\\text{Var}(\\vec{x})\\) as the variance matrix or variance-covariance matrix. Herein, we use the term covariance matrix for \\(\\text{Var}(\\vec{x}).\\) Recall the univariate case, \\[\\text{Var}(aX+b) = a^2\\text{Var}(X)\\] for constants \\(a\\) and \\(b\\) and (one-dimensional) random variable \\(X\\). Similar to the univariate case, there is a formula for the covariance of an affine mapping of a random vector, but the specific form requires us to be mindful of the matrix structure of the covariance matrix. For random vector \\(\\vec{x}\\in\\mathbb{R}^d\\), constant matrix \\({\\bf A}\\in\\mathbb{R}^{k\\times d}\\) and constant vector \\(\\vec{b}\\in\\mathbb{R}^k\\), it follows (see exercises) that \\[{\\bf \\Sigma}_{{\\bf A}\\vec{x}+\\vec{b}} = {\\bf A \\Sigma A}^T.\\] Importantly, note that \\({\\bf A \\Sigma A}^T\\) is a \\(k\\times k\\) matrix which is consistent with the fact that \\({\\bf A}\\vec{y}+\\vec{b}\\) is a \\(k\\)-dimensional vector. Example 2.1 (Mean and Covariance of MVN) If \\(\\vec{x} \\sim \\mathcal{N}(\\vec{\\mu}, {\\bf \\Sigma})\\) then \\(E[\\vec{x}] = \\vec{\\mu}\\) and \\(\\text{Var}(\\vec{x}) = {\\bf \\Sigma}\\) Example 2.2 (Mean and Covariance of Multivariate t-distribution) Let \\(\\vec{x} \\sim t_\\nu(\\vec{\\mu}, {\\bf \\Sigma})\\). If \\(\\nu &gt; 1\\) then \\(E[\\vec{x}] = \\vec{\\mu}\\); otherwise the mean does not exist. If \\(\\nu &gt; 2\\), then \\(\\text{Var}(\\vec{x}) = \\frac{\\nu}{\\nu-2}{\\bf \\Sigma}\\); otherwise, the covariance matrix does not exist. Verifying these examples is left to the exercises and rely on multivariate change of variables which are not covered here. 2.3.1 Sample Mean and Sample Covariance In many cases, we’ll consider a collection of \\(N\\) \\(iid\\) vectors \\(\\vec{x}_1,\\dots,\\vec{x}_N \\in \\mathbb{R}\\). Again, subscripts are used here, but importantly when accompanied by the \\(\\vec{\\cdot}\\) sign a subscript does not refer to a specific coordinate of a vector but rather one vector in a set. Given iid observations \\(\\vec{x}_1,\\dots,\\vec{x}_N\\), we will use sample averages to estimate the expectation and covariance of the data generating distribution. We’ll use bars to denote sample averages so that \\(\\bar{x}\\) denotes the sample mean and \\(\\bar{\\bf \\Sigma}\\) the sample covariance. In this case, we have \\[\\begin{equation} \\bar{x} = \\frac{1}{N}\\sum_{i=1}^N \\vec{x}_i. \\tag{2.3} \\end{equation}\\] Similarly, we define the sample covariance matrix to be \\[\\begin{equation} {\\bf \\bar{\\Sigma}} = \\frac{1}{N} \\sum_{i=1}^N (\\vec{x}_i - \\bar{x})(\\vec{x}_i - \\bar{X})^T = \\left(\\frac{1}{N}\\sum_{i=1}^N \\vec{x}_i\\vec{x}_i^T\\right) - \\bar{x}\\bar{x}^T \\tag{2.4} \\end{equation}\\] In (2.4), dividing by \\(N\\) rather than \\(N-1\\) yields biased estimates of the terms of the sample covariance matrix. However, the final formula in (2.4) more directly matches the corresponding term in the definition of the covariance matrix. Had we used a factor of \\(1/(N-1)\\) instead, we would have \\[\\frac{1}{N-1}\\sum_{i=1}^N (\\vec{x}_i - \\bar{X})(\\vec{x}_i - \\bar{X})^T = \\left(\\frac{1}{N}\\sum_{i=1}^N \\vec{x}_i\\vec{x}_i^T\\right) - \\frac{N}{N-1}\\bar{x}\\bar{x}^T\\] which is slightly more cumbersome. In the examples we will consider, \\(N\\) will typically be large enough so that the numerical difference is small. As such, we will opt for algebraically convenient definition form of (2.4) as our definition of the sample covariance matrix. Alternatively, we can view the sample mean and sample covariance as the mean and covariance (using expectation rather than averages) of the empirical distribution from a collection of samples \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) defined below. Definition 2.3 (Empirical Distribution) Given a finite set of points \\(\\mathcal{X}=\\{\\vec{x}_1,\\dots,\\vec{x}_N\\} \\subset \\mathbb{R}^d\\), we say that random vector \\(\\vec{z}\\) follows the empirical distribution from data \\(\\mathcal{X}\\) if \\[P(\\vec{z} = \\vec{x}_i) = \\frac{1}{N}, \\quad i = 1,\\dots, N\\] and is zero otherwise. If \\(\\vec{z}\\) follows the empirical distribution on a set of \\(N\\) points \\(\\mathcal{X}= \\{\\vec{x}_1,\\dots,\\vec{x}_N\\}\\), then the expectation and covariance matrix of \\(\\vec{z}\\) are equivalent to the sample mean and sample covariance for data \\(\\vec{x}_1,\\dots,\\vec{x}_N.\\) 2.3.2 The Data Matrix Both (2.3) and (2.4) involve summations. Working with sums will prove cumbersome, so briefly let us introduce a more compact method for representing these expressions. Hereafter, we will organize the vectors \\(\\vec{x}_1,\\dots, \\vec{x}_N\\) into a data matrix \\[{\\bf X} = \\begin{bmatrix} \\vec{x}_1^T \\\\ \\vdots \\\\ \\vec{x}_N^T\\end{bmatrix} \\in \\mathbb{R}^{N\\times d}.\\] In this setup, \\({\\bf X}_{ij}\\) is the \\(j\\)th coordinate of \\(\\vec{x}_i\\), or equivalently, the \\(j\\)th measurement taken from the \\(i\\)th subject. Thus, rows of \\({\\bf X}\\) index subjects (realizations of the random vector) whereas columns index common measurements across all subjects. Using the data matrix, we can forgo the summation notation giving the following formulas for the sample mean \\[\\begin{equation} \\bar{x} = \\frac{1}{N} {\\bf X}^T \\vec{1} \\tag{2.5} \\end{equation}\\] and the sample covariace matrix \\[\\begin{equation} {\\bf \\bar{\\Sigma}} = \\frac{1}{N} ({\\bf HX})^T {\\bf HX} = \\frac{1}{N} {\\bf X}^T {\\bf H X} \\tag{2.6} \\end{equation}\\] where \\({\\bf H} = {\\bf I} - \\frac{1}{N} \\vec{1} \\vec{1}^T \\in \\mathbb{R}^{N\\times N}\\) is known as the centering matrix. We have used the fact that \\({\\bf H}\\) is symmetric and idempotent, e.g. \\({\\bf H}^2 = {\\bf H}\\) which is left as a exercise. The vector \\(\\vec{1}\\) is the \\(N\\)-dimensional vector with 1 in each entry and \\({\\bf I}\\) is the \\(N\\times N\\) identity matrix. One can show (see exercises) that the matrix-vector and matrix-matrix multiplication implicitly handles the summations in (2.3) and (2.4). To conclude this section, we compare the sample mean and covariance matrix computed from random draws from the \\(MVN\\) distribution. Example 2.3 (Draws from the MVN) We draw \\(N=100\\) samples from the \\(\\mathcal{N}(\\vec{0}, {\\bf \\Sigma})\\) distribution where \\[{\\bf \\Sigma}=\\begin{bmatrix}1 &amp; 0 &amp; 0 \\\\ 0 &amp;4 &amp; 0 \\\\ 0&amp;0&amp;9\\end{bmatrix}\\]. N &lt;- 100 X &lt;- mvrnorm(n=N, mu = rep(0,3), Sigma = c(1,4,9)*diag(3)) To compute the sample mean and sample covariance, we implement (2.3) and (2.4). xbar &lt;- (1/N) * t(X) %*% rep(1,N) H &lt;- diag(N) - (1/N)*matrix(1,nrow = N, ncol = N) S &lt;- (1/N) * t(H %*% X) %*% (H %*% X) The results are shown below (rounded to three decimal places) \\[\\bar{x} = \\begin{bmatrix} 0.008 \\\\ 0.078 \\\\ -0.239 \\end{bmatrix} \\qquad \\text{and} \\qquad \\bar{\\bf \\Sigma} = \\begin{bmatrix} 1.148 &amp; 0.216 &amp; 0.121 \\\\ 0.216 &amp; 4.181 &amp; 0.087 \\\\ 0.121 &amp; 0.087 &amp; 9.366 \\end{bmatrix}\\] which are close to the true values. If we increase the sample size to \\(N=10^4\\) samples, we get estimates which are closer to the true values (shown below). \\[\\bar{x} = \\begin{bmatrix} 0.001 \\\\ 0.02 \\\\ 0.051 \\end{bmatrix} \\qquad \\text{and} \\qquad \\bar{\\bf \\Sigma} = \\begin{bmatrix} 0.991 &amp; -0.02 &amp; -0.04 \\\\ -0.02 &amp; 3.997 &amp; 0.095 \\\\ -0.04 &amp; 0.095 &amp; 8.992 \\end{bmatrix}\\] "],["linear-algebra.html", "2.4 Linear Algebra", " 2.4 Linear Algebra 2.4.1 Assumed Background This text assumes familiarity with definitions from a standard undergraduate course in linear algebra including but not limited to linear spaces, subspaces, spans and bases, and matrix multiplication. However, we have elected to provide review of some of the most commonly used ideas in the methods we’ll cover in the following subsections. For a more thorough treatment of linear algebra, please see [5] 2.4.2 Interpretations of Matrix Multiplication Throughout this text, comfort with common calculations in linear algebra will be very important. Herein, we assume the reader has some exposure to these materials at an undergraduate level including the summation of vectors or matrices. The familiarity with matrix-vector and matrix-matrix multiplication will play a central role as we have already seen in the case of the data matrix formulation of the sample mean and sample covariance. However, rote familiarity with computation will not be sufficient to build intuition for the methods we’ll discuss. As such, we’ll begin with a review of a few important ways one can view matrix-vector (and matrix-matrix) multiplication which will be helpful later. Those who feel comfortable with the myriad interpretations of matrix multiplication in terms of linear combinations of the rows and columns may skip to the next section. Suppose we have matrix \\({\\bf A}\\in\\mathbb{R}^{m\\times n}\\) and vector \\(\\vec{x}\\in\\mathbb{R}^n\\). If we let \\(\\vec{a}_1^T,\\dots, \\vec{a}_M^T\\in\\mathbb{R}^n\\) denote the rows of \\({\\bf A}\\), then the most commonly cited formula for computing \\({\\bf A}\\vec{x}\\) is \\[{\\bf A}\\vec{x} = \\begin{bmatrix} \\vec{a}_1^T \\\\ \\vdots \\\\ \\vec{a}_m^T\\end{bmatrix} \\vec{x} = \\begin{bmatrix}\\vec{a}_1^T \\vec{x} \\\\ \\vdots \\\\ \\vec{a}_m^T\\vec{x}\\end{bmatrix}\\] wherein we take the inner product of the rows of \\({\\bf A}\\) with vector \\(\\vec{x}\\). We can expand this definition to matrix-matrix multiplication. If \\({\\bf B}\\in\\mathbb{R}^{n\\times k}\\) has columns \\(\\vec{b}_1,\\dots,\\vec{b}_k\\) then \\[({\\bf AB})_{ij} = \\vec{a}_i^T\\vec{b}_j\\] where we take the inner product of the \\(i\\)th row of \\({\\bf A}\\) with the \\(j\\)th column of \\({\\bf B}\\) to get the \\(ij\\)th entry of \\({\\bf AB}.\\) This is perfectly reasonable method of computation, but alternative perspectives are helpful, particularly when we consider different factorization of the data matrix in later chapters.. Returning to \\({\\bf A}\\vec{x}\\), suppose now that \\({\\bf A}\\) has columns \\(\\vec{\\alpha}_1,\\dots,\\vec{\\alpha}_n\\) and \\(\\vec{x} = (x_1,\\dots,x_n)^T\\), then we may view \\({\\bf A}\\vec{x}\\) as a linear combination of the columns of \\({\\bf A}\\) so that \\[{\\bf A}\\vec{x} = \\begin{bmatrix}\\vec{\\alpha}_1 \\,| &amp; \\cdots &amp;|\\, \\vec{\\alpha}_n \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ \\vdots \\\\ x_n \\end{bmatrix} = x_1\\vec{\\alpha}_1 + \\dots + x_n \\vec{\\alpha}_n = \\sum_{j=1}^n x_j\\vec{\\alpha}_j.\\] Here, we added vertical columns between the vectors \\(\\vec{\\alpha}_i\\) to make clear that \\(\\begin{bmatrix}\\vec{\\alpha}_1 \\,| &amp; \\cdots &amp;|\\, \\vec{\\alpha}_n \\end{bmatrix}\\) is a matrix. We can extend this perspective to see that the columns of \\({\\bf AB}\\) are comprised of different linear combinations of the columns of \\({\\bf A}\\). Specifically, the \\(j\\) column of \\({\\bf AB}\\) is a linear combination of the columns of \\({\\bf A}\\) using the entries in the \\(j\\)th column of \\({\\bf B}\\). More specifically, the \\(j\\)th column of \\({\\bf AB}\\) is the linear combination \\[\\sum_{i=1}^n {\\bf B}_{ij}\\vec{\\alpha}_{i}.\\] Our final observations follows by taking these insights on linear combinations of columns and transposing the entire operation. What can we say about the rows of \\({\\bf AB}\\)? We can rewrite \\({\\bf AB} = ({\\bf B}^T{\\bf A}^T)^T\\). The columns of \\({\\bf B}^T{\\bf A}^T\\) are linear combinations of the columns of \\({\\bf B}^T\\). Since the columns of \\({\\bf B}^T\\) are the rows of \\({\\bf B}\\), it follows that the rows of \\({\\bf AB} = ({\\bf B}^T{\\bf A}^T)^T\\) are linear combinations of the rows of \\({\\bf B}\\) with weights given by the entries in each row of \\({\\bf A}\\) respectively. In mathematical notation, the \\(i\\)th row of \\({\\bf AB}\\) is \\[\\sum_{j=1}^n {\\bf A}_{ij} \\vec{\\beta}_j^T\\] where \\(\\vec{\\beta}_1^T,\\dots, \\vec{\\beta}_n^T\\) are the rows of \\({\\bf B}.\\) 2.4.3 Norms and Distances Throughout this text, we will use \\(\\| \\cdot \\|\\) to denote the usual Euclidean (or \\(\\ell_2\\)) norm, which for a vector, \\(\\vec{x} = (x_1,\\dots,x_d)\\in\\mathbb{R}^d\\), is \\[\\|\\vec{x}\\| = \\left(\\sum_{j=1}^d x_j^2 \\right)^{1/2}.\\] We may then define the Euclidean distance between two \\(d\\)-dimension vectors \\(\\vec{x}\\) and \\(\\vec{y}\\) to be \\[\\|\\vec{x}-\\vec{y}\\| = \\left(\\sum_{j=1}^d (x_j - y_j)^2\\right)^{1/2}.\\] Euclidean distance is the most commonly used notion of distance (or norm or metric) between two vectors, but it is far from the only option. We can consider the general \\(\\ell_p\\) norm \\[\\|\\vec{x}\\|_p = \\left(\\sum_{j=1}^d x_j^p\\right)^{1/p}\\] which coincides with the Euclidean norm for \\(p=2\\). Two other special cases include \\(p=1\\) also known as the Manhattan distance and \\(p = \\infty\\) also known as the sup-norm \\[\\|\\vec{x}\\|_\\infty = \\max_{j=1,\\dots, d} |x_j|.\\] We can also extend this notions of vector norms to a measure of the norm of a matrix. Two important cases are the \\(\\ell_2\\) norm of a matrix and the Frobenius norm. For matrix \\({\\bf A}\\in\\mathbb{R}^{m\\times n}\\), the \\(\\ell_2\\) norm is \\[\\begin{equation} \\|{\\bf A}\\| = \\sup_{\\vec{x}\\in\\mathbb{R}^n \\text{ s.t. } \\vec{x}\\ne \\vec{0}} \\frac{\\|{\\bf A}\\vec{x}\\|}{\\|\\vec{x}\\|} = \\sup_{\\vec{x}\\in\\mathbb{R}^n \\text{ s.t. }\\|\\vec{x}\\|=1} \\|{\\bf A}\\vec{x}\\|. \\end{equation}\\] You can interpret \\(\\|{\\bf A}\\|\\) as the largest relative change in the Euclidean length of a vector after it is multiplied by \\({\\bf A}\\). The Frobenius norm extends the algebraic definition notion of Euclidean length to a matrix. For \\({\\bf A}\\in\\mathbb{R}^{m\\times n}\\), its Frobenius norm is \\[\\begin{equation} \\|{\\bf A}\\|_F = \\left(\\sum_{i=1}^m\\sum_{j=1}^n {\\bf A}_{ij}^2\\right)^{1/2}. \\end{equation}\\] The \\(\\ell_2\\) distance between two matrices is then \\(\\|{\\bf A}-{\\bf B}\\|\\) and the Frobenius distance between two matrices is \\(\\|{\\bf A} - {\\bf B}\\|_F\\) (where both \\({\\bf A}\\) and \\({\\bf B}\\) have the same number of rows and columns). 2.4.4 Important properties A few additional definitions that we will use throughout the text are provided below without examples. Definition 2.4 (Symmetric Matric) Matrix \\({\\bf A}\\in \\mathbb{R}^{d\\times d}\\) is symmetric if \\({\\bf A} = {\\bf A}^T.\\) Definition 2.5 (Eigenvectors and Eigenvalues) Let \\({\\bf A}\\in\\mathbb{R}^{d\\times d}\\). If there is a scalar \\(\\lambda\\) and vector \\(\\vec{x}\\ne \\vec{0}\\) such that \\({\\bf A}\\vec{x} = \\lambda \\vec{x}\\) then we say \\(\\lambda\\) is an eigenvalue of \\({\\bf A}\\) with associated eigenvector \\(\\vec{x}.\\) 2.4.5 Matrix Factorizations Two different matrix factorization will arise many times throughout the text. The first, which is commonly presented in linear algebra courses, is the spectral decomposition of a square matrix which is also known as diagonalization or eigenvalue decomposition. Herein, we assume familiarity with eigenvalues and eigenvectors. The second factorization is the singular value decomposition. In the subsequent subsections, we briefly discuss these two factorizations, their geometric interpretation, and some notation that will typically be used in each case. 2.4.5.1 Eigenvalue Decomposition We begin with the eigenvalue decomposition of a square matrix \\({\\bf A}\\in\\mathbb{R}^{d\\times d}\\). As you may recall, \\({\\bf A}\\) will have a set of \\(d\\) eigenvalues \\(\\lambda_1,\\dots, \\lambda_d\\) (which may include repeated values) and associated eigenvectors. A number, \\(\\lambda\\), may be repeated in the list of eigenvalues, and the number of times is called the algebraic multiplicity of \\(\\lambda\\). Each eigenvalue has a least one eigenvector. In cases where the eigenvalue has algebraic multiplicity greater than one, we refer to its geometric multiplicity as the number of linearly independent eigenvectors associated with the eigenvalue. The algebraic multiplicity is always greater than or equal to the geometric multiplicity. However, this is not always the case, and when this occurs, the matrix cannot be diagonalized. Fortunately, we will largely be dealing with symmetric matrices for which diagonalization is guaranteed by the following theorem. Theorem 2.1 (Spectral Decomposition Theorem for Symmetric Matrices) Any symmetric matrix \\({\\bf A}\\in\\mathbb{R}^{d\\times d}\\) can be written as \\[{\\bf A} = {\\bf U\\Lambda U}^T\\] where \\({\\bf U}\\in\\mathbb{R}^{d\\times d}\\) is an orthonormal matrix and \\({\\bf \\Lambda}\\) is a diagonal matrix \\[{\\bf \\Lambda} = \\begin{bmatrix} \\lambda_1 &amp; 0&amp;0 \\\\ 0&amp; \\ddots &amp;0 \\\\ 0&amp;0 &amp;\\lambda_d\\end{bmatrix}\\] where the scalars \\(\\lambda_1,\\dots,\\lambda_d \\in \\mathbb{R}\\) are the eigenvalues of \\({\\bf A}\\) and the corresponding columns of \\({\\bf U}\\) are their associated eigenvectors. By convention, we will always assume the eigenvalues are in decreasing order so that \\(\\lambda_1\\ge \\lambda_2 \\ge \\dots \\ge \\lambda_d\\). The most common types of symmetric matrices that we will encounter are covariance matrices. In those cases, the spectral decomposition of the covariance can provide some helpful insight about the shape generated by many iid samples from a distribution. We demonstrate this idea graphically in the following examples using the MVN. Example 2.4 (Level curves of MVN in) A scatterplot of 1000 iid samples from two-dimensional Gaussian distribution with mean \\(\\vec{0}\\) and covariance \\(\\begin{bmatrix} 10&amp; 2 \\\\ 2 &amp; 10 \\end{bmatrix}\\) is shown below. The eigenvector associated with the largest eigenvalue of the sample covariance matrix is shown in red, whereas the eigenvector shown associated with the second eigenvalue is shown in blue. Note, both eigenvectors have been rescaled so their length is the square root of the associated eigenvalues. Importantly, observe how these eigenvectors follow the spread of the data. As we will see in 4.1, this idea can be used to compress data in a geometrically interpretable manner through PCA. 2.4.5.2 Singular Value Decomposition The spectral theorem is limited in that it requires a matrix to be both square and symmetric. When focusing on data matrices \\({\\bf X}\\in\\mathbb{R}^{N\\times d}\\) both assumptions are extremely unlikely to be satisfied, and we will need a more flexible class of methods. This idea is explored in much greater detail in Chapter 4. For now, we briefly introduce the Singular Value Decomposition and how this factorization provides some insight on the geometric structure of matrix-vector multiplication. For a matrix \\({\\bf A}\\in\\mathbb{R}^{m\\times n}\\) the mapping \\(T_{\\bf A}: \\mathbb{R}^n \\mapsto \\mathbb{R}^m\\) defined as \\(T_{\\bf A}(\\vec{x}) = {\\bf A}\\vec{x}\\) for \\(\\vec{x}\\in\\mathbb{R}^n\\). Since this mapping is linear, we can understand its geometric nature by investigating how the unit sphere in \\(\\mathbb{R}^n\\) is transformed by the mapping \\(T_{\\bf A}\\). More directly, let’s suppose we took every vector on the unit sphere \\(\\mathcal{S} = \\{\\vec{x}\\in\\mathbb{R}^n \\, : \\|\\vec{x}\\| = 1\\}\\) and computed the vector \\({\\bf A}\\vec{x}\\). The result is a hyperellipse in \\(\\mathbb{R}^m\\). The specifics on the orientation and shape of the hyperellipse depend on the matrix \\({\\bf A}\\) which we demonstrate through a brief example. Example 2.5 In Figure 2.1, we show the unit sphere in \\(\\mathbb{R}^2\\) and the resulting hyperellipse in \\(\\mathbb{R}^3\\) after multiplication by the matrix \\[{\\bf A} = \\begin{bmatrix} 3 &amp; 2 \\\\ 2&amp;1 \\\\ 1&amp; 0 \\end{bmatrix}.\\] Figure 2.1: (Left) Unit sphere in 2D, (Right) Hyperellipse that results after multiplication by A We have also added two vectors. On the hyperellipse, the red vector is the longest semi-axis of the ellipse; the blue vector is the shortest semi-axis. The red and blue vectors on the left are the preimages of the semi-axes of the ellipse (those vectors which get mapped to the semi-axes after multiplication with \\({\\bf A}\\)). It may not be clear from the static images above, but the semi-major axes on the right are orthogonal. We provide an interactive plot of hyperellipse below so that you can better see this result. Interestingly, the preimages on the left are also perpendicular. Since they are on the unit sphere, they are also orthonormal. In the preciding example, we have made a few important observations which generalize to any multiplication by a matrix, \\({\\bf A}\\in\\mathbb{R}^{m\\times n}\\). For now, assume that \\(m&gt; n\\) and \\({\\bf A}\\) is full rank. In this case, the hyperellipse \\({\\bf A} \\mathcal{S} = \\{{\\bf A}\\vec{x}\\, : \\vec{x} \\in \\mathcal{S}\\}\\) has orthogonal semi-axes \\(\\sigma_1\\vec{u}_1,\\dots,\\sigma_n\\vec{u}_n\\) with corresponding orthonormal preimages \\(\\vec{v}_1,\\dots,\\vec{v}_n\\). We use the assumption that the lengths of the axes are listed in decreasing order so that \\(\\sigma_1\\ge \\dots\\ge \\sigma_n\\). We may express these mappings in the following manner \\[\\begin{equation} {\\bf A}\\underbrace{ \\begin{bmatrix}\\\\ \\vec{v}_1 |&amp; \\dots &amp; |\\vec{v}_n \\\\ &amp;&amp;\\end{bmatrix}}_{\\tilde{\\bf V}} = \\begin{bmatrix} \\\\ \\sigma_1 \\vec{u}_1 &amp; \\dots &amp; \\sigma_n\\vec{u}_n \\\\&amp;&amp; \\end{bmatrix} = \\underbrace{\\begin{bmatrix}&amp;&amp; \\\\ \\vec{u}_1 &amp; \\dots &amp; \\vec{u}_n \\\\ &amp;&amp;\\end{bmatrix}}_{\\tilde{\\bf U}}\\underbrace{ \\begin{bmatrix} \\sigma_1 &amp; 0&amp; 0\\\\ 0&amp; \\ddots &amp;0 \\\\ 0&amp;0&amp; \\sigma_n \\end{bmatrix}}_{\\tilde{\\bf S}} \\end{equation}\\] Since \\(\\tilde{\\bf V} \\in \\mathbb{R}^{n\\times n}\\) has orthonormal columns so that \\(\\tilde{\\bf V} ^{-1} = \\tilde{\\bf V}^T\\), we arrive at the following decomposition for \\({\\bf A}.\\) Definition 2.6 (The Singular Value Decomposition (SVD)) Let \\({\\bf A} \\in \\mathbb{R}^{m\\times n}\\). Then \\({\\bf A}\\) may be factored as \\[\\begin{equation} {\\bf A} = \\tilde{\\bf U}\\tilde{\\bf S}\\tilde{\\bf V}^T \\tag{2.7} \\end{equation}\\] where \\(\\tilde{\\bf U}\\in\\mathbb{R}^{m\\times n}\\) and \\(\\tilde{\\bf V}\\in\\mathbb{R}^{n\\times n}\\) have orthonormal columns and \\(\\tilde{\\bf S}\\in\\mathbb{R}^{n\\times n}\\) is a diagonal matrix with real entries \\(\\sigma_1 \\ge \\dots \\sigma_n \\ge 0\\) along the diagonal. We refer to (2.7) as the reduced singular value decomposition of \\({\\bf A}.\\) The columns of \\(\\tilde{\\bf U}\\) (\\(\\tilde{\\bf V}\\)) are called the left (right) singular vectors of \\({\\bf A}\\) and the scalars \\(\\sigma_1\\ge \\dots\\ge \\sigma_n\\) are referred to as the singular values of \\({\\bf A}.\\) Let \\(\\vec{u}_1,\\dots,\\vec{u}_n\\in\\mathbb{R}^m\\) be the columns of \\(\\tilde{\\bf U}\\). When \\(m &gt; n\\), we may find additional vectors \\(\\vec{u}_{n+1},\\dots,\\vec{u}_m\\) such that \\(\\{\\vec{u}_1,\\dots,\\vec{u}_m\\}\\) are an orthonormal basis for \\(\\mathbb{R}^m\\). This gives the (full) singular value decomposition of \\({\\bf A}\\) is \\[\\begin{equation} {\\bf A} = {\\bf US\\bf V}^T \\tag{2.8} \\end{equation}\\] where \\[{\\bf U} = \\begin{bmatrix} \\vec{u}_1 &amp; \\dots &amp; \\vec{u}_m\\end{bmatrix}\\in\\mathbb{R}^{m\\times m} \\qquad {\\bf V} = \\begin{bmatrix} \\vec{v}_1 &amp; \\dots &amp; \\vec{v}_n\\end{bmatrix}\\in\\mathbb{R}^{n\\times n}\\] are orthonormal matrices. The matrix \\({\\bf S}\\in\\mathbb{R}^{m\\times n}\\) is formed by taking \\(\\tilde{S}\\) and padding it with zero along the bottom and right so that it is \\(m\\times n\\). We may drop the preceding assumptions that \\(m &gt; n\\) or the \\({\\bf A}\\) is full rank. In fact, every matrix has a singular value decomposition. A proof of this fact using induction may be found in [4]. Furthermore, a few important matrix properties are directly related to the SVD. The rank of a matrix is equal to its number of positive singular values The column space of a matrix is the span of its first \\(rank({\\bf A})\\) left singular vectors The kernel of a matrix is the span of its last \\(n-rank({\\bf A})\\) right singular vectors. When considering matrix muliplication \\({\\bf A}\\vec{x}\\), the full SVD of \\({\\bf A}\\) is helpful for decomposition this matrix multiplication into three more interpretable steps: a rotation/reflection, a stretch/compression, and a final rotation/reflection. \\[\\begin{equation} {\\bf A}\\vec{x} =\\underbrace{ {\\bf U} \\underbrace{[{\\bf D} \\underbrace{({\\bf V}^T \\vec{x} )}_{rot/ref}]}_{str/com}}_{rot/ref} \\end{equation}\\] 2.4.6 Positive Definiteness and Matrix Powers Finally, we review a few brief properties for square matrices. Definition 2.7 (Positive Definite Matrices) A matrix, \\({\\bf A}\\in\\mathbb{R}^{n\\times n}\\) is positive definite if \\(\\vec{x}^T{\\bf A}\\vec{x} &gt;0\\) for all \\(\\vec{x}\\ne 0.\\) Equivalently, \\({\\bf A}\\) is positive definite if all of its eigenvalues are positive. A matrix is positive semidefinite if \\(\\vec{x}^T{\\bf A}\\vec{x} \\ge 0\\) for all \\(\\vec{x}\\ne 0.\\) Equivalently, \\({\\bf A}\\) is positive semidefinite if all of its eigenvalues are non-negative. One may interpret the powers of a matrix as repeated multiplication of a square matrix. More specifically, for any \\(m\\in \\{1,2,\\dots\\}\\), let \\({\\bf A}^m = \\underbrace{{\\bf A} \\dots {\\bf A}}_{m \\text{ times}}\\). For diagonalizable positive definite matrices, we may extend this interpretation to negative and fractional power using the eigenvalue decomposition. If the eigenvalue decomposition of the \\({\\bf A}\\) is \\({\\bf A} = {\\bf W \\Lambda W}^{-1}\\) for some diagonal matrix \\({\\Lambda}\\) with positive entries, \\(\\lambda_1,\\dots,\\lambda_n\\) along its diagonal. For any \\(s\\in\\mathbb{R}\\), we define \\({\\bf A}^s = {\\bf W \\Lambda}^s {\\bf W}^{-1}\\) where \\[\\Lambda^s = \\begin{bmatrix} \\lambda_1^s &amp; 0 &amp; 0 \\\\ 0 &amp; \\ddots &amp; 0 \\\\0&amp;0&amp;\\lambda_n^s\\end{bmatrix}.\\] References "],["exercises.html", "2.5 Exercises", " 2.5 Exercises 2.5.1 Probability Given a random vector \\(\\vec{x}=({\\bf x}_1,{\\bf x}_2)^T \\sim \\mathcal{N}(\\vec{\\mu}, \\mathbf{\\Sigma})\\) where: \\[ \\vec{\\mu} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix} , \\quad \\mathbf{\\Sigma} = \\begin{pmatrix} 1 &amp; 0 \\\\ 0 &amp; 10 \\end{pmatrix} \\] What are the means and variances of the individual components \\(x_1\\) and \\(x_2\\)? What is the covariance and correlation between \\(x_1\\) and \\(x_2\\)? Are \\({\\bf x}_1\\) and \\({\\bf x}_2\\) independent? Given a random vector \\(\\vec{x}=(x_1,x_2)^T \\sim \\mathcal{N}(\\vec{\\mu}, \\mathbf{\\Sigma})\\) where: \\[ \\vec{\\mu} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} , \\quad \\mathbf{\\Sigma} = \\begin{pmatrix} 4 &amp; 2 \\\\ 2 &amp; 3 \\end{pmatrix} \\] What are the means and variances of the individual components \\({\\bf x}_1\\) and \\({\\bf x}_2\\)? What is the covariance and correlation between \\({\\bf x}_1\\) and \\({\\bf x}_2\\)? Are \\({\\bf x}_1\\) and \\({\\bf x}_2\\) independent? Given a random vector \\(\\vec{x} = (x_1,x_2) \\sim t_{10}(\\vec{\\mu},{\\bf \\Sigma})\\) where: \\[\\vec{\\mu} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix} , \\quad \\mathbf{\\Sigma} = \\begin{pmatrix} 1 &amp; 0 \\\\ 0 &amp; 10 \\end{pmatrix}\\] What are the means and variances of the individual components \\({\\bf x}_1\\) and \\({\\bf x}_2\\)? What is the covariance and correlation between \\({\\bf x}_1\\) and \\({\\bf x}_2\\)? Are \\({\\bf x}_1\\) and \\({\\bf x}_2\\) independent? Given a random vector \\(\\vec{x} = (x_1,x_2) \\sim t_{10}(\\vec{\\mu},{\\bf \\Sigma})\\) where: \\[\\vec{\\mu} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} , \\quad \\mathbf{\\Sigma} = \\begin{pmatrix} 4 &amp; 2 \\\\ 2 &amp; 3 \\end{pmatrix}\\] What are the means and variances of the individual components \\({\\bf x}_1\\) and \\({\\bf x}_2\\)? What is the covariance and correlation between \\({\\bf x}_1\\) and \\({\\bf x}_2\\)? Are \\({\\bf x}_1\\) and \\({\\bf x}_2\\) independent? 2.5.2 Calculus Let \\(f(\\vec{x}) = \\vec{x}^T {\\bf A}\\vec{x}\\) for a vector \\(\\vec{x}\\in \\mathbb{R}^d\\) and a matrix \\({\\bf A}\\in\\mathbb{R}^{d\\times d}\\) which is constant. Give expressions for \\(\\nabla f\\) and \\(\\mathcal{H} f\\) using only matrices and vectors (no summation notation is allowed). Let \\(\\vec{x}\\in\\mathbb{R}^m\\) and \\(\\vec{y}\\in\\mathbb{R}^n\\). Compute the gradient of \\(\\|\\vec{x}\\vec{y}^T\\|_F^2\\) with respect to \\(\\vec{x}\\). Consider the function \\[f(x_1,x_2,x_3) = 2x_1^2 + 3x_2^2 +4x_3^2 + 5x_1x_2+6x_1x_3+7x_2x_3 + 8x_1+9x_2+10x_3 + 11\\] Find the critical point(s) of \\(f\\). Hint: it may be helpful to express \\(f\\) in the form \\(f(\\vec{x})=\\vec{x}^T{\\bf A}\\vec{x} + \\vec{b}^T\\vec{x} + c\\) for some matrix \\({\\bf A}\\), vectors \\(\\vec{b},\\vec{x}=(x_1,x_2,x_3)^T\\in\\mathbb{R}^3\\) and scalar \\(c\\). Classify the critical point(s) found in part (a) as minima, maxima, or saddle points. Explain your reasoning. Verify that the mean and variance of the \\(\\mathcal{N}(\\vec{\\mu},{\\bf \\Sigma})\\) distribution are indeed \\(\\vec{\\mu},\\){}$ by computing the integrals directly. Verify that the mean and variance of the \\(t_\\nu(\\vec{\\mu},{\\bf \\Sigma}\\) distribution by computing the integrals directly. You may assume that \\(\\nu &gt; 2.\\) 2.5.3 Linear Algebra Given a matrix \\(\\mathbf{A} \\in \\mathbb{R}^{3 \\times 3}\\) and a vector \\(\\mathbf{x} \\in \\mathbb{R}^{3}\\), where: \\[ \\mathbf{A} = \\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{pmatrix} , \\quad \\mathbf{x} = \\begin{pmatrix} 1 \\\\ 0 \\\\ -1 \\end{pmatrix} \\] Compute the product \\(\\mathbf{A}\\mathbf{x}\\) using the column interpretation of matrix-vector multiplication. Compute the product \\(\\mathbf{A}\\mathbf{x}\\) using the row interpretation of matrix-vector multiplication. Given matrices \\(\\mathbf{A} \\in \\mathbb{R}^{2 \\times 3}\\) and \\(\\mathbf{B} \\in \\mathbb{R}^{3 \\times 2}\\), where: \\[ \\mathbf{A} = \\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{pmatrix} , \\quad \\mathbf{B} = \\begin{pmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\\\ 5 &amp; 6 \\end{pmatrix} \\] Compute the product \\(\\mathbf{C} = \\mathbf{A}\\mathbf{B}\\) using the dot product interpretation of matrix-matrix multiplication. Compute the product \\(\\mathbf{C} = \\mathbf{A}\\mathbf{B}\\) using the column interpretation of matrix-matrix multiplication. Compute the product \\(\\mathbf{C} = \\mathbf{A}\\mathbf{B}\\) using the row interpretation of matrix-matrix multiplication. Let \\({\\bf A}\\in \\mathbb{R}^{m\\times n}\\). Explain why \\({\\bf A A}^T\\) and \\({\\bf A}^T{\\bf A}\\) are diagonalizable and positive semi-definite. Give expressions for the singular vectors and singular values of \\({\\bf A}\\) in terms of the eigenvectors and eigenvalues of \\({\\bf A A}^T\\) and \\({\\bf A}^T{\\bf A}\\). 2.5.4 Hybrid Problems Consider the data matrix \\[{\\bf X} = \\begin{bmatrix} 2 &amp; 3 \\\\ 4 &amp; 5\\\\ 6&amp; 7 \\\\ 8 &amp; 9 \\end{bmatrix}.\\] Compute the sample mean of the data. Provide the centered data matrix. Compute the sample covariance matrix of \\({\\bf X}.\\) Consider a random vector \\(\\mathbf{X} \\sim \\mathcal{N}(\\mathbf{\\mu}, \\mathbf{\\Sigma})\\) where: \\[\\mathbf{\\mu} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix} , \\quad \\mathbf{\\Sigma} = \\begin{pmatrix} 1 &amp; 0.5 \\\\ 0.5 &amp; 1 \\end{pmatrix}.\\] Let \\(\\mathbf{Y} = \\mathbf{A}\\mathbf{X} + \\mathbf{b}\\) where: \\[ \\mathbf{A} = \\begin{pmatrix} 2 &amp; 1 \\\\ 1 &amp; 3 \\end{pmatrix} , \\quad \\mathbf{b} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} \\] What is the mean vector \\(\\mathbf{\\mu_Y}\\) of \\(\\mathbf{Y}\\)? What is the covariance matrix \\(\\mathbf{\\Sigma_Y}\\) of \\(\\mathbf{Y}\\)? Given a random vector \\(\\vec{x}\\) with mean \\(\\vec{\\mu}\\) and covariance matrix \\({\\bf \\Sigma} = E[(\\vec{x}-\\vec{\\mu})(\\vec{x}-\\vec{\\mu})^T\\,]\\) verify the identity \\({\\bf \\Sigma} = E[\\,\\vec{x}\\,\\vec{x}^T\\,] - \\vec{\\mu} \\,\\vec{\\mu}^T\\). Suppose \\(\\vec{x}\\in \\mathbb{R}^n\\) is a random vector with covariance \\({\\bf \\Sigma}\\in\\mathbb{R}^{n\\times n}\\), and let \\({\\bf A} \\in \\mathbb{R}^{m\\times n}\\) be a matrix with constant entries (non-random). Show that the covariance matrix of \\({\\bf A}\\vec{x}\\) is \\({\\bf A\\Sigma A}^T.\\) Show that the \\(N\\times N\\) centering matrix \\({\\bf H} = {\\bf I} - \\frac{1}{N}\\mathbb{1}\\mathbb{1}^T\\) is idempotent, i.e. \\({\\bf H}^2 = {\\bf H}.\\) Consider the data matrix \\[{\\bf X}=\\begin{bmatrix}\\vec{x}_1^T \\\\ \\vdots \\\\ \\vec{x}_N^T\\end{bmatrix}.\\] Show that \\[{\\bf HX} = \\begin{bmatrix} \\vec{x}_1^T -\\bar{x}^T \\\\ \\vdots \\\\ \\vec{x}_N^T - \\bar{x}^T\\end{bmatrix}\\] where \\({\\bf H}\\) is the centering matrix and \\(\\bar{x}\\) is the sample mean of vectors \\(\\vec{x}_1,\\dots, \\vec{x}_N.\\) For data \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) with sample mean \\[\\hat{\\mu}= \\frac{1}{N}\\sum_{i=1}^N \\vec{x}_i\\] and sample covariance \\[\\hat{\\bf \\Sigma} = \\frac{1}{N} (\\vec{x}_i-\\hat{\\mu})(\\vec{x}_i-\\hat{\\mu})^T\\] verify the following identities \\(\\hat{\\bf \\Sigma} = \\frac{1}{N}\\left(\\sum_{i=1}^N \\vec{x}_i\\vec{x}_i^T\\right) - \\hat{\\mu}\\hat{\\mu}^T.\\) \\(\\hat{\\bf \\Sigma} = {\\bf X}^T {\\bf H X}\\) where \\({\\bf X}\\) is the data matrix formed from vectors \\(\\vec{x}_1,\\dots,\\vec{x}_N\\). "],["central-goals-and-assumptions.html", "Chapter 3 Central goals and assumptions", " Chapter 3 Central goals and assumptions In the remainder of this text, we will largely focus on the case where we are given a dataset containing samples \\(\\vec{x}_1,\\dots,\\vec{x}_N \\in \\mathbb{R}^d\\). We will assume that the vectors were drawn independently from some unknown data generating process. As we discussed briefly in Chapter 1, in UL we want to learn important relationships within the dataset that can provide a simplified but meaningful summary of the data. The central assumption to UL is that such structure exists, though the specifics vary depending on the setting. The two largest areas of focus herein are dimension reduction/manifold learning and clustering which can both be used for feature engineering, data compression, and exploratory data analysis. Dimension reduction is also commonly used for visualization. We’ll briefly discuss association rules in Section 4.2. "],["dimension-reduction-and-manifold-learning.html", "3.1 Dimension reduction and manifold learning", " 3.1 Dimension reduction and manifold learning Algorithms for dimension reduction and manifold learning have a number of different applications which are all based on the Manifold Hypothesis Hypothesis 3.1 (Manifold Hypothesis) The points in a high-dimensional dataset live on a latent low-dimension surface (also called a manifold). The manifold hypothesis implies that the dataset can be described by a much smaller number of dimensions. Determining the manifold structure and a simplified set of coordinates for each point on the manifold is the central goal of these algorithms. "],["clustering.html", "3.2 Clustering", " 3.2 Clustering Hypothesis 3.2 (Clustering Hypothesis) The points in a dataset can be grouped into well defined subsets. Points in each subset are similar and points in different subsets are not. The cluster hypothesis suggests there are non-overlapping regions. Within each region there are (many) similar points, and there are no points whose are comparably similar to those in more than one subset. "],["generating-synthetic-data.html", "3.3 Generating synthetic data", " 3.3 Generating synthetic data 3.3.1 Data on manifolds At the beginning of this chapter, we indicated that our data are drawn from some unknown distribution. This is a practical assumption, but in many cases, it is also helpful to consider examples where we generate the data ourselves. In doing so, we can create whatever complicated structure we would like such as different clustering arrangements or lower dimensional structure. We can test an Unsupervised Learning algorithm of interest on these synthetically generated data to see if important relationships or properties are accurately preserved. This is a helpful method for evaluating how well an algorithm works in a specific case, and importantly, can be used to build intuition on a number of natural complexities such as appropriately choosing tuning parameters, evaluating the effects of noise, and seeing how these algorithms may break when certain assumptions are not met. First, let us consider the case of generating data with a known lower dimensional structure which will be valuable when testing a dimension reduction or manifold learning algorithm. We’ll begin with data on a hyperplane. Later in Chapter 4, we consider data on a hyperplane with additional constraints which can be generated by small changes to the method discussed below. Example 3.1 (Generating data on a hyperplane) Suppose we want to generate a set of \\(d\\)-dimensional data which is on a \\(k&lt;d\\) dimensional hyperplane. The span of \\(k\\) linearly independent vectors \\(\\vec{z}_1,\\dots,\\vec{z}_k \\in \\mathbb{R}^d\\) defines a \\(k\\) dimensional hyperplane. If we then generated random coefficient \\(c_1,\\dots,c_k\\), then the vector \\[\\vec{x} = c_{1}\\vec{z}_1+\\dots +c_{k}\\vec{z}_k\\] would be an element on this hyperplane. To generate a data set we could then Specify \\(\\vec{z}_1,\\dots,\\vec{z}_k\\) or generate them randomly Draw random coefficients \\(c_1,\\dots,c_k\\) and compute the random sample \\(\\vec{x}=c_{1}\\vec{z}_1+\\dots +c_{k}\\vec{z}_k\\). Repeat step 2, \\(N\\) times to generate the \\(N\\) samples. In Figure 3.1, we show an example of data generated to reside on a random plane in \\(\\mathbb{R}^3\\). We first generate \\(\\vec{z}_1,\\dots,\\vec{z}_k\\) randomly by drawing each vector from a \\(\\mathcal{N}(\\vec{0},{\\bf I})\\) distribution. These vectors will be independent with probability 1. When then take coefficients \\(c_1,\\dots,c_k\\) which are iid \\(N(0,1)\\). set.seed(185) N &lt;- 100 # basis zs &lt;- mvrnorm(n=2, mu = rep(0,3), Sigma = diag(1,3)) #coeffs coeffs &lt;- matrix(rnorm(2*N),ncol = 2) # generate data matrix samples &lt;- coeffs %*% zs # plot results scatterplot3js(samples, xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3]), angle = 90, pch = &#39;.&#39;, size = 0.2) Figure 3.1: Randomly generated points concentrated on a two-dimensional hyperplane. Generating data on a curved surface is generally more complicated. In some cases, the curved surface is defined implicitly via a constraint such as the unit sphere in \\(d\\)-dimensions \\[S^{d-1} = \\{\\vec{x}\\in\\mathbb{R}^d: \\|\\vec{x}\\| = 1\\}.\\] Generating data on the unit sphere can then be accomplished by drawing a vector from any distribution on \\(\\mathbb{R}^d\\) then rescaling the vector to have unit length. Different choices of the original distribution will result in different distributions over the unit sphere. Alternatively, we could consider a function which parameterizes a curve or surface. We show one such example below. Example 3.2 (Generating data on a Ribbon) The function \\[R(s) = (\\cos(2\\pi s),\\sin(2\\pi s),2s)^T\\] maps the interval \\((0,5)\\) to a helix in \\(\\mathbb{R}^3.\\) For a given choice of \\(s\\), if we let the third coordinate vary from \\(2s\\) to \\(2s+1\\) we would then trace out a ribbon in \\(\\mathbb{R}^3.\\) To do this, let’s add a second coordinate \\(t\\) which ranges from 0 to 1. We then have function \\(R(s,t) = (\\cos(2\\pi s),\\sin(2\\pi s), 2s+t)\\) which maps the rectangle \\((0,5)\\times (0,2)\\) to a curved ribbon shape in \\(\\mathbb{R}^3.\\) To generate data on the ribbon, we draw iid points uniformly from \\((0,5)\\times (0,1)\\) then apply the ribbon function. The results for \\(N=1000\\) samples are shown below. N &lt;- 1e4 s &lt;- runif(N,0,5) t &lt;- runif(N,0,1) ribbon &lt;- cbind(cos(2*pi*s),sin(2*pi*s),2*s+t ) scatterplot3js(ribbon, xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3]), angle = 90, pch = &#39;.&#39;, size = 0.1) Figure 3.2: Realizations of points on a ribbon In both the surface is two-dimensional (if you were stand on the surface and look nearby data points, they would appear to be planar. A dimension reduction would be able to recover this two-dimensional structure which in the case of the plane corresponds to find the coefficients used to generate each point. For the ribbons, the coordinates \\((s,t)\\) used in the ribbon mapping would provide the simplified representation. The previous examples have shown data in \\(\\mathbb{R}^3\\). While this is helpful of visualization, it is not representative of many modern data sources where the dimensionality is extremely high! Suppose we want to generate data in \\(\\mathbb{R}^d\\) for some specific large \\(d\\) which has a simpler representation in \\(\\mathbb{R}^t\\) (with \\(t\\ll d\\)) that we know. In general we can do this through a mapping, \\(f:\\mathbb{R}^t \\to \\mathbb{R}^d\\). (More on this idea in (ch-nonlinear) later). First generate synthetic data \\(\\vec{x}_1&#39;,\\dots,\\vec{x}_N&#39;\\) then apply the map to create high dimensional observations \\[\\vec{x}_i = f(\\vec{x}_i&#39;), \\qquad i=1,\\dots,N.\\] There are infinite possibilities for \\(f\\), but for now, we will focus on affine mappings. For a matrix \\({\\bf A}\\in\\mathbb{R}^{d\\times t}\\) and vector \\(\\vec{b}\\in\\mathbb{R}^d\\), the affine function \\[ f(\\vec{x}&#39;) = {\\bf A}\\vec{x}&#39; + \\vec{b}\\] maps vectors in \\(\\mathbb{R}^t\\) to points in \\(\\mathbb{R}^d.\\) Properties of this mapping with depend on the columns of \\({\\bf A}\\). For example, if the columns are orthonormal, then Euclidean distances between corresponding pairs of vectors will be the same in the low and high dimensional spaces. Example 3.3 (Mapping unit sphere in $\\mathbb{R}^3$ to higher dimensions) We begin be drawing sample from \\(\\mathcal{N}(\\vec{0},{\\bf I}_3)\\) then rescaling each vector to have length 1. N &lt;- 500 X &lt;- mvrnorm(n=N, mu = rep(0,3), Sigma = diag(1,3)) for (i in 1:N){ X[i,] &lt;- X[i,]/sqrt(sum(X[i,]^2)) } scatterplot3js(X, xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3]), angle = 90, pch = &#39;.&#39;, size = 0.1) Below, we apply the affine mapping when the columns of \\({\\bf A}\\) are orthonormal and \\(\\vec{b}= \\vec{0}\\) and show a few samples. U &lt;- svd(matrix(rnorm(10*10),nrow = 10))$u[,1:3] X &lt;- X %*% t(U) head(round(X,3)) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 0.279 0.678 -0.181 0.252 -0.225 0.173 -0.143 -0.348 -0.284 0.252 ## [2,] -0.255 -0.686 0.100 -0.236 0.197 -0.291 0.148 0.318 0.260 -0.292 ## [3,] 0.084 0.771 0.043 0.216 -0.415 0.002 -0.124 0.239 -0.243 0.215 ## [4,] 0.163 -0.389 -0.500 0.007 0.110 -0.495 0.065 -0.488 -0.033 -0.269 ## [5,] 0.254 0.637 -0.321 0.268 -0.365 -0.255 -0.111 -0.186 -0.317 0.097 ## [6,] 0.223 0.618 -0.319 0.260 -0.399 -0.347 -0.099 -0.094 -0.310 0.060 In the above example, we generated a random orthonormal matrix by applying the SVD to a random \\(10\\times 10\\) matrix with \\(\\mathcal{N}(0,1)\\) entries. I could continue applying additional tranformations (shifts and expansions/contractions along different directions), but we will stop for now with the following important observations. Here is a dataset which has structure we know, 2-dimensional data on a curved surface (the sphere), but we cannot determine this but looking at the data matrix or generating scatterplots of any subset of columns. An effective way of generating data with known but hidden structure which is great to testing algorithms (and students). 3.3.2 Clustered data The most straightforward way to generate clustered data is to combine realizations from separate data generating mechanisms that tend to create points in disjoint regions of \\(\\mathbb{R}^d\\). In Figure 3.3, we show two different cases in \\(\\mathbb{R}^2\\). Figure 3.3: In each subfigure below, different subsets of points were generated using different rules and are colored accordingly . Ideally, a clustering algorithm could detect the different cluster shapes (left: ellipsoids, right: concentric rings) and correctly group points depending on how they were generated. If one did not have access to the actual data generating process (depicted by the different colors), it is still likely that they could recover the correct groupings upon visual inspection. In general, this strategy is not tractable. Naturally, we would like an Unsupervised clustering algorithm that can learn these clusters directly from the data automatically. As we shall see in Chapter 7, certain algorithms will excel at grouping the data contained in disjoint ellipsoids will naturally struggle data clustering in concentric rings because the shape(s) of the different clusters matters has a major impact of the accuracy of the clustering. In both examples above a two step sampling procedure was used to generate the observations in different clusters. First, a latent cluster label was generated. Then based on that label, an associated data point was created. Below we show an example which generates data in one of two spirals. For sample \\(i\\), we first draw \\(z_i\\sim Ber(1/2)\\). Then if \\(z_i=0\\), we randomly generate \\(x_i\\) in the first spiral, otherwise we generate \\(x_i\\) in the second. Example 3.4 (Intertwined spirals) # define functions for different spirals spiral1 &lt;- function(u){c(u*cos(3*u),u*sin(3*u))} spiral2 &lt;- function(u){c(u*cos(3*(u+pi)),u*sin(3*(u+pi)))} # sample latent cluster assignments z &lt;- sample(c(0,1),size = 1e3,prob = c(1/2,1/2),replace = T) # generate spirals based on labels X &lt;- matrix(NA,nrow = N,ncol = 2) for (i in 1:N){ if (z[i]==0) X[i,] &lt;- spiral1(runif(1,0.5,3)) else X[i,] &lt;- spiral2(runif(1,0.5,3)) } #plot plot(X, col = c(&quot;blue&quot;,&quot;red&quot;)[z+1], xlab =expression(x[1]),ylab =expression(x[2])) "],["exercises-1.html", "3.4 Exercises", " 3.4 Exercises Generate data on a helix in \\(\\mathbb{R}^3\\). Generate data on a 7 dimensional hyperplane in \\(\\mathbb{R}^{50}\\). No columns of the associated data matrix should contain all zeros. Generate 2 well separated spherical clusters in \\(\\mathbb{R}^3\\). What is the Euclidean distance between the two closest points in different clusters? Repeat problem 4 for \\(\\mathbb{R}^{10}\\) and \\(\\mathbb{R}^{100}\\). What changes did you have to make to keep the clusters well separated (at least as far apart as problem 3)? "],["ch-linear.html", "Chapter 4 Linear Methods", " Chapter 4 Linear Methods "],["sec-pca.html", "4.1 Principal Component Analysis", " 4.1 Principal Component Analysis Principal component analysis (PCA) is arguably the first method for dimension reduction, which dates back to papers by some of the earliest contributors to statistical theory including Karl Pearson and Harold Hotelling [6, 7]. Pearson’s original development of PCA borrowed ideas from mechanics which provides a clear geometric/physical interpretation of the resulting PCA loadings, variances, and scores, which we will define later. This interpretability and an implementation that uses scalable linear algebra methods – allowing PCA to be conducted on massive datasets – is one of the reasons PCA is still used prolifically to this day. In fact, many more modern and complex methods still rely on PCA as an internal step in their algorithmic structure. There are number of different but equivalent derivations of PCA including the minimization of least squares error, covariance decompositions, and low rank approximations. We’ll revisit these ideas later, but first, let’s discuss PCA through a geometrically motivated lens via a method called iterative projections. 4.1.1 Derivation using Iterative Projections We begin with a data matrix \\[{\\bf X} = \\begin{bmatrix} \\vec{x}_1^T\\\\ \\vdots \\\\\\vec{x}_N^T\\end{bmatrix} \\in\\mathbb{R}^{N\\times d}.\\] Let’s begin with an example of dimension reduction where we’ll seek to replace each vector \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) with corresponding scalars \\(y_1,\\dots,y_N\\) which preserve as much of the variability between these vectors as possible. To formalize this idea, let’s introduce a few assumptions. First, we’ll assume the data \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) are centered. To be fair, assumption may be too strong a word. Rather, it’s a first step in preprocessing that will simplify the analysis later. We’ll discuss how to account for this centering step later, but for now assume \\(\\bar{x} = \\vec{0}\\) so that \\({\\bf HX} = {\\bf X}\\). More importantly, let’s assume that each \\(y_i\\) is constructed in the same way. Specifically, let \\(y_i = \\vec{x}_i^T \\vec{w}\\) for some common vector \\(\\vec{w}\\). Thus, we can view each one-dimensional representation as a dot product of the corresponding observed vector with the same vector \\(\\vec{w}.\\) We can compactly write this expression as \\[\\vec{y} = \\begin{bmatrix}y_1\\\\ \\vdots \\\\ y_n \\end{bmatrix}=\\begin{bmatrix}\\vec{x}_1^T \\vec{w} \\\\ \\vdots \\\\ \\vec{x}_N^T \\vec{w}\\end{bmatrix} = {\\bf X} \\vec{w}.\\] How do we choose \\(\\vec{w}\\)? We would like differences in the scalars \\(y_1,\\dots,y_N\\) to reflect differences in the vectors \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) so having \\(y_1,\\dots,y_N\\) spread out is a natural goal. Thus, if \\(\\vec{x}_i\\) and \\(\\vec{x}_j\\) are far apart then so will \\(y_i\\) and \\(y_j\\). To do this, we’ll try to maximize the sample variance of the \\(y\\)’s. The sample variance \\[\\frac{1}{N} \\sum_{i=1}^N (y_i - \\bar{y})^2 = \\frac{1}{N}\\sum_{i=1}^N(\\vec{x}_i^T \\vec{w} - \\bar{y})^2\\] will depend on our choice of \\(\\vec{w}\\). In the previous expression, \\[\\bar{y} = \\frac{1}{N} y_i = \\frac{1}{N}\\sum_{i=1}^N \\vec{x}_i^T \\vec{w} = \\frac{1}{N}\\vec{1}^T{\\bf X}\\vec{w}\\] is the sample mean of \\(y_1,\\dots,y_N.\\) Importantly, since we have assumed that \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) are centered, it follows that \\(\\bar{y}=0\\) and the sample variance of \\(y_1,\\dots,y_N\\) simplifies to \\[\\frac{1}{N}\\sum_{i=1}^N(\\vec{x}_i^T \\vec{w})^2 = \\frac{1}{N}\\sum_{i=1}^N y_i^2 = \\frac{1}{N} \\|y\\|^2 = \\frac{1}{N}\\vec{y}^T\\vec{y}.\\] We can write the above in terms of \\({\\bf X}\\) and \\(\\vec{w}\\). Using the identity \\(\\vec{y} = {\\bf X}\\vec{w}\\), we want to choose \\(\\vec{w}\\) to maximize \\[\\frac{1}{N}\\vec{y}^T\\vec{y} = \\frac{1}{N}({\\bf X}\\vec{w})^T{\\bf X}\\vec{w} = \\frac{1}{N}\\vec{w}^T{\\bf X}^T{\\bf X}\\vec{w} = \\vec{w}^T\\left(\\frac{{\\bf X}^T{\\bf X}}{N}\\right)\\vec{w}.\\] Since we have assumed that \\({\\bf X}\\) is centered it follows that \\({\\bf X}^T{\\bf X}/N\\) is the sample covariance matrix \\(\\hat{\\bf \\Sigma}\\)! Thus, we want to make \\(\\vec{w}^T\\hat{\\bf \\Sigma} \\vec{w}\\) as large as possible. Naturally, we could increase the entries in \\(\\vec{w}\\) and increase the above expression without bound. To make the maximization problem well posed, we will restrict \\(\\vec{w}\\) to be unit-length under the Euclidean norm so that \\(\\|\\vec{w}\\|=1.\\) We now have a constrained optimization problem which gives rise to the first principal component loading. Definition 4.1 (First PCA Loading and Scores) The first principal component loading is the vector \\(\\vec{w}_1\\) solving the constrained optimization problem \\[\\begin{equation} \\begin{split} \\text{Maximize } &amp;\\vec{w}^T \\hat{\\bf \\Sigma}\\vec{w} \\\\ \\text{subject to constraint } &amp;\\|\\vec{w}\\|=1. \\end{split} \\end{equation}\\] The first principal component scores are the projections, \\(y_i = \\vec{x}_i^T\\vec{w}_1\\) for \\(i=1,\\dots, N\\), of each sample onto the first loading. To find the first PCA loading we can make use of Lagrange multipliers (see exercises) to show that \\(\\vec{w}_1\\) must also satisfy the equation \\[\\hat{\\bf \\Sigma}\\vec{w}_1 = \\lambda \\vec{w}_1\\] where \\(\\lambda\\) is the Lagrange multiplier. From this expression, we can conclude that the first principal component loading is the unit length eigenvector associated with the largest eigenvalue of the sample covariance matrix \\(\\hat{\\bf \\Sigma}\\) and that the Lagrange multiplier \\(\\lambda\\) is the largest eigenvalue of \\(\\hat{\\bf \\Sigma}\\). In this case, we refer to \\(\\lambda\\) as the first principal component variance. 4.1.1.1 Geometric Interpretation of \\(\\vec{w}_1\\) Since \\(\\|\\vec{w}_1\\| = 1\\) we may interpret this vector as specifying a direction in \\(\\mathbb{R}^d\\). Additionally, we can decompose each of our samples into two pieces: one pointing in the direction specified by \\(\\vec{w}_1\\) and a second portion perpendicular to this direction. Thus, we may write \\[\\vec{x}_i = \\underbrace{\\vec{w}_1 \\vec{x}_i^T\\vec{w}_1}_{parallel} + \\underbrace{(\\vec{x}_i -\\vec{w}_1 \\vec{x}_i^T\\vec{w}_1)}_{perpendicular}.\\] By the Pythagorean theorem, \\[\\begin{align*} \\|\\vec{x}_i\\|^2 &amp;= \\| \\vec{w}_1 \\vec{x}_i^T\\vec{w}_1 \\|^2 + \\|\\vec{x}_i -\\vec{w}_1 \\vec{x}_i^T\\vec{w}_1\\|^2 \\\\ &amp;= (\\vec{w}_1^T\\vec{x}_i)^2 + \\|\\vec{x}_i -\\vec{w}_1 \\vec{x}_i^T\\vec{w}_1\\|^2 \\\\ &amp;= y_i^2 + \\|\\vec{x}_i -\\vec{w}_1 \\vec{x}_i^T\\vec{w}_1\\|^2 \\end{align*}\\] for \\(i=1,\\dots,N\\). Averaging over all of samples gives the expression \\[\\frac{1}{N}\\sum_{i=1}^N\\|\\vec{x}_i\\|^2 = \\frac{1}{N}\\sum_{i=1}^N y_i^2 +\\frac{1}{N}\\sum_{i=1}^N \\|\\vec{x}_i -\\vec{w}_1 \\vec{x}_i^T\\vec{w}_1\\|^2.\\] The left-hand side of the above expression is fixed for a given set of data, whereas the first term on the right side is exactly what we sought to maximize when finding the first principal component loading. This quantity is the average squared length of the projection of each sample onto the direction \\(\\vec{w}_1\\). As such, we can view the first principal component loading as the direction in which \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) most greatly varies. Let’s turn to an example in \\(\\mathbb{R}^3\\) to view this. Example 4.1 (Computing the First PCA Loading and Scores) Below, we show a scatterplot of \\(N=500\\) points in \\(\\mathbb{R}^3\\) drawn randomly from a MVN. These data have been centered. Notice the oblong shape of the cloud of points. Rotating this image, it is clear that the data varies more in certain directions than in others. The sample covariance matrix of these data is \\[ \\hat{\\Sigma} = \\begin{bmatrix} 11.83&amp;6.78&amp;3.38 \\\\ 6.78&amp;8.88&amp;9.2 \\\\ 3.38&amp;9.2&amp;15.9 \\\\ \\end{bmatrix} \\] We can use the eigendecomposition of this matrix to find the first PCA loading and variance. Given the first loading we can also compute the first PCA scores. A short snippet of code for this calculation is shown below. Sigmahat &lt;- (t(data) %*% data)/N # calculate the sample covariance matrix, recall the data has been centered Sigmahat.eigen &lt;- eigen(Sigmahat) # calculate the eigen decomposition of Sigmahat y &lt;- data %*% Sigmahat.eigen$vectors[,1] # calculate the scores The largest eigenvalue (first PC variance) is \\(\\lambda = 25.58\\) with associated eigenvector \\((0.45, 0.56, 0.69)^T\\) which is the first PC loading. We can visualize these results in a few different ways. First, we can add the span of \\(\\vec{w}_1\\) (shown in red) to the scatterplot of the data. One can see that \\(\\vec{w}_1\\) is oriented along the direction where the data is most spread out. Figure 4.1: Samples with Span of First Loading We could also generate a scatterplot of the scores, but we’ll show these scores along the \\(\\vec{w}_1\\) axes so that they correspond to the projection of each sample onto span\\(\\{\\vec{w}_1\\}\\); equivalently, we are plotting the vectors \\(y_i \\vec{w}_i\\). Figure 4.2: Decomposition of Samples into Components Parallel and Perpendicular to First Loading 4.1.1.2 Additional Principal Components The first PCA loading provides information about the direction in which are data most greatly vary, but it is quite possible that there are still other directions wherein our data still exhibits a lot of variability. In fact, the notion of a first principal component loading, scores, and variance suggests the existence of a second, third, etc. iteration of these quantities. To explore these quantities, let’s proceed as follows For each datum, we can remove its component in the direction of \\(\\vec{w}_1\\), and focus on the projection onto the orthogonal complement of \\(\\vec{w}_1\\). Let \\[\\vec{x}_i^{(1)} = \\vec{x}_i - \\vec{w}_1\\vec{x}_i^T\\vec{w}_1 = \\vec{x}_i - \\vec{w}_1 y_i\\] denote the portion of \\(\\vec{x}_i\\) which is orthogonal to \\(\\vec{w}_1\\). These points are shown on the right side of Fig @{fig:pca1}. Here, the superscript \\(^{(1)}\\) indicates we have removed the portion of each vector in the direction of the first loading. We can organize the orthogonal components into a new data matrix \\[{\\bf X}^{(1)} = \\begin{bmatrix} \\left(\\vec{x}_1^{(1)}\\right)^T \\\\ \\vdots \\\\ \\left(\\vec{x}_N^{(1)}\\right)^T \\end{bmatrix} = \\begin{bmatrix} \\vec{x}_1^T - \\vec{x}_1^T\\vec{w}_1\\vec{w}_1^T \\\\ \\vdots \\\\ \\vec{x}_N^T - \\vec{x}_N^T\\vec{w}_1\\vec{w}_1^T \\end{bmatrix} = {\\bf X} - {\\bf X}\\vec{w}_1\\vec{w}_1^T.\\] Now let’s apply PCA to the updated data matrix \\({\\bf X}^{(1)}\\) from which we get the second principal component loading, denoted \\(\\vec{w}_2\\), the second principal component scores, and the second principal component variance. One can show that the data matrix \\({\\bf X}^{(1)}\\) is centered so that its sample covariance matrix is \\[\\begin{equation} \\hat{\\bf \\Sigma}^{(1)} = \\frac{1}{N}({\\bf X}^{(1)})^T{\\bf X}^{(1)}. \\end{equation}\\] The 2nd PC variance is the largest eigenvalue of \\(\\hat{\\bf \\Sigma}^{(1)}\\) and its associated unit length eigenvector is the 2nd PC loading, denoted \\(\\vec{w}_2\\). The second PC scores \\(\\vec{w}_2^T\\vec{x}_i^{(1)}\\) for \\(i=1,\\dots,N.\\) Continuing ??, we have \\[ \\hat{\\bf \\Sigma}^{(1)} = \\begin{bmatrix} 6.68&amp;0.3&amp;-4.57 \\\\ 0.3&amp;0.74&amp;-0.8 \\\\ -4.57&amp;-0.8&amp;3.61 \\\\ \\end{bmatrix} \\] which has largest eigenvalue 10.02 (2nd PC variance) and associated eigenvector \\(\\vec{w}_2 = (0.81, 0.08, -0.59)^T\\) (2nd PC Loading). The second set of PC scores are given by \\(\\vec{w}_2^T\\vec{x}_i^{(1)}\\) for \\(i=1,\\dots, N.\\) Here is one crucial observation. The vector \\(\\vec{w}_2\\) gives the direction of greatest variability of the vectors \\(\\vec{x}_1^{(1)},\\dots,\\vec{x}_N^{(1)}.\\) For each of these vectors we have removed the component in the direction of \\(\\vec{w}_1\\). Thus, \\(\\vec{x}_1^{(1)},\\dots,\\vec{x}_N^{(1)}\\) do not vary at all in the \\(\\vec{w}_1\\) direction. What can we say about \\(\\vec{w}_2\\)? Naturally, it must be perpendicular to \\(\\vec{w}_1\\)! We can see this geometric relationship if we plot the vectors \\(\\vec{x}^{(1)}_i\\) in our previous example along with the span of the first and second loading. Figure 4.3: First and 2nd Loadings with Data after $ ec{w}_1$ component removed We need not stop at the second PCA loading, scores, and variance. We could remove components in the direction of \\(\\vec{w}_2\\) and apply PCA to the vectors \\[\\begin{align*} \\vec{x}_i^{(2)} &amp;= \\vec{x}_i^{(1)} - \\vec{w}_2 (\\vec{x}_i^{(1)})^T\\vec{w}_2\\\\ &amp;= \\vec{x}_i - \\vec{w}_1\\vec{x}_i^T\\vec{w}_1 - \\vec{w}_2(\\vec{x}_i - \\vec{w}_1\\vec{x}_i^T\\vec{w}_1)^T\\vec{w}_2\\\\ &amp;= \\vec{x}_i - \\vec{w}_1\\vec{x}_i^T\\vec{w}_1 - \\vec{w}_2\\vec{x}_i^T\\vec{w}_2 + \\vec{w}_2\\vec{w_1}^T\\vec{x}_i\\underbrace{\\vec{w}_1^T\\vec{w}_2}_{=0} \\end{align*}\\] which gives rise to the centered data matrix \\[\\begin{equation} {\\bf X}^{(2)} = \\begin{bmatrix} \\vec{x}_1^T- \\vec{w}_1^T\\vec{x}_1\\vec{w}_1^T - \\vec{w}_2^T\\vec{x}_1\\vec{w}_2^T \\\\ \\vdots \\\\ \\vec{x}_d^T- \\vec{w}_1^T\\vec{x}_d\\vec{w}_1^T - \\vec{w}_2^T\\vec{x}_d\\vec{w}_2^T \\end{bmatrix} = {\\bf X} - {\\bf X}\\vec{w}_1\\vec{w}_1^T - {\\bf X}\\vec{w}_2\\vec{w}_2^T \\end{equation}\\] with corresponding covariance matrix \\[\\hat{\\Sigma}^{(2)} = \\frac{1}{N}({\\bf X}^{(2)})^T{\\bf X}^{(2)}\\] from which we can obtain a third loading (\\(\\vec{w}_3\\)), variance (\\(\\lambda_3)\\), and set of scores \\(\\vec{w}_3\\vec{x}_i^{(2)}\\) for \\(i=1,\\dots,N\\). We can continue repeating this argument \\(d\\) times for our \\(d\\)-dimensional data until we arrive at a set of \\(d\\) unit vectors \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) which are the \\(d\\) PCA loadings. Why do we stop after \\(d\\)? The principal component loadings \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) are all mutually orthogonal and unit length so they form an orthonormal basis for \\(\\mathbb{R}^d\\). All of the variability in each sample can be expressed in terms of these \\(d\\) basis vectors. This iterative approach is admittedly, to intensive for most practical applications. Fortunately, we do not need to follow the sequence of projections and then eigenvalue computations thanks to the following theorem. Theorem 4.1 Suppose \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) are the orthonormal eigenvectors of the sample covariance \\(\\hat{\\Sigma}=\\frac{1}{N}{\\bf X}^T{\\bf X}\\) with eigenvalues \\(\\lambda_1\\ge \\dots\\ge \\lambda_d \\ge 0\\) respectively, i.e. \\(\\hat{\\Sigma}\\vec{w}_j = \\lambda_j\\vec{w}_j\\). Then \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) are also eigenvectors or the matrix \\(\\hat{\\Sigma}^{(1)}=\\frac{1}{N}({\\bf X}^{(1)})^T{\\bf X}^{(1)}\\) with eigenvalues \\(0,\\lambda_2,\\dots,\\lambda_d\\) respectively. This result follows nicely from the geometric observation that the loadings are mutually orthogonal. The second loading is then the eigenvector associated with the second largest eigenvalue of the original covariance matrix. Taking the orthogonality of the loadings further, we can get even more from the following corollary. Corollary 4.1 Suppose \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) are the orthonormal eigenvectors of the sample covariance \\(\\hat{\\Sigma}=\\frac{1}{N}{\\bf X}^T{\\bf X}\\) with eigenvalues \\(\\lambda_1\\ge \\dots\\ge \\lambda_d \\ge 0\\) respectively. Then for \\(k=2,\\dots,d-1\\), the vectors\\(\\vec{w}_1,\\dots,\\vec{w}_d\\) are also eigenvectors of the matrix \\(\\hat{\\Sigma}^{(k)}=\\frac{1}{N}({\\bf X}^{(k)})^T{\\bf X}^{(k)}\\) with eigenvalues \\(\\underbrace{0,\\dots,0}_k,\\lambda_{k+1},\\dots,\\lambda_d\\) respectively. As a result, we can immediately compute the PCA variances and loadings given the full spectral (eigenvalue) decomposition \\[\\begin{equation} \\hat{\\Sigma} = \\begin{bmatrix} \\vec{w}_1 &amp; | &amp; \\dots &amp; | &amp;\\vec{w}_d \\end{bmatrix} \\begin{bmatrix} \\lambda_1 &amp;0 &amp; 0 \\\\ 0 &amp;\\ddots &amp; 0 \\\\ 0 &amp; 0 &amp;\\lambda_d \\end{bmatrix} \\begin{bmatrix} \\vec{w}_1^T \\\\ \\vdots \\\\\\vec{w}_d^T \\end{bmatrix}. \\end{equation}\\] Again, thanks to orthogonality, we can also compute the PCA scores directly from the original data without iteratively removing components of each vector in the direction of the various loadings. To summarize PCA, given data \\({\\bf X}\\) we first compute the spectral decomposition of the sample covariance matrix \\(\\hat{\\bf \\Sigma}\\). The eigenvalues (in decreasing magnitude) provide the PC variance and the corresponding unit-length eigenvectors give the corresponding loadings, which form an orthonormal basis in \\(\\mathbb{R}^d\\). The PC scores are the inner product of each vector with these loadings (assuming the data are centered). Thus, the PCA scores are \\(\\vec{x}_i^T\\vec{w}_1,\\dots,\\vec{x}_i^T\\vec{w}_d\\) for \\(i=1,\\dots,d.\\) We can compactly (again assuming our data are centered) express the scores in terms of the original data matrix and the loadings as \\[\\begin{equation} {\\bf Y} = {\\bf XW} \\end{equation}\\] where \\({\\bf Y}\\in \\mathbb{R}^{N\\times d}\\) is a matrix of PC scores and \\({\\bf W}\\) is the orthonormal matrix with columns given by the loadings. 4.1.1.3 Geometric interpretation of PCA &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD We began with an \\(N\\times d\\) data matrix \\({\\bf X}\\) and now we have an \\(N\\times d\\) matrix of PCA scores \\({\\bf Y}\\). One may be inclined to ask: where is the dimension reduction? To answer this question, let’s revisit some important features of the scores and loadings. First, since the loadings \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) are orthonormal vectors in \\(\\mathbb{R}^d\\), they naturally form a basis! The PCA scores are then the coordinates of our data in the basis \\(\\{\\vec{w}_1,\\dots,\\vec{w}_d\\}\\). Specifically, \\({\\bf Y}_{ij}\\) for \\(j=1,\\dots,d\\) are the coordinates for (centered) vector \\(\\vec{x}_i\\) since \\[\\vec{x}_i = {\\bf Y}_{i1}\\vec{w}_1+\\cdots+ {\\bf Y}_{id}\\vec{w}_d.\\] The dimension reduction comes in from an important observations about the PCA scores (aka coordinate). Consider the sample covariance matrix of the PCA scores, which one can show is diagonal (see exercises) \\[\\begin{equation} \\hat{\\bf \\Sigma}_Y = \\begin{bmatrix} \\lambda_1 &amp; &amp; \\\\ &amp;\\ddots &amp; \\\\ &amp;&amp; \\lambda_d \\end{bmatrix} \\end{equation}\\] There are two important perspectives on the using PCA scores. First, the diagonality of the PCA scores indicates that in the new basis, \\(\\{\\vec{w}_1,\\dots,\\vec{w}_d\\}\\), the coordinates are i) uncorrelated and ii) ordered in decreasing variance. As a result, if we want to construct a \\(k &lt; d\\) dimensional representation our data that minimizes the loss in variability, we should use the first \\(k\\) PCA scores. Secondly, we can use the first \\(k\\) scores to build approximations, \\[\\vec{x}_i \\approx \\hat{x}_i = {\\bf Y}_{i1}\\vec{w}_1+\\cdots + {\\bf Y}_{ik} \\vec{w}_k, \\qquad i=1,\\dots, N.\\] How good is this approximation? Optimal, in a squared loss sense, thanks to the following theorem. Theorem 4.2 Fix \\(k&lt;d.\\) Given any \\(k\\)-dimensional linear subspace of \\(\\mathbb{R}^d\\), denoted \\(\\mathcal{V}\\), let \\(\\text{proj}_\\mathcal{V}(\\vec{x})\\) denote the orthogonal projection of \\(\\vec{x}\\) onto , then \\[\\frac{1}{N}\\sum_{i=1}^N \\|\\vec{x}_i - \\text{proj}_\\mathcal{V}(\\vec{x}_i)\\|^2 \\ge \\lambda_{k+1}+\\cdots+\\lambda_d\\] where \\(\\lambda_{k+1},\\cdots,\\lambda_d\\) are the last \\((d-k)\\) principal component variances of \\(\\vec{x}_1,\\dots,\\vec{x}_N\\). Furthermore, if \\(\\lambda_k &gt; \\lambda_{k+1}\\), then \\(\\text{span}\\{\\vec{w}_1,\\dots,\\vec{w}_k\\}\\) is the unique \\(k\\)-dimensional linear subspace for which \\[\\frac{1}{N}\\sum_{i=1}^N \\|\\vec{x}_i - \\text{proj}_\\mathcal{V}(\\vec{x}_i)\\|^2 = \\lambda_{k+1}+\\cdots+\\lambda_d.\\] A few notes on the above theorem to add some clarity. First, note that \\[\\hat{x}_i = {\\bf Y}_{i1}\\vec{w}_1+\\cdots + {\\bf Y}_{ik} \\vec{w}_k\\] is the orthogonal projection of \\(\\vec{x}_i\\) onto \\(\\text{span}\\{\\vec{w}_1,\\dots,\\vec{w}_k\\}\\) so that \\[\\vec{x}_i - \\text{proj}_{\\text{span}\\{\\vec{w}_1,\\dots,\\vec{w}_k\\}}(\\vec{x}_i) = {\\bf Y}_{i,k+1}\\vec{w}_{k+1}+\\cdots+{\\bf Y}_{id}\\vec{w}_d.\\] Using this identity and the properties of the PCA scores allows one to verify the equality at the end of the theorem (see exercises). The requirement that \\(\\lambda_k\\ge \\lambda_{k+1}\\) is necessary for uniqueness. If \\(\\lambda_k = \\lambda_{k+1}\\) then the subspace \\(\\text{span}\\{\\vec{w}_1,\\dots,\\vec{w}_{k-1},\\vec{w}_{k+1}\\}\\) would offer an equally good approximation. Fortunately, it is rare that two (nonzero) PCA scores are equal in practice so we rarely have to worry about this issue. In short, PCA learns the \\(k\\)-dimensional linear subspace which best approximates the original data on average! In all of the previous analysis, we have been operating under the assumption that our data is centered, e.g. \\(\\bar{x}=\\vec{0}\\) – an preprocessign step that made our analysis easier and is done in practice to avoid potential issue with numerical linear albegra. We can recover all of the nice geometric intuition when working with uncentered data by adding the sample mean back to the approximation and shifting our focus to affine subspaces, which look just like linear subspaces which have been translated by some constant shift away from the origin. ::: {.corollary $pca-opt-aff} Given any \\(k\\)-dimensional affine subspace \\(\\mathcal{A}\\subset\\mathbb{R}^d\\) \\[\\frac{1}{N}\\sum_{i=1}^N \\|\\vec{x}_i - \\text{proj}_\\mathcal{A}(\\vec{x}_i)\\|^2 \\ge \\lambda_{k+1}+\\cdots+\\lambda_d\\] with equality (assuming \\(\\lambda_k&gt;\\lambda_{k+1}\\)) if and only if \\(\\mathcal{A} = \\bar{x} + \\text{span}\\{\\vec{w}_1,\\dots,\\vec{w}_k\\}.\\) ::: Note the set \\(\\bar{x} + \\text{span}\\{\\vec{w}_1,\\dots,\\vec{w}_k\\}\\) is the set of all vectors \\[\\{\\vec{v}\\in\\mathbb{R}^d:\\,\\vec{v}-\\bar{x} \\in \\text{span}\\{\\vec{w}_1,\\dots,\\vec{w}_k\\}\\},\\] i.e. the optimal \\(k\\)-dimensional hyperplane found after centering if translated by \\(\\hat{x}\\). In this case, the optimal approximation of our data is \\[\\vec{x}_i \\approx \\bar{x} + {\\bf Y}_{i1}\\vec{w}_1+\\cdots + {\\bf Y}_{ik}\\vec{w}_k.\\] References "],["sec-svd.html", "4.2 Singular Value Decomposition", " 4.2 Singular Value Decomposition 4.2.1 Low-rank approximations In the next two subsections, we are going to focus on low-rank matrix approximation methods in which we try to approximate our data matrix \\({\\bf X}\\) using a low-rank alternative. In the language of dimension reduction, the idea is to approximate each data with a linear combonation of a small number (\\(k&lt; d\\) of latent feature vectors. Briefly, let’s discuss how this idea works in the case of PCA. In PCA, the loadings provide a data-driven orthonormal basis \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) which allow us to compute the PCA scores from the centered data. In matrix notation, this scores are given by \\[\\underbrace{{\\bf Y}}_{\\text{PCA scores}} = \\underbrace{({\\bf HX})}_{\\text{centered data matrix}} \\times \\underbrace{{\\bf W}}_{\\text{loadings}}.\\] The matrix \\({\\bf W}\\) is orthonormal allowing us to write \\[{\\bf HX} = {\\bf YW }^T.\\] The \\(ith\\) row of the preceding matrix equality reads \\[(\\vec{x}_i - \\bar{x})^T = \\sum_{j=1}^d {\\bf Y}_{ij} \\vec{w}_j^T.\\] From the PCA notes, an approximation using the first \\(k\\) loadings \\[(\\vec{x}_i - \\bar{x})^T \\approx \\sum_{j=1}^k {\\bf Y}_{ij} \\vec{w}_j^T\\] minimizes the average squared Euclidean distance over all vectors. In matrix notation, the approximation over all vectors decomposes as the product of an \\(N\\times k\\) matrix and a \\(k\\times d\\) matrix as follows. \\[{\\bf HX} \\approx \\underbrace{\\begin{bmatrix}{\\bf Y}_{11} &amp; \\dots &amp; {\\bf Y}_{1k} \\\\ \\vdots &amp; &amp; \\vdots \\\\ \\vdots &amp; &amp; \\vdots \\\\ {\\bf Y}_{N1} &amp; \\dots &amp; {\\bf Y}_{Nk}\\end{bmatrix}}_{N\\times k} \\underbrace{\\begin{bmatrix}\\vec{w}_1^T \\\\ \\vdots \\\\ \\vec{w}_k^T \\vphantom{\\vdots} \\end{bmatrix}\\\\}_{k\\times d}.\\] Due to the properties of the scores and loadings, the approximation is a rank \\(k\\) matrix. In the following sections, we’ll seek similar decompositions of our data matrix. 4.2.2 SVD and Low Rank Approximations The standard problem for low rank matrix approximations is to solve the following problem. Given a matrix \\({\\bf X}\\in\\mathbb{R}^{N\\times d}\\) and a chosen rank \\(k\\), we want: \\[\\begin{equation} \\mathop{\\mathrm{arg\\,min}}_{{\\bf Z}\\in\\mathbb{R}^{N\\times d} \\\\ \\text{rank}({\\bf Z}) = k} \\|{\\bf X} - {\\bf Z}\\|_F^2 = \\mathop{\\mathrm{arg\\,min}}_{{\\bf Z}\\in\\mathbb{R}^{N\\times d} \\\\ \\text{rank}({\\bf Z}) = k} \\left(\\sum_{ij}({\\bf X}_{ij} - {\\bf Z}_{ij})^2 \\right) = \\mathop{\\mathrm{arg\\,min}}_{{\\bf Z}\\in\\mathbb{R}^{N\\times d} \\\\ \\text{rank}({\\bf Z}) = k} \\left(\\sum_i \\|\\vec{x}_i-\\vec{z}_i\\|^2\\right) \\end{equation}\\] where \\(\\vec{z}_1^T, \\dots,\\vec{z}_N^T\\) denote the rows of \\({\\bf Z}\\). Solving this constrained minimization problem may appear difficult, but the answer is obtainable directly from the SVD of \\({\\bf X}\\) due to the following theorem. Theorem 4.3 (Best Rank $k$ Approximation) Suppose matrix \\({\\bf X}\\in\\mathbb{R}^{N\\times d}\\) has singular value decomposition \\[{\\bf X} = {\\bf US V}^T\\] with singular values \\[\\sigma_1\\ge\\dots \\ge \\sigma_{\\min\\{N,d\\}}.\\] Then 1) For any rank \\(k\\) matrix \\({\\bf Z}\\in\\mathbb{R}^{N\\times d}\\), \\[\\|{\\bf X}-{\\bf Z}\\|_F \\ge \\sigma_{k+1}^2 + \\dots + \\sigma_{\\min\\{N,d\\}}^2\\] 2) The rank \\(k\\) matrix attained by keeping the first \\(k\\) left singular vectors, right singular vectors, and singular values of the SVD of \\({\\bf X}\\) attains this minimum. Specifically, if \\(\\vec{u}_1,\\dots,\\vec{u}_k\\) are the first \\(k\\) left singular vectors and \\(\\vec{v}_1,\\dots,\\vec{v}_k\\) are the first \\(k\\) right singular vectors then \\[\\begin{equation} \\mathop{\\mathrm{arg\\,min}}_{{\\bf Z}\\in\\mathbb{R}^{N\\times d} \\\\ \\text{rank}({\\bf Z}) = k} \\|{\\bf X} - {\\bf Z}\\|_F^2 = \\begin{bmatrix}&amp;&amp; \\\\ \\vec{u}_1 &amp; \\dots &amp; \\vec{u}_k \\\\ &amp;&amp; \\end{bmatrix} \\begin{bmatrix}\\sigma_1 &amp; &amp; \\\\ &amp; \\ddots &amp; \\\\ &amp; &amp; \\sigma_k \\end{bmatrix} \\begin{bmatrix} &amp;\\vec{v}_1^T &amp; \\\\ &amp; \\vdots&amp; \\\\ &amp;\\vec{v}_k^T&amp; \\end{bmatrix} \\end{equation}\\] There are several important implications of this theorem. First, the direct result indicates that computing the SVD of \\({\\bf X}\\) immediately allows us to compute the best approximation under Frobenius loss for a specified rank \\(k\\). In practice, the full SVD is not required since we will typically consider the case where \\(k &lt;\\min\\{N,d\\}\\). There is a another implication as well. In cases where a specific choice of \\(k\\) is not clear, the singular values of \\({\\bf X}\\) provide a method to comparing different choices of \\(k\\). Akin to the scree plot, we can plot the (squared) singular values to look for clear separation or alternatively, plot the ratio \\[\\frac{\\sum_{j=1}^k\\sigma_j^2}{\\sum_{j=1}^{\\min\\{N,d\\}}\\sigma_j^2}\\] as a function of \\(k\\) to understand the relative error for a specific choice of \\(k\\). For a given choice of \\(k\\), we now approximate our original data by linear combination of the right singular vectors \\(\\vec{v}_1,\\dots,\\vec{v}_k\\). The approximations are \\[\\vec{x}_i \\approx \\vec{z}_i = \\sum_{j=1}^k \\sigma_j{\\bf U}_{ij} \\vec{v}_j\\]. 4.2.3 Connections with PCA Suppose that we were to compute the full SVD of the centered data matrix \\[{\\bf HX}= {\\bf USV}^T.\\] We can express the sample covariance matrix of the original data using the SVD as \\[\\begin{equation} \\hat{\\Sigma}_X = \\frac{1}{N} ({\\bf HX})^T ({\\bf HX}) = \\frac{1}{N} {\\bf VS}^T{\\bf U}^T{\\bf U SV} ^T = {\\bf V}\\left(\\frac{1}{N} {\\bf S}^T{\\bf S}\\right) {\\bf V}^T. \\end{equation}\\] The matrix \\(\\frac{1}{N}{\\bf S}^T {\\bf S} \\in \\mathbb{R}^{d\\times d}\\) is diagonal with entries \\(\\sigma_1^2/N \\ge \\dots \\ge \\sigma_d^2/N.\\) Furthermore, the matrix \\({\\bf V}\\) is orthonormal. Thus, from the SVD of \\({\\bf HX}\\) we can immediately compute the spectral decomposition of \\(\\hat{\\Sigma}_X\\) to attain the principal component variances and loadings. In fact, the principal component loadings are the right singular vectors of \\({\\bf HX}\\) whereas the principal component variances are the squared singular values divided by \\(N\\), e.g. \\(\\lambda_j = \\sigma_j^2/N\\). Using this observation, \\[{\\bf HX} = {\\bf USV}^T \\rightarrow {\\bf HXV} = {\\bf US}\\] from which we may conclude the principal component scores are equal to \\({\\bf US}.\\) This connection is the basis for most numerical implementation of PCA since it is more both faster and more numerically stable to compute the SVD of \\({\\bf HX}\\) than to compute both \\(\\hat{\\Sigma}_X\\) and its eigendecomposition! Thus, computing the best rank \\(k\\) approximation to a centered data matrix is equivalent to the best approximation of the centered data using the first \\(k\\) PC scores. However, using the SVD to compute a low rank approximation to a non-centered data matrix will give a different result than PCA since the SVD of \\({\\bf HX}\\) will be different than the SVD of \\({\\bf X}\\). Unlike PCA, which decomposes variability in directions relative to the center of the data, SVD learns an orthonormal basis which decomposes variability relative to the origin. Only when the data is centered (so its mean is the origin) do SVD and PCA coincide. Nonetheless, SVD has similar weaknesses to PCA including a sensitivity to scaling and outliers and an inability to detect nonlinear structure. SVD can provide one final note of insight regarding PCA. Suppose that \\(N &lt; d\\), which is to say that we have fewer samples than the dimensionality of our data. After centering, the matrix \\({\\bf HX}\\) will have rank most \\(N-1\\). (Centering reduces the maximum possible rank from \\(N\\) to \\(N-1\\)). The SVD of \\({\\bf HX}\\) will have at most \\(d-1\\) non-zero singular values. Thus, \\(\\hat{\\Sigma}_X\\) will have at most \\(N-1\\) non-zero PC variances and we can conclude that our data reside on a hyperplane of dimension \\(N-1\\) (possibly lower if \\({\\bf HX}\\) has rank less than \\(N-1\\)). Since \\(N-1 &lt; d\\), we are guaranteed to find a lower-dimensional representation of our data! However, this conclusion should be viewed cautiously. Should additional samples be drawn, can we conclude that they would also be constrained to the same hyperplane learned using the first \\(N\\) samples? 4.2.4 Recommender Systems SVD may also be applied to association rule learning which can identify similar items in a datasets based on partial observations. As a motivating example, consider the case where we have a dataset of user provided ratings of products, which could be items purchased, songs listed to, or movies watched. In this case, \\({\\bf X}_{ij}\\) indicates user \\(i\\)s rating of item \\(j\\). Typically, most of the entries of \\({\\bf X}\\) will be NA since users have likely interacted with a small number of items. Using a variant of SVD, a simple recommendation system proceeds in two steps. First, we can impute the missing ratings. We can then use this result to infer similar movies which can be used for recommendation. 4.2.4.1 Imputation Let \\({\\bf X}\\in\\mathbb{R}^{N\\times d}\\) be the data matrix of user ratings with rows corresponding to user and columns to items and \\[\\mathcal{I} =\\{ij \\, \\text{ s.t. } {\\bf X}_{ij} \\ne NA\\}\\] be the set of all indices of \\({\\bf X}\\) for which we have observed ratings. For any approximating matrix \\(\\tilde{\\bf X}\\in\\mathbb{R}^{N\\times d}\\), we may define a `Frobenius’-like error as \\[\\mathbb{L}({\\bf X},\\tilde{\\bf X}) = \\sum_{ij \\in \\mathcal{I}} ({\\bf X}_{ij}-\\tilde{\\bf X}_{ij})^2\\] which is the sum-squared error over all observations. Using this definition of loss, here’s a simple algorithm for imputing the missing entries of \\({\\bf X}\\) using low rank approximations of a pre-specified rank \\(k\\). We initialize the matrix \\(\\tilde{\\bf X}\\) of imputed entries by taking \\[\\tilde{X}_{ij}= \\begin{cases} X_{ij} &amp; ij \\in \\mathcal{I} \\\\ 0 &amp; ij \\ne \\mathcal{I} \\end{cases}.\\] Now let’s use the SVD of \\(\\tilde{\\bf X}\\) to compute a rank \\(k\\) approximation, \\({\\bf X}^{(k)}\\). Update our imputed matrix \\(\\tilde{\\bf X}= \\tilde{\\bf X}^{(k)}\\) and compute the error \\[\\ell = \\mathbb{L}({\\bf X},\\tilde{\\bf X})\\]. The low-rank approximation will distort all entries of \\(\\tilde{\\bf X}\\) so that \\(\\ell &gt; 0\\). We now repeat the following two steps. Overwrite the entries of \\(\\tilde{\\bf X}\\) corresponding to observations in \\({\\bf X}\\), e.g. for all \\(ij \\in \\mathcal{I}\\), set \\(\\tilde{\\bf X}_{ij} = {\\bf X}_{ij}\\). The entries corresponding to missing observations generated by the low-rank approximation are kept unchanged. Now recompute the SVD of \\(\\tilde{\\bf X}\\) to find the rank \\(k\\) approximating matrix \\(\\tilde{\\bf X}^{(k)}\\). Update our imputed matrix using the low-rank approximation so that \\(\\tilde{\\bf X} = {\\bf X}^{(k)}\\) and recompute the error \\(\\ell^* = \\mathbb{L}({\\bf X},\\tilde{\\bf X}).\\) If \\(\\ell^* &lt; \\ell\\) and \\(|\\ell - \\ell^*|/\\ell &gt; \\epsilon\\) then set \\(\\ell = \\ell^*\\) and return to step (1). Else stop the algorithm and we use matrix \\(\\tilde{\\bf X}\\) as our matrix of imputed values. In summary, after initialization, we are continually overwriting the entries of our matrix of imputed values corresponding to observations then applyin a low-rank approximation. We stop the algorithm when the error stops decreasing or when the relative decrease in error is less than a specified threshhold \\(\\epsilon.\\) In addition to the rank \\(k\\) and the stopping threshhold \\(\\epsilon\\) there is one other important `tuning’ parameter, the initialization. In the brief description above, we used a standard of 0, but one could also use the average of all entries in the corresponding column (average item rating) or row (average rating given by a user) or some other specification. Many more complicated recommendation systems include user and item specific initializations and adjustments but still imploy a low rank approximation somewhere in their deployment. In later updates, we show an application of this algorithm to the Movielens 10m dataset containing 10 million ratings from 72,000 viewers for 10,000 movies. To handle the size of this dataset, we use the Fast Truncated Singular Value Decomposition. # library(&quot;irlba&quot;) # initialize &lt;- function(mat){ # # get column means ignoring NAs # ave.rat &lt;- colMeans(mat,na.rm = TRUE) # # fill NAs by average movie rating # for(j in 1:ncol(mat)){ # mat[is.na(mat[,j]),j] &lt;- ave.rat[j] # } # return(mat) # } # # maxim &lt;- function(mat,k){ # # temp &lt;- svd(mat) # temp&lt;- irlba(mat, nv = k) # return(list(U = temp$u[,1:k], # D = temp$d[1:k], # V = temp$v[,1:k], # mat.hat = temp$u[,1:k] %*% diag(temp$d[1:k]) %*% t(temp$v[,1:k]))) # } # # recommender &lt;- function(mat, num_steps, k){ # # initialize loss function tracking # loss &lt;- rep(NA,num_steps) # # run EM algorithm and save loss # ind.known &lt;- !is.na(mat) # mat2 &lt;- initialize(mat) # for (j in 1:num_steps){ # mat2 &lt;- maxim(mat2,k)$mat.hat # loss[j] &lt;- sum((mat2[ind.known] - mat[ind.known])^2) # mat2[ind.known] &lt;- mat[ind.known] # } # return(list(loss= loss, fit = mat2)) # } # # k &lt;- 3 # temp &lt;- recommender(ratings,num_steps = 200, k = k) # plot(temp$loss, xlab = &quot;Step&quot;, ylab = expression(ell)) 4.2.4.2 Recommendation Suppose now that we have a matrix, \\(\\tilde{\\bf X}\\in\\mathbb{R}^{N\\times d}\\) of movie ratings (real or imputed) and its SVD \\[\\tilde{\\bf X} = \\tilde{\\bf U}\\tilde{\\bf S}\\tilde{\\bf V}^T\\] where \\(\\tilde{\\bf U} \\in \\mathbb{R}^{N\\times k}\\), \\(\\tilde{\\bf S}\\in\\mathbb{R}^{k\\times k}\\) and \\(\\tilde{\\bf V}\\in\\mathbb{R}^{d\\times k}.\\) Then for user \\(i\\) the rating they give to movie \\(j\\) is a linear combination of the elements in the \\(j\\) column of \\(\\tilde{\\bf V}^T\\). Specifically, \\[\\tilde{\\bf X} \\approx \\sum_{\\ell = 1}^k \\sigma_\\ell \\tilde{\\bf U}_{i\\ell} (\\tilde{\\bf V})^T_{\\ell j} = \\sum_{\\ell = 1}^k \\sigma_\\ell \\tilde{\\bf U}_{i\\ell} \\tilde{\\bf V}_{j\\ell}.\\] For any movie, its rating will always be a linear combination of the elements in the corresponding column of \\(\\tilde{V}^T\\). As such, we may view the \\(k\\)-dimensional vectors in each column of \\(\\tilde{\\bf V}\\) as a representation of that movie. We may then use these vectors to identify similar movies; one common approach is the cosine similarity, which for vectors \\(\\vec{x}, \\vec{y}\\in\\mathbb{R}^k\\) is the cosine of the angle between them, i.e. \\[\\cos\\theta = \\frac{\\vec{x}^T\\vec{y}}{\\|\\vec{x}\\| \\|\\vec{y}\\|}.\\] The cosine similarity is bounded between -1 and 1 and two vectors are considered more similar if the cosine of the angle between them is closer to 1. Using this representation, we can take any movie (a column of \\(\\tilde{\\bf V}^T\\)) and choose the most similar movie (choosing the other columns of \\(\\tilde{\\bf V}^T\\) with the largest cosine similarity). Thus, if a user gave a high rating to movie \\(b\\), we now have a method for recommending one or more similar movies they might enjoy. "],["nonnegative-matrix-factorization.html", "4.3 Nonnegative Matrix Factorization", " 4.3 Nonnegative Matrix Factorization In both PCA and SVD, we learn data-drive orthonormal feature vectors which we can use to decompose our data in an orderly fashion. Nonnegative matrix factorization (NMF) is again focused on learning a set latent vectors which can be used to approximate our data. However, we will add a few restrictions motivated by experimental data and a desire to increase interpretability of the results which will drastically alter the results. For NMF, we focus on cases where \\({\\bf X}\\) is an \\(N\\times d\\) data matrix with the added condition that its entries are nonnegative. Notationally, we write \\({\\bf X}\\in\\mathbb{R}_{\\ge 0}^{N\\times d}\\) to indicate it is composed of nonnegative real values. The nonnegativity condition is a natural constraint for many experimental data sets, but we are also going to impose a similar constraint on our feature vectors and coefficients. More specifically, for a specific rank \\(k\\), we seek a coefficient matrix \\({\\bf W}\\in\\mathbb{R}_{\\ge 0}^{N\\times k}\\) and feature matrix \\({\\bf H}\\in \\mathbb{R}^{k\\times d}_{\\ge 0}\\) such that \\({\\bf WH}\\) is as close to \\({\\bf X}\\) as possible. The nonnegativity constraint on the elements of \\({\\bf W}\\) and \\({\\bf H}\\) implies that \\({\\bf WH}\\in\\mathbb{R}_{\\ge 0}^{N\\times d}\\). There are many different measures of proximity that one may use in NMF which are greater than zero and equal to zero if and only if \\({\\bf X}={\\bf WH}\\). The most common measures are Frobenius norm: \\(\\|{\\bf X}-\\hat{\\bf X}\\|_F.\\) Divergence: \\(D({\\bf X} \\| \\hat{\\bf X}) = \\sum_{i=1}^N\\sum_{j=1}^d \\left[{\\bf X}_{ij} \\log \\frac{{\\bf X}_{ij}}{\\hat{\\bf X}_{ij}} + \\hat{\\bf X}_{ij} - {\\bf X}_{ij}\\right]\\) Itakura-Saito Divergence: \\[D_{IS}({\\bf X}, {\\bf WH}) = \\sum_{i=1}^N\\sum_{j=1}^d \\left[\\frac{{\\bf X}_{ij}}{({\\bf WH})_{ij}} - \\log\\frac{{\\bf X}_{ij}}{({\\bf WH})_{ij}} -1 \\right]\\] These loss functions emphasize different features of the data and are often coupled with additional penalties or assumptions on the elements of \\({\\bf W}\\) and \\({\\bf H}\\) which we will discuss at the end of the section. For now, let us focus on the primary motivation of NMF, which is to create more interpretable feature vectors (the rows of \\({\\bf H}\\)). 4.3.1 Interpretability, Superpositions, and Positive Spans Consider the case of SVD where we can approximate a given vector \\(\\vec{x}_i\\) using the first \\(k\\) right singular vectors as \\[\\vec{x}_i \\approx \\sum_{j=1}^k \\sigma_j {\\bf U}_{ij} \\vec{v}_j.\\] Let us restrict ourselves to the case of nonnegative entries. Suppose for the moment that the \\(\\ell\\)th coordinate of \\(\\vec{x}_i\\) is (very close to) zero and this is reflected by our approximation as well so that \\[(\\vec{x}_i)_\\ell \\approx \\sum_{j=1}^k \\sigma_j {\\bf U}_{ij} (\\vec{v}_j)_\\ell \\approx 0.\\] The freedom of the coefficients \\(\\sigma_j {\\bf U}_{ij}\\) and the features \\((\\vec{v}_j)_\\ell\\) for \\(j=1,\\dots,k\\) to take any value in \\(\\mathbb{R}\\) prevents us from concluding that there is a comparable near-zeroness in the features or coefficients. In could be that case that \\({\\bf U}_{ij} (\\vec{v}_j)_\\ell\\) is near zero for all \\(j=1,\\dots,k\\) or that some subset are large and positive but are canceled out by a different subset that is large and negative. If, however, we restrict the coefficients and features to be zero this cancellation effect cannot occur. Features can only then be added but never subtracted. Under this restriction, \\(\\sum_{j=1}^k \\sigma_j {\\bf U}_{ij} (\\vec{v}_j)_\\ell\\) will only be close to zero if the coefficients are (near) zero for any feature vector which has a (large) positive entry in its \\(\\ell\\)th coordinate. Thus, in a factorization of the form \\[\\vec{x}_i \\approx \\sum_{j=1}^k \\underbrace{{\\bf W}_{ij}}_{\\ge 0} \\underbrace{\\vec{h}_j}_{\\in \\mathbb{R}^d_{\\ge}},\\] we can only superimpose (add) features to approximate our data, we might expect the features themselves to look more like our data. In matrix notation, we have \\[{\\bf X} = {\\bf WH}\\] where the coefficients for each sample are stored in the rows of \\({\\bf W}\\in\\mathbb{R}^{N\\times k}_{\\ge 0}\\) and the features are transposed and listed as the rows of \\({\\bf H}\\in\\mathbb{R}^{k\\times d}\\). 4.3.2 Geometric Interpretation As a motivating example consider the case, where we have data \\(\\vec{x}_1,\\dots,\\vec{x}_N\\in\\mathbb{R}^3_{\\ge 0}\\) for which there is a exact decomposition \\[{\\bf X} = {\\bf WH}\\] which is to say there are nonnegative coefficients, \\({\\bf W}\\) and feature vectors \\(\\vec{h}_1,\\vec{h}_2 \\in \\mathbb{R}_{\\ge 0}^3\\) such that \\[\\vec{x}_i = {\\bf W}_{i1}\\vec{h}_1 + {\\bf W}_{i2}\\vec{h}_2 \\qquad \\text{ for } i =1,\\dots,N.\\] The nonnegativity condition on data implies that \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) reside in the positive orthant of \\(\\mathbb{R}^3.\\) The exact decomposition assumptions implies \\(\\{\\vec{x}_1,\\dots,\\vec{x}_N\\} \\in \\text{span}\\{\\vec{h}_1,\\vec{h}_2\\}\\) and furthermore the following more restricted picture holds. Figure 4.4: Data in the positive span of two vectors The data are constrained within the positive span of the vectors, a notion we may now define. Definition 4.2 (Positive Span) The positive span of a set of vectors \\(\\{\\vec{h}_1,\\dots,\\vec{h}_k\\}\\in\\mathbb{R}^d\\) is the set \\[\\Gamma\\left(\\{\\vec{h}_1,\\dots,\\vec{h}_k\\}\\right) = \\left\\{\\vec{v}\\in\\mathbb{R}^d \\, \\bigg|\\, \\vec{v} = \\sum_{j=1}^k a_j \\vec{h}_j, \\, a_1,\\dots,a_k \\ge 0\\right\\}.\\] This set is also called the simplicial cone or conical hull of \\(\\{\\vec{h}_1,\\dots,\\vec{h}_k\\}\\). In the motivating example above, our data live in the positive span of the two feature vectors, thus we say the data matrix \\({\\bf X}\\) has a nonnegative matrix factorization \\({\\bf WH}\\). Thus, we may view NMF as a restricted version of PCA or SVD where we have moved from spans to positive spans. This seemingly small change gives rise to some big problems. Even in this simple case above we have a uniqueness problem. Up to sign changes and ordering, the feature vectors in PCA and SVD were unique. However, we can find two alternative vectors \\(\\vec{h}_1&#39;\\) and \\(\\vec{h}_2&#39;\\) which still give a exact NMF. There are trivial cases. First, one can change ordering (\\(\\vec{h}_1&#39; =\\vec{h}_2\\) and \\(\\vec{h}_2&#39; = \\vec{h}_1\\)) which we avoid in PCA and SVD by assuming the corresponding singular values of PC variances are listed in decreasaing order. Secondly, we could rescale by setting \\(\\vec{h}_1&#39; = c\\vec{h}_1\\) and rescaling the corresponding coefficients by a factor of \\(1/c\\) for some \\(c &gt; 0\\) which PCA and SVD avoid by fixing feature vectors to have unit length. The ordering issue is a labeling concern and may be ignored, whereas the rescaling issue can be addressed by adding constraints on the length of the feature vectors. A third and far more subtle issue occurs because we do not enforce orthogonality. In @ref[fig:nmf-ex], imagine that the feature vectors are the arms of a folding fan. We could change the angle between our feature vectors by opening or closing the arms of the fan. So long as we do not close the fan too much (and leave our data outside the positive span) or open them too much (so that feature vectors have negative entries), we can still find a perfect reconstruction. This `folding fan’ issue can be addressed through additional penalties which we discuss in @ref{sec-nmf-ext}, but uniqueness cannot be eliminated entirely. Thus, we seek an NMF for our data rather than the NMF. 4.3.3 Finding an NMF: Multiplicative Updates For a given choice of error, the lack of a unique solution also means there is no closed form solution for \\({\\bf W}\\) and \\({\\bf H}\\). Thus, we will need to apply numerical optimization to find a \\({\\bf W}\\) and \\({\\bf H}\\) which minimizes the selected error, \\[\\mathop{\\mathrm{arg\\,min}}_{{\\bf W}\\in\\mathbb{R}^{N\\times k}_{\\ge 0}, {\\bf H}\\in\\mathbb{R}^{k\\times d}_{\\ge 0}} D({\\bf X},{\\bf WH})\\]. The loss is a function of all of the entries of \\({\\bf W}\\) and \\({\\bf H}\\). To apply any type of gradient based optimization, we need to compute the partial derivative of our loss with respect to each of the entries of these matrices. As an example, we will focus on the divergence and show the relevant details. For gradient based optimization, we then need to compute \\(\\frac{\\partial }{\\partial {\\bf W}_{ij}} D({\\bf X}\\| {\\bf WH})\\) for \\(`\\le i \\le N\\) and \\(1\\le j\\le k\\) and \\(\\frac{\\partial }{\\partial {\\bf H}_{j\\ell}} D({\\bf X}\\| {\\bf WH})\\) for \\(1\\le j \\le k\\) and \\(1\\le \\ell \\le d.\\) Note that \\[({\\bf WH})_{st} = \\sum_{j=1}^k{\\bf W}_{sk}{\\bf H}_{kt}\\] so that \\[\\frac{\\partial ({\\bf WH})_{st}}{\\partial ({\\bf WH})_{ij}} = \\begin{cases} {\\bf H}_{jt} &amp; s = i \\\\ 0 &amp; s\\ne i \\end{cases}\\] Thus, we may may make use of the chain rule to conclude that \\[\\begin{align*} \\frac{\\partial }{\\partial {\\bf W}_{ij}} D({bf X}\\| {\\bf WH}) &amp;= \\frac{\\partial }{\\partial {\\bf W}_{ij}}\\sum_{st} \\left({\\bf X}_{st} \\log(({\\bf X})_{st}) - {\\bf X}_{st} \\log(({\\bf WH})_{st}) + ({\\bf WH})_st - ({\\bf X})_{st}\\right)\\\\ &amp;=\\frac{\\partial }{\\partial {\\bf W}_{ij}}\\sum_{st} \\left(- {\\bf X}_{st} \\log(({\\bf WH})_{st}) + ({\\bf WH})_{st} \\right) \\\\ &amp;=\\sum_{st}\\left(\\frac{{\\bf X}_{st}}{({\\bf WH}_{st})} + 1\\right)\\frac{\\partial ({\\bf WH})_{st}}{\\partial ({\\bf WH})_{ij}} \\\\ &amp;=\\sum_{t=1}^d \\left(-\\frac{{\\bf X}_{it}}{({\\bf WH}_{it})} + 1\\right){\\bf H}_{jt}. \\end{align*}\\] A similar calculation gives \\[\\frac{\\partial }{\\partial {\\bf H}_{ij}} D({bf X}\\| {\\bf WH}) = \\sum_{s=1}^N \\left(-\\frac{{\\bf X}_{sj}}{({\\bf WH})_{sj}} + 1\\right) {\\bf W}_{sj}.\\] In a standard implementation of gradient descent, we choose a step size \\(\\epsilon &gt;0\\) and apply the updates \\[\\begin{equation} \\begin{split} {\\bf W}_{ij} \\leftarrow {\\bf W}_{ij} - \\epsilon \\sum_{t=1}^d \\left(-\\frac{{\\bf X}_{it}}{({\\bf WH}_{it})} + 1\\right){\\bf H}_{jt} \\\\ {\\bf H}_{ij} \\leftarrow {\\bf H}_{ij} - \\epsilon \\sum_{s=1}^N \\left(-\\frac{{\\bf X}_{sj}}{({\\bf WH})_{sj}} + 1\\right) {\\bf W}_{sj} \\end{split} \\end{equation}\\] to each entry of \\({\\bf W}\\) and \\({\\bf H}\\) simultaneously. Alternatively, we could consider coordinate descent where we update each entry of \\({\\bf W}\\) (holding all other entries of \\({\\bf W}\\) and \\({\\bf H}\\) constant) separately then do the same for \\({\\bf H}\\) then repeat. Each approach will converge to a local mode (though possibly different ones) when \\(\\epsilon\\) is sufficiently small. However, if \\(\\epsilon\\) is too small it may take many iterations to converge. Unfortunately, choosing \\(\\epsilon\\) can create a numerically unstable algorithm (that doesn’t converge at all) or one where we lose the nonnegativity condition on the entries of \\({\\bf W}\\) or \\({\\bf H}\\). To preserve nonnegativity, [8] developed a set of state dependent step-sizes (one for each entry of \\({\\bf W}\\) and \\({\\bf H}\\)) which result in multiplicative rather than additive updates. IFor divergence, they take step sizes \\[\\epsilon_{ij}^{W} = \\frac{{\\bf W}_{ij}}{\\sum_t {\\bf H}_{jt}} \\text{ and } \\epsilon_{ij}^H = \\frac{{\\bf H}_{ij}}{\\sum_s {\\bf W}_{sj}}.\\] These step size are proportional to the entries we are updating so that we take larger steps for larger entries of \\({\\bf W}\\) of \\({\\bf H}\\). If we substitute these step sizes in the updates simplify to \\[\\begin{equation} \\begin{split} {\\bf W}_{ij} \\leftarrow {\\bf W}_{ij} \\left[\\frac{\\sum_t \\left({\\bf H}_{jt}{\\bf X}_{it}/({\\bf WH}_{it})\\right)}{\\sum_t {\\bf H}_{jt}} \\right] \\\\ {\\bf H}_{ij} \\leftarrow {\\bf H}_{ij} \\left[\\frac{\\sum_s\\left({\\bf W}_{si}{\\bf X_{sj}}/({\\bf WH})_{si} \\right)}{\\sum_s {\\bf W}_{si}}\\right] \\end{split} \\end{equation}\\] indicating that we rescale the entries of \\({\\bf W}\\) and \\({\\bf H}\\) by some nonnegative value which is guaranteed to preserve the nonnegativity of each entry. One can verify that the multiplicative updates simplify to one when \\({\\bf X}= {\\bf WH}.\\) One can then iteratively update the entries of \\({\\bf W}\\) and \\({\\bf H}\\) one at a time, in blocks, or all together until a local mode is reached. Multiplicative update rules for other choices of loss are also available in [8] but are also provided as exercises for the reader. 4.3.4 NMF in practice For a given choice of loss, standard NMF proceeds in the following manner. Choose a rank \\(k\\) and initial \\({\\bf W}_\\in\\mathbb{R}^{N\\times k}_{\\ge 0}\\) and \\({\\bf H}\\in\\mathbb{R}^{k\\times d}_{\\ge 0}\\). Apply the multiplicative rule until a local minimum is reached. Repeats steps (1) and (2) for different initial conditions then select the final \\({\\bf W}\\) and \\({\\bf H}\\) which give the lowest overall loss. Different initial conditions (ICs) will converge to different local modes; reptition over multiple differents (ICs) will help find a better overall minimizer and avoid getting a final NMF which is trapped in a poor local mode. There is no guidance of how many ICs. Many packages default to five. More would be better but computational resources are not infinite, and finding even one mode though coordinate ascent can be slow. The choice of \\(k\\) is also challenging. In prior information or other project constraints dictate a specific choice of \\(k\\) one should use that value. However, the preceding steps can be repeated over a range of \\(k\\). One can then compare plot the optimal loss as a function of \\(k\\) and look for a cutoff where the error appears to saturate. Importantly, there are no connections between the rank \\(k\\) NMF and rank \\(k+1\\) NMF. Unlike, PCA or SVD, one cannot truncate the vectors and coefficients and attain an optimal solution for a lower-dimensional representation. Thus, separate fits at each choice of \\(k\\) must be attained through separate runs of the numerical optimization. We show this approach applied to the first \\(10^3\\) eights (to save computation time) from the MNIST dataset [1] using Divergence loss with five runs per rank. Example 4.2 (NMF applied to MNIST) set.seed(185) load(&quot;../../Datasets/digits.Rdata&quot;) eights &lt;- digits$pixels[digits$labels == 8,][1:1000,] # mnist_nmf &lt;- nmf(eights, rank = 1:30, method = &quot;brunet&quot;, nrun = 5) # plot(mnist_nmf$measures$rss) 4.3.5 Regularization and Interpretability For a random initialization of \\({\\bf W}\\) and \\({\\bf H}\\) the final features found by NMF may not look like our original data quite like our original data, which is contrary to our original goal of finding features which are more comparable to the data. Many extensions of NMF address this issue through the inclusion of additional penalties on the elements of \\({\\bf W}\\) or \\({\\bf H}\\) which induce sparsity and/or constrain the features to be more similar to the data. In practice, it is insufficient to apply penalties which depend on the scaling of \\({\\bf W}\\) or \\({\\bf H}\\) as these can typically be made arbitrarily small by increasing corresponding elements of \\({\\bf H}\\) or \\({\\bf W}\\) respectively. Thus, any penalty which depends on the scaling of one matrix often includes additional constraints on the other. 4.3.5.1 Volume Regularized NMF 4.3.5.2 Archetypes References "],["sec-mds.html", "4.4 Multidimensional Scaling", " 4.4 Multidimensional Scaling Multidimensional scaling (MDS) is a broad name for a myriad of different methods which are designed to handle a common problem. Suppose there are \\(N\\) objects of interest in a dataset. Examples include a set of geographic locations or cells from mass spectrometry or census blocks, etc. Importantly, we do not need actual data corresponding to each object. In MDS, we instead require a measure the distance or dissimilarity between each pair of objects. We can organize these distances into a matrix \\({\\bf \\Delta}\\in\\mathbb{R}^{N\\times N}\\), with \\({\\bf \\Delta}_{rs}\\) representing the distance/dissimilarity between objects \\(r\\) and \\(s\\). Thus, \\({\\bf \\Delta}_{rr}=0\\) and for now, we may assume that \\({\\bf \\Delta}_{sr} = {\\bf \\Delta}_{rs}\\). The matrix \\({\\bf \\Delta}\\) is often called a Distance or Dissimilarity matrix. In practice, we may construct a distance matrix from observations, but for the purposes of MDS we only require \\({\\bf \\Delta}\\). The primary goal of MDS is to find a set of lower-dimensional points \\(\\vec{y}_1, \\dots, \\vec{y}_N \\in \\mathbb{R}^{t}\\) corresponding to each of the \\(N\\) objects such that the distance between \\(\\vec{y}_r\\) and \\(\\vec{y}_s\\) is close to \\({\\bf \\Delta}_{rs}\\). There are numerous different notions of distance one use in \\(\\mathbb{R}^t\\). Additionally, we may not know the notion of distance/dissimilarity used when computing \\({\\bf \\Delta}\\) or if the dissimilarity corresponds to any well defined notion of distance. Euclidean distance is a common choice for the distance of the lower-dimensional vectors. Fixing this choice still leaves many open questions. Are the original distances Euclidean? If so, can we determine the dimensionality of the original data? MDS also serves as a data visualization method. In this case, \\(t\\) is typically chosen to be either two or three, and the \\(N\\) points in the two-dimensional (or three-dimensional) representation may be plotted so that one can visualize the relationships between data. Before turning to the most common methods of MDS, let’s view a few examples using distances between cities. Example 4.3 (Classical scaling applied to distances between cities) The eurodist R package provides air travel distances between 21 cities in Europe and 10 cities in the US. For the moment, we will focus on the 10 US cities with names and distances given in the following tables Atlanta Chicago Denver Houston LosAngeles Miami NewYork SanFrancisco Seattle Washington.DC Atlanta 0 587 1212 701 1936 604 748 2139 2182 543 Chicago 587 0 920 940 1745 1188 713 1858 1737 597 Denver 1212 920 0 879 831 1726 1631 949 1021 1494 Houston 701 940 879 0 1374 968 1420 1645 1891 1220 LosAngeles 1936 1745 831 1374 0 2339 2451 347 959 2300 Miami 604 1188 1726 968 2339 0 1092 2594 2734 923 NewYork 748 713 1631 1420 2451 1092 0 2571 2408 205 SanFrancisco 2139 1858 949 1645 347 2594 2571 0 678 2442 Seattle 2182 1737 1021 1891 959 2734 2408 678 0 2329 Washington.DC 543 597 1494 1220 2300 923 205 2442 2329 0 After conducting classical scaling (a method of MDS, details will be discussed later), we acquire the plot below. The plot is consistent with the geographical relationships between the cities. Miami and Seattle are the farthest apart in our plot. NY and D.C. are quite close on the plot, which is also true for Los Angeles and San Francisco. If we rotate the above plot 180 degrees, we recover an representation of the cities consistent with the typical map of the US. Now let’s try MDS on the 21 European cities Athens Barcelona Brussels Calais Cherbourg Cologne Copenhagen Geneva Gibraltar Hamburg Hook of Holland Lisbon Lyons Madrid Marseilles Milan Munich Paris Rome Stockholm Vienna Athens 0 3313 2963 3175 3339 2762 3276 2610 4485 2977 3030 4532 2753 3949 2865 2282 2179 3000 817 3927 1991 Barcelona 3313 0 1318 1326 1294 1498 2218 803 1172 2018 1490 1305 645 636 521 1014 1365 1033 1460 2868 1802 Brussels 2963 1318 0 204 583 206 966 677 2256 597 172 2084 690 1558 1011 925 747 285 1511 1616 1175 Calais 3175 1326 204 0 460 409 1136 747 2224 714 330 2052 739 1550 1059 1077 977 280 1662 1786 1381 Cherbourg 3339 1294 583 460 0 785 1545 853 2047 1115 731 1827 789 1347 1101 1209 1160 340 1794 2196 1588 Cologne 2762 1498 206 409 785 0 760 1662 2436 460 269 2290 714 1764 1035 911 583 465 1497 1403 937 Copenhagen 3276 2218 966 1136 1545 760 0 1418 3196 460 269 2971 1458 2498 1778 1537 1104 1176 2050 650 1455 Geneva 2610 803 677 747 853 1662 1418 0 1975 1118 895 1936 158 1439 425 328 591 513 995 2068 1019 Gibraltar 4485 1172 2256 2224 2047 2436 3196 1975 0 2897 2428 676 1817 698 1693 2185 2565 1971 2631 3886 2974 Hamburg 2977 2018 597 714 1115 460 460 1118 2897 0 550 2671 1159 2198 1479 1238 805 877 1751 949 1155 Hook of Holland 3030 1490 172 330 731 269 269 895 2428 550 0 2280 863 1730 1183 1098 851 457 1683 1500 1205 Lisbon 4532 1305 2084 2052 1827 2290 2971 1936 676 2671 2280 0 1178 668 1762 2250 2507 1799 2700 3231 2937 Lyons 2753 645 690 739 789 714 1458 158 1817 1159 863 1178 0 1281 320 328 724 471 1048 2108 1157 Madrid 3949 636 1558 1550 1347 1764 2498 1439 698 2198 1730 668 1281 0 1157 1724 2010 1273 2097 3188 2409 Marseilles 2865 521 1011 1059 1101 1035 1778 425 1693 1479 1183 1762 320 1157 0 618 1109 792 1011 2428 1363 Milan 2282 1014 925 1077 1209 911 1537 328 2185 1238 1098 2250 328 1724 618 0 331 856 586 2187 898 Munich 2179 1365 747 977 1160 583 1104 591 2565 805 851 2507 724 2010 1109 331 0 821 946 1754 428 Paris 3000 1033 285 280 340 465 1176 513 1971 877 457 1799 471 1273 792 856 821 0 1476 1827 1249 Rome 817 1460 1511 1662 1794 1497 2050 995 2631 1751 1683 2700 1048 2097 1011 586 946 1476 0 2707 1209 Stockholm 3927 2868 1616 1786 2196 1403 650 2068 3886 949 1500 3231 2108 3188 2428 2187 1754 1827 2707 0 2105 Vienna 1991 1802 1175 1381 1588 937 1455 1019 2974 1155 1205 2937 1157 2409 1363 898 428 1249 1209 2105 0 After applying a reflection of the map given by classical scaling to help it comply to the conventional orientation of a European map, the above plot reconstructs the European map quite well. Gibraltar, Lisbon and Madrid are in the south-west corner, the two North European cities Stockholm and Copenhagen are in the north end, and Athens is in the south-west corner. Finally, let’s consider the 18 representative global cities. Their pairwise flight lengths (geodesic distance) are shown in the table below. As we can see, the geodesic distances between the three Southern-Hemisphere cities: Rio, Cape Town, Melbourne and other Northern-Hemisphere cities are generally large (almost all over 10,000 kilometers) Beijing Cape Town Hong Kong Honolulu London Melbourne Mexico City Montreal Moscow New Delhi New York Paris Rio Rome S.F. Singapore Stockholm Tokyo Beijing 0 12947 1972 8171 8160 9093 12478 10490 5809 2788 11012 8236 17325 8144 9524 4465 6725 2104 Cape Town 12947 0 11867 18562 9635 10388 13703 12744 10101 9284 12551 9307 6075 8417 16487 9671 10334 14737 Hong Kong 1972 11867 0 8945 9646 7392 14155 12462 7158 3770 12984 9650 17710 9300 11121 2575 8243 2893 Honolulu 8171 18562 8945 0 11653 8862 6098 7915 11342 11930 7996 11988 13343 12936 3857 10824 11059 6208 London 8160 9635 9646 11653 0 16902 8947 5240 2506 6724 5586 341 9254 1434 8640 10860 1436 9585 Melbourne 9093 10388 7392 8862 16902 0 13557 16730 14418 10192 16671 16793 13227 15987 12644 6050 15593 8159 Mexico City 12478 13703 14155 6098 8947 13557 0 3728 10740 14679 3362 9213 7669 10260 3038 16623 9603 11319 Montreal 10490 12744 12462 7915 5240 16730 3728 0 7077 11286 533 5522 8175 6601 4092 14816 5900 10409 Moscow 5809 10101 7158 11342 2506 14418 10740 7077 0 4349 7530 2492 11529 2378 9469 8426 1231 7502 New Delhi 2788 9284 3770 11930 6724 10192 14679 11286 4349 0 11779 6601 14080 5929 12380 4142 5579 5857 New York 11012 12551 12984 7996 5586 16671 3362 533 7530 11779 0 5851 7729 6907 4140 15349 6336 10870 Paris 8236 9307 9650 11988 341 16793 9213 5522 2492 6601 5851 0 9146 1108 8975 10743 1546 9738 Rio 17325 6075 17710 13343 9254 13227 7669 8175 11529 14080 7729 9146 0 9181 10647 15740 10682 18557 Rome 8144 8417 9300 12936 1434 15987 10260 6601 2378 5929 6907 1108 9181 0 10071 10030 1977 9881 S.F. 9524 16487 11121 3857 8640 12644 3038 4092 9469 12380 4140 8975 10647 10071 0 13598 8644 8284 Singapore 4465 9671 2575 10824 10860 6050 16623 14816 8426 4142 15349 10743 15740 10030 13598 0 9646 5317 Stockholm 6725 10334 8243 11059 1436 15593 9603 5900 1231 5579 6336 1546 10682 1977 8644 9646 0 8193 Tokyo 2104 14737 2893 6208 9585 8159 11319 10409 7502 5857 10870 9738 18557 9881 8284 5317 8193 0 The three-dimensional visualization result of classical MDS is shown above. You can rotate and magnify it on your laptop. The blue points represent Asian cities, the black points represent European cities, and the red points represent North American cities. If you inspect the plot clearly, you may notice that the cities appear to be constrained to the surface of a sphere, which complies to the true scenario. In each of the examples, classical MDS was quite successful in generating maps which reflected the geographical configuration with continental or global maps which were (after some reflections/rotations) consistent with conventional maps. Let’s discuss the details. 4.4.1 Key features of MDS MDS can be divided into three major types: Classical Scaling; Metric MDS; and Non-Metric MDS. The choice of method depends on the specifics of the distance/dissimilarity matrix and features which are preferential to preserve. Classical Scaling and Metric MDS require that the provided distances correspond to a metric (more on this below), while Non-metric MDS is usually used when the input data doesn’t satisfy the properties of a true distance metric or when the relationships are ordinal (i.e., we only know which distances are larger, but not by how much). Beyond demonstrating the capacity of MDS to recover meaningful visualization, we also gain two insights from the examples above which hold for any MDS algorithm. As we can tell from the recovery of US map and European map, the configurations of \\(\\tilde{y}_1, \\tilde{y}_2, \\dots, \\tilde{y}_N\\) are not unique, as we can rotate or flip the map. Actually, if \\(\\tilde{y}_1, \\tilde{y}_2, \\dots, \\tilde{y}_N \\in \\mathbb{R}^{t^{\\prime}}\\) is considered as the optimal solution using Euclidean distance, then given any vector \\(\\vec{b} \\in \\mathbb{R}^{t^{\\prime}}\\) and orthogonal matrix \\(A \\in \\mathbb{R}^{t^{\\prime} \\times t^{\\prime}}\\), \\(||(A \\tilde{y}_r + \\vec{b} - (A \\tilde{y}_s + \\vec{b})|| = ||\\tilde{y}_r - \\tilde{y}_s||\\). Rotation, Reflection or Translation don’t alter the pairwise distances. So \\(A \\tilde{y}_1 + \\vec{b}, A \\tilde{y}_2 + \\vec{b}, \\dots, A \\tilde{y}_N + \\vec{b}\\) is also an optimal solution. Outside of Euclidean distances, reflections are still possible which eliminate the possibility of unique configurations. The pairwise distance between two objects need not be Euclidean. In the above example, they are actually great circle distance. In the following subsections, we will discuss the specifics of classical scaling with a brief discussion on two common methods of MDS, one each in metric and nonmetric MDS. 4.4.2 Classical Scaling Let us first introduce some important definitions. Definition 4.3 (Distance Matrix) A matrix \\(\\Delta \\in \\mathbb{R}^{N \\times N}\\) is called a distance matrix if it possesses the following properties: Symmetry: \\(\\Delta\\) is symmetric, meaning that: \\(\\Delta_{rs} = \\Delta_{sr} \\quad \\text{for all } r \\text{ and } s\\) Zero Diagonal: The diagonal entries of the matrix represent the distance of a point to itself, and are thus all zeros: \\(\\Delta_{rr} \\equiv 0 \\quad \\text{for all } 1 \\leq r \\leq N\\) Non-negativity: All distances are non-negative: \\(\\Delta_{rs} \\geq 0\\) Triangle Inequality: The distances in the matrix respect the triangle inequality: \\[\\Delta_{rs} \\leq \\Delta_{rt} + \\Delta_{ts}\\] Distance matrices can be computed in many different ways. We will focus on the following specific case. Definition 4.4 (Euclidean Distance Matrix) A distance matrix \\(\\Delta \\in \\mathbb{R}^{N \\times N}\\) is a Euclidean distance matrix if there exists a configuration \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N\\) s.t. \\(\\Delta_{rs}\\) represents the Euclidean distance between points \\(r\\) and \\(s\\), i.e., \\(||\\vec{y}_r-\\vec{y}_s||=\\Delta_{rs} \\forall r,s\\). Classical scaling operates under the assumption that \\(\\Delta\\) is a Euclidean distance matrix though the dimensionality of the configuration \\(\\vec{y}_1,\\dots,\\vec{y}_N\\) which gives rise to the distances specified by \\(\\Delta\\) is unknown. As we shall see, the minimum dimensionality needed for the configuration to give the specified distances (assuming it exists at all) will be discovered through the classical scaling algorthm. Furthermore, since we are free to translate any configuration without altering pairwise distance, we will seek a configuration \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N\\) which is centered to simplify the following computation. The rotation of the configuration will also be given so that an optimal solution in \\(k-1\\) dimensions can be attained by dropping the final coordinate in the \\(k\\) dimensional configuration. 4.4.2.1 Recovering Coordinates After some preprocessing, finding a centered configuration \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N\\) from the Euclidean distance matrix \\(\\Delta\\) is possible through some of the linear algebra techniques we have discussed so far. Observe that \\(\\Delta^2_{rs}\\) can be expressed as \\[\\Delta^2_{rs} = ||\\vec{y}_r||^2 + ||\\vec{y}_s||^2 - 2 \\vec{y}_r^T \\vec{y}_s\\] so that \\[\\vec{y}_r^T\\vec{y}_s = -\\frac{1}{2}\\left(\\Delta_{rs} - \\|\\vec{y}_r\\|^2 - \\|\\vec{y}_s\\|^2 \\right).\\] We will use this relationship to build an inner product matrix \\({\\bf B}\\) with entries \\({\\bf B}_{rs} = \\vec{y}_r^T\\vec{y}_s\\). In matrix form, we may write \\[{\\bf B} = {\\bf Y Y}^T\\], where \\({\\bf Y}\\) is a data matrix containing the configuration \\(\\vec{y}_1,\\dots,\\vec{y}_N\\) with Euclidean distances \\(\\Delta\\). 1) Computing the inner product matrix \\(B\\) The inner product term can be represented as: \\(B_{ij} = \\vec{y}_i^T \\vec{y}_j\\). As a result, \\[(\\Delta_{ij})^2 = B_{ii} + B_{jj} - 2 B_{ij}.\\] Key Observation In the previous line, we express the entries of \\(\\Delta\\) (known) with entries of \\(B\\) (unknown). Our goal is to find a way to express entries of \\(B\\) (unknown) with entries of \\(\\Delta\\). Intuitively, we want to cancel out \\(B_{ij}\\) terms in the expression. Considering that \\(\\sum_{i=1}^N \\vec{y}_i = \\vec{0}\\), we sum both sides of the equation over the index \\(i\\). We can get the following expression: \\[\\sum_{i=1}^N (\\Delta_{ij})^2=\\operatorname{tr}(B) + N B_{ii}\\] Similarly, we can also sum both sides of the equation over index \\(j\\), and get the expression: \\[\\sum_{j=1}^N (\\Delta_{ij})^2=\\operatorname{tr}(B) + N B_{jj}\\] We successfully eliminate all the off-diagonal terms of \\(B\\) through the above steps. Now, we want to take a step further. Sum both sides of the equations over both indexes \\(i\\) and \\(j\\). We acquire the following expression: \\[\\sum_{i=1}^N \\sum_{j=1}^N (\\Delta_{ij})^2 = 2N \\operatorname{tr}(B)\\] Now we can solve the entries of \\(\\Delta\\) using the entries of \\(B\\) through a backward calculation. From the last equation, we get \\[\\operatorname{tr}(B) = \\frac{1}{2N} \\sum_{i=1}^N \\sum_{j=1}^N \\Delta_{ij}^2\\] Then substitute the above expression into above formulas, we get the expression of the diagonal entries of \\(B\\): \\[B_{ii} = \\frac{1}{N} (\\sum_{j=1}^{N} (\\Delta_{ij})^2 - \\operatorname{tr} (B))\\] After that, we can finally get the off-diagonal entries of \\(B\\): \\[\\begin{aligned} B_{ij} &amp; = \\frac{1}{2} (B_{ii} + B_{jj} - (\\Delta_{ij})^2) \\\\ &amp; = -\\frac{1}{2} (\\Delta_{ij})^2 + \\frac{1}{N} \\sum_{i=1}^N (\\Delta_{ij})^2 + \\frac{1}{N} \\sum_{j=1}^N (\\Delta_{ij})^2-\\frac{1}{2 N^2} \\sum_{i=1}^N \\sum_{j=1}^N (\\Delta_{ij})^2 \\end{aligned}\\] We may more compactly express the inner product matrix \\(B\\) in a matrix form, as \\[B = HAH\\] where \\(A \\in \\mathbb{R}^{N \\times N}\\) has entries \\(A_{ij} = -\\frac{1}{2}(\\Delta_{ij}) \\quad \\text{for} \\; \\forall \\; 1 \\leq i,j \\leq N\\) and \\(H\\) is the centering matrix \\[H = \\mathbb{I}_N - \\frac{1}{N} \\mathbb{1}_N \\mathbb{1}_N^T\\]. 2) Recover the coordinates using inner product matrix \\(B\\) Both diagonal and off-diagonal entries of the inner product matrix \\(B\\) has been shown. We assumed that \\(B\\) = \\(YY^T\\), so \\(B\\) is symmetric and positive semi-definite (all eigenvalues are non-negative). Assuming \\(B\\) is rank \\(t\\) implies that it has \\(t\\) positive eigenvalues and \\(N-t\\) ‘zero’ eigenvalues. Our intuition is to apply SVD/diagonalization to \\(B\\) in order to recover the configuration \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N \\in \\mathbb{R}^t\\) by computing the nonzero eigenvalues and corresponding eigenvectors giving the factorization. \\[\\begin{align} B &amp; = \\left(\\vec{u}_1\\left|\\vec{u}_2\\right| \\ldots \\mid \\vec{u}_t\\right) \\begin{pmatrix} \\lambda_1 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; \\cdots &amp; \\lambda_t \\end{pmatrix} \\left(\\begin{array}{c} \\vec{u}_1^{\\top} \\\\ \\vec{u}_2^{\\top} \\\\ \\vdots \\\\ \\vec{u}_t^{\\top} \\end{array}\\right) \\\\ &amp; = \\tilde{U} \\begin{pmatrix} \\lambda^{1/2}_1 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; \\cdots &amp; \\lambda^{1/2}_t \\end{pmatrix} \\begin{pmatrix} \\lambda^{1/2}_1 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; \\cdots &amp; \\lambda^{1/2}_t \\end{pmatrix} \\tilde{U}^T \\\\ &amp; = (\\tilde{U} \\Lambda^{1/2}) (\\tilde{U} \\Lambda^{1/2})^T \\end{align}\\] Let \\(Y=\\tilde{U} \\Lambda^{1/2}\\), so that rows of \\(\\tilde{U} \\Lambda^{1/2}\\) correspond to the vectors \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N\\). It satisfies every entry of the inner product matrix \\(B\\), as well as all pairwise distances \\(\\Delta_{ij}\\)! Importantly, the rank of \\(B\\) immediately indicates the minimal dimension needed to recover a configuration which exactly recovers the Euclidean distances in \\(\\Delta.\\) For visualization, we may prefer a lower dimensional configuration than the dimensionality \\(t\\) discovered through classical scaling. For a \\(k &lt; t\\) dimensional configuration, we instead use the first \\(k\\) columns of \\(\\tilde{U}\\Lambda^{1/2}\\) as a our \\(k\\)-dimensional vectors. Outside of optimal recovery, we may instead formulate the classical scaling problem in \\(k\\)-dimensions as the following minimization problem. \\[\\mathop{\\mathrm{arg\\,min}}_{Y \\in \\mathbb{R}^{N\\times k}} \\| B - YY^T\\|_F\\] from which it follows that \\(YY^T\\) is built from the rank \\(k\\) approximation to \\(B\\). Using the results from SVD and the equivalence of SVD and eigendecompositions for symmetric positive, semidefinite matrices, this is equivalent to using the first \\(k\\) columns of \\(\\tilde{U}\\Lambda^{1/2}\\). Dealing with real data case For a given distance matrix, the Euclidean condition may not hold. In the previous globe map example, the distance matrix is based on the geodesic distance instead of the Euclidean distance. Under this circumstance, the “inner product” matrix \\(B = HAH\\) is still symmetric but will not be positive definite. As a simpler example, consider the following case Example 4.4 (Non Euclidean Distances) Suppose we have a distance matrix \\(\\Delta\\): Given the matrix: \\[ \\Delta = \\begin{pmatrix} 0 &amp; 1 &amp; 1 &amp; 2 \\\\ 1 &amp; 0 &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 0 &amp; 1 \\\\ 2 &amp; 1 &amp; 1&amp; 0 \\end{pmatrix} \\] ## [,1] [,2] [,3] [,4] ## [1,] 0 1 1 2 ## [2,] 1 1 0 1 ## [3,] 1 1 0 1 ## [4,] 2 1 1 0 Compute matrix \\(A\\) as: \\[ A = -\\frac{1}{2} \\Delta^2 \\] ## [,1] [,2] [,3] [,4] ## [1,] 0.0 -0.5 -0.5 -2.0 ## [2,] -0.5 -0.5 0.0 -0.5 ## [3,] -0.5 -0.5 0.0 -0.5 ## [4,] -2.0 -0.5 -0.5 0.0 Compute matrix \\(B\\) using: \\[ H = I - \\frac{1}{n} \\mathbf{11}^T \\] Where \\(I\\) is the identity matrix and \\(n\\) is the number of rows (or columns) in \\(\\Delta\\). Then: \\[ B = H A H \\] ## [,1] [,2] [,3] [,4] ## [1,] 0.9375 0.1875 -0.0625 -1.0625 ## [2,] 0.0625 -0.1875 0.0625 0.0625 ## [3,] 0.0625 -0.1875 0.0625 0.0625 ## [4,] -1.0625 0.1875 -0.0625 0.9375 Finally, perform an eigen-decomposition on matrix \\(B\\) which gives eigenvalues. ## [1] 2.00 -0.25 0.00 0.00 Here, we have a negative eigenvalue \\(-\\frac{1}{4}\\). This indicates the original distance matrix \\(\\Delta\\) is not a Euclidean distance matrix; there is no Euclidean space containing four vectors with the given pairwise distances!! Other practical issues Asymmetric \\(\\Delta\\): There are cases where the distance matrix \\(\\Delta\\) is not symmetric. In this case, we usually set \\(\\Delta \\leftarrow \\frac{1}{2}(\\Delta + \\Delta^T)\\) to enforce symmetry. When there exist some negative eigenvalues in the inner product matrix \\(B\\), we usually have two options to deal with it. Inflate the original proximity matrix \\(\\Delta\\) by a small constant factor \\(c\\), i.e., \\(\\Delta_{ij} \\leftarrow \\Delta_{ij} + c, \\; \\text{if} \\; i \\neq j\\) until \\(B\\) is positive semidefinite. If there exist several negative eigenvalues with small absolute value (compared to the largest several positive eigenvalues), and there are more positive eigenvalues than our prior estimation (the dimension of the original configuration), we may just pick the largest \\(t\\) eigenvalues and eliminate the rest. Example 4.5 (Global Cities Revisited) We can also consider the previous global city distance matrix example. Plot the scree plot of the inner product matrix. We find that the first three eigenvalues are much larger than the rest, so we assume that the dimension of the original configuration is 3, which also complies to our knowledge about global map. 4.4.2.2 Duality of PCA and Classical Scaling You may have already observed that Classical Scaling is actually equivalent to PCA to some extent. Cox states that “there is a duality between a principals components analysis and classical MDS where dissimilarities are given by Euclidean distance”[9]. In particular, this duality arises when the distance matrix is generated by computing Euclidean distances of vectors \\(\\vec{x}_1,\\dots,\\vec{x}_N\\). Given the matrix expression of the original configuration \\(\\mathbf{X} \\in \\mathbb{R}^{N \\times d}\\). Recall that PCA is attained by finding the eigen-vectors of the covariance matrix \\(\\frac{1}{N-1} (HX)^T (HX)\\), where \\(H\\) is the centering matrix. Suppose the \\(k\\) eigen-vectors are \\(\\vec{w}_1, \\vec{w}_2, \\dots, \\vec{w}_k\\), and the corresponding eigenvalues are \\(\\mu_1, \\mu_2, \\dots,\\mu_k\\). Then \\(HX=YW^T\\), where \\(W=(\\vec{w}_1 | \\vec{w}_2 | \\dots | \\vec{w}_N)\\) represents PC Loadings, and \\(Y\\) represents PC Scores. While MDS is attained by first converting \\(X\\) into distance matrix, here, Euclidean distance. In the classical MDS algorithm, the process of converting the Euclidean distance matrix into the inner product matrix gives \\(B=(HX)(HX)^T\\). then we find the eigenvectors of \\(B\\) which are equivalent to the left singular vectors of \\(HX\\) and with nonzero eigenvalues \\(\\lambda_1, \\lambda_2, \\dots, \\lambda_d\\) which are the squared singular values of \\(HX\\). Recall what you have learned in Linear Algebra. The eigenvalues of \\(HX(HX)^T\\) are the same as those for \\(X^TX\\), together with an extra n-p zero eigenvalues. So the first \\(t\\) PC scores give the t-dimensional configuration for Classical Scaling. Choosing the number of dimensionality \\(t\\) of the original configuration is equivalent to choosing the number of principal components to keep. Furthermore, we have shown that \\(HX=YW^T\\), then \\(B=(HX)(HX)^T=YW^TWY^T=YY^T\\), this means PC scores are the exact solutions for Classical Scaling! As a result, classical MDS has the same strengths and weaknesses of PCA. 4.4.3 Metric MDS Metric MDS is a set of algorithms which seek optimal configuration which minimize a specified loss function. Typically, this loss function is called the stress which has the general form \\[S(\\vec{y}_1,\\dots,\\vec{y}_N) = \\sum_{i &lt; j} W_{ij} \\left(\\|\\vec{y}_i-\\vec{y}_j\\|^2 - \\Delta_{ij}\\right)^2 = \\frac{1}{2}\\sum_{i\\ne j} W_{ij}\\left(\\|\\vec{y}_i-\\vec{y}_j\\|^2 - \\Delta_{ij}\\right)^2\\] where the weights \\(W_{ij}\\ge 0\\) have different conventions which prioritize the preservation of certain distances in the original coordinates. Heuristically, you can think of \\(\\left(\\|\\vec{y}_i-\\vec{y}_j\\|^2 - \\Delta_{ij}\\right)^2\\) as measuring how far the lower-dimensional Euclidean distances \\(\\|\\vec{y}_i-\\vec{y}_j\\|\\) deviate from the specified original distance \\(\\Delta_{ij}\\). Importantly, there is no closed form expression for \\(\\vec{y}_1,\\dots,\\vec{y}_N\\) which minimize \\(S\\) so gradient based optimization methods are typically used in practice. When the desired dimension is unknown, one can estimate different \\(\\vec{y}_1,\\dots,\\vec{y}_N\\) in different dimensions and compare the optimal stress as a data driven method for choosing the dimensionality. A important method of metric MDS is the Sammon mapping which takes \\(W_{ij} \\propto \\frac{1}{\\Delta_{ij}}\\). Thus, if \\(\\Delta_{ij} \\gg \\Delta_{k\\ell}\\) it follows that \\(W_{ij} \\ll W_{k\\ell}\\) and we may infer that the Sammon mapping places a greater emphasis on the preservation of small distances! Briefly, we show the results of the Sammon mapping applied to the global cities data. Example 4.6 (Sammon mapping and global cities) First, we show the minimal Sammon stress at each dimension. Figure 4.5: Sammon stress for Global Cities Data ## A marker object has been specified, but markers is not in the mode ## Adding markers to the mode... This stress saturates near a small value for dimensions three and up suggesting a three dimensional configuration is suitable. We show this result below. Note its similarities to the result of classical scaling (which is default initialization for the Sammon mapping optimization algorithm). 4.4.4 Nonmetric MDS To be added in the next edition. References "],["exercises-2.html", "4.5 Exercises", " 4.5 Exercises Show that the PCA scores are centered. Suppose a data matrix \\({\\bf X}\\in\\mathbb{R}^{N\\times d}\\) has principal component scores \\({\\bf Y}\\in\\mathbb{R}^{N\\times d}\\), principal component loading matrix \\({\\bf W}\\in\\mathbb{R}^{d\\times d}\\), and principal component variances \\(\\lambda_1,\\dots,\\lambda_d\\). Show that the sample covariance of the PCA scores, \\({\\bf Y}\\), is diagonal. Consider the data matrix \\[{\\bf X} = \\begin{bmatrix} 2 &amp; 3 \\\\ 4 &amp; 5\\\\ 6&amp; 7 \\\\ 8 &amp; 9 \\end{bmatrix}.\\] Compute the principal component scores, variances, and loadings of \\({\\bf X}.\\) Does \\({\\bf X}\\) exhibit lower dimensional structure? If so, describe it. Given a dataset with outliers: \\[ \\mathbf{X} = \\begin{bmatrix} 1 &amp; 2 \\\\ 2 &amp; 4 \\\\ 3 &amp; 6 \\\\ 4 &amp; 8 \\\\ 100 &amp; 200 \\end{bmatrix} \\] Center the data. Compute the covariance matrix. Perform PCA and identify the principal component scores, loadings, and variances. Discuss how outliers affect PCA and suggest ways to handle them. Consider a dataset: \\[ \\mathbf{X} = \\begin{bmatrix} 1 &amp; 100 \\\\ 2 &amp; 200 \\\\ 3 &amp; 300 \\\\ 4 &amp; 400 \\end{bmatrix} \\] Center the data. Compute the covariance matrix. Perform PCA and find the principal components. Discuss the importance of feature scaling in PCA. Given a nonlinear dataset: \\[\\mathbf{X} = \\begin{bmatrix} 1 &amp; 1 \\\\ 2 &amp; 4 \\\\ 3 &amp; 9 \\\\ 4 &amp; 16 \\\\ 5 &amp; 25 \\end{bmatrix}\\] Center the data. Compute the covariance matrix. Perform PCA and identify the principal components. Discuss the limitations of PCA for nonlinear datasets and suggest alternative methods. Load the Iris dataset and standardize the features. Perform PCA on the standardized data. Plot the cumulative explained variance as a function of the number of principal components. Choose the number of principal components that explain at least 95% of the variance. Project the data onto the chosen principal components and visualize the results. Discuss the results and the effectiveness of PCA in reducing the dimensionality of the dataset. Suppose \\[\\vec{x}=(x_1,x_2)^T \\sim \\mathcal{N}\\left(\\begin{bmatrix} 0\\\\ 0\\end{bmatrix}, \\begin{bmatrix}1 &amp; \\rho \\\\ \\rho &amp; 1\\end{bmatrix}\\right),\\] i.e. random vector \\(\\vec{x}\\) follows a multivariate normal distribution with mean \\(\\vec{0}\\) and covariance \\(\\Sigma_X = \\begin{bmatrix}1 &amp; \\rho \\\\ \\rho &amp; 1\\end{bmatrix}\\). Let \\(w = \\frac{\\sqrt{2}}{2}(x_1+x_2)\\) and \\(z = \\frac{\\sqrt{2}}{2}(x_1-x_2).\\) Find the joint distribution of \\((w,z)^T\\). Hint: linear combinations of normal random variables are also normal. Consider a data matrix \\(X \\in \\mathbb{R}^{N\\times d}\\) with centered columns so that the sample covariance matrix is \\[\\hat{\\Sigma} = \\frac{X^TX}{N}.\\] Assume \\(\\hat{\\Sigma}\\) has eigenvalues \\(\\lambda_1 &gt; \\lambda_2 &gt;\\dots &gt; \\lambda_d &gt;0\\) with orthonormal eigenvectors \\(\\vec{w_1},\\dots,\\vec{w}_d.\\) If \\(X^{(1)} = X - X\\vec{w}_1\\vec{w}_1^T\\) is the data matrix where each row has had its component in the direction of \\(\\vec{w}_1\\) removed, show that \\[\\hat{\\Sigma}^{(1)} = \\frac{{X^{(1)}}^T X^{(1)}}{N} = \\hat{\\Sigma} - \\lambda_1 \\vec{w}_1\\vec{w}_1^T.\\] Show that \\(\\hat{\\Sigma}\\) can be written in the form \\(\\hat{\\Sigma} = \\sum_{j=1}^d \\lambda_j \\vec{w}_j\\vec{w}_j^T.\\) For \\(k &lt; d\\), let \\(\\vec{q}_1,\\dots,\\vec{q}_k\\in\\mathbb{R}^d\\) be fixed orthonormal vectors. Suppose \\(a_1,\\dots,a_k\\) are independent Gaussian random variables with mean zero and variances \\(\\lambda_1&gt;\\dots&gt;\\lambda_k\\) respectively. Let \\[\\vec{x} = a_1\\vec{q}_1+\\dots+a_k+\\vec{q}_k + \\vec{\\epsilon}\\] where \\(\\vec{\\epsilon}\\sim\\mathcal{N}(\\vec{0},\\sigma^2{\\bf I})\\) is independent of \\(a_1,\\dots,a_k\\) Find the mean and covariance of \\({\\bf X}\\). Find the eigenvalues and eigenvectors of \\({\\bf \\Sigma}\\). For \\(d = 10\\) and $k=3 and let \\(\\lambda_1 = 25,\\, \\lambda_2 = 9,\\,\\lambda_3 = 4\\) and \\(\\sigma^2=1\\). Generate 100 independent realizations of \\(\\vec{x}\\) and compute the principal component loadings and variances. How do these compare to your results from b. Repeat c. for \\(10^4\\) samples. How have the results changed? Let \\(\\vec{x}_1,\\dots,\\vec{x}_N\\) be vectors in \\(\\mathbb{R}^d\\). Assume a PCA of these data has loadings \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) with associated variances \\(\\lambda_1 \\ge \\dots \\ge \\lambda_d \\ge 0.\\) Let \\(U\\) be a \\(d\\times d\\) orthonormal matrix and set \\(\\vec{y}_i = U\\vec{x}_i.\\) Find expressions for the principal component loadings and variance of \\(\\vec{y}_1,\\dots,\\vec{y}_N\\) in terms of \\(U\\), \\(\\vec{w}_1,\\dots,\\vec{w}_d\\) and \\(\\lambda_1,\\dots,\\lambda_d.\\) Load the mtcar dataset containing 11 observations from 32 cars. Show the principal component loadings and a biplot of the first and second PC components. Rescale the mpg (miles per gallon) data to feet per gallon, i.e. mtcars$mpg &lt;- 5280mtcars$mpg.* Rerun PCA on these modified data and show the loadings and biplot. What is the first loading capturing? Explain this result. Rerun the results using the empirical correlation matrix by setting the option scale = TRUE in the prcomp command. Compare this result with part (a) Consider the helix data shown below from two different directions. Figure 4.6: Helix data What is the dimension of the shape formed by these data? Compute the three principal component variances and show them below. Do the principal component variances reflect the dimension of the data? Why or why not? Consider a dataset with three features: \\[ \\mathbf{X} = \\begin{bmatrix} 2 &amp; 0 &amp; 1 \\\\ 3 &amp; 2 &amp; 2 \\\\ 4 &amp; 4 &amp; 3 \\\\ 5 &amp; 6 &amp; 4 \\\\ 6 &amp; 8 &amp; 5 \\end{bmatrix}\\] Center the data by subtracting the mean of each feature. Compute the covariance matrix of the centered data. Find the eigenvalues and eigenvectors of the covariance matrix. Project the data onto the first two principal components. Visualize the original data and the projected data in a 2D plot. Discuss how PCA can help in reducing the dimensionality of the data while preserving important information. The dataset simplex10 contains samples generated from the probability simplex in \\(\\mathbb{R}^{10}\\). (This means all entries nonnegative and each random vector has entries which sum to one.) Run PCA, SVD, and NMF on these data and compare the results. In particular, what lower dimensional structure, if any, do these methods indicate? Why do the results differ? Show that the Frobenius norm of a matrix is the square of the sum of its squared singular values. You may use the helpful identity \\(\\|{\\bf A}\\|_F^2 = tr({\\bf AA}^T)}\\) Given a non-negative matrix: \\[\\mathbf{X} = \\begin{bmatrix} 5 &amp; 4 &amp; 2 \\\\ 4 &amp; 5 &amp; 3 \\\\ 2 &amp; 3 &amp; 5 \\end{bmatrix}\\] Factorize \\(\\mathbf{V}\\) with different ranks (e.g., \\(r = 1\\), \\(r = 2\\), and \\(r = 3\\)). Discuss how to choose the appropriate rank for NMF in practice. "],["kernels-and-nonlinearity.html", "Chapter 5 Kernels and Nonlinearity", " Chapter 5 Kernels and Nonlinearity The techniques considered in the previous chapter (PCA, NMF, SVD, and classical Scaling) are ill suited to identify nonlinear structure and dependence in data. If we wish to most efficiently reduce dimensions without loss of information, we will need techniques which incorporate nonlinear structure. One can expand a data matrix by including specific nonlinear relationships then apply PCA or SVD but there are numerous problems with this approach. In particular, which relationships does one choose to include? Even including simple quadratic or cubic terms (features) can result in a data matrix with a massive increase in the number of columns. Even when the original dimensionality of the data is moderate, the including of polynomial terms can quickly result in a data matrix of nonlinear features with an untenable number of columns which can make application of the linear methods we have discussed much more computationally demanding to implement. Kernels are a important class of functions which can be used to kernelize the methods we have discussed before. In theory, these kernelized versions of the linear methods we have discussed can identify and use nonlinear structure for better dimensionality reduction while circumventing the issue of higher dimensional featurized data. This approach follows from an application of the so called ’kernel trick` which we now discuss. Briefly, a kernel is a function \\[k:\\mathbb{R}^d\\times \\mathbb{R}^d \\to \\mathbb{R}\\] which has an associated feature space, \\(\\mathcal{H}\\) and (implicity defined, possibly nonlinear) feature mapping \\(\\varphi:\\mathcal{R}^d \\to \\mathcal{H}\\) such that inner products in the feature space, denoted \\(\\langle \\varphi(\\vec{x}), \\varphi(\\vec{y})\\rangle_{\\mathcal{H}}\\) can be obtained through an evaluation of the kernel, namely \\[\\begin{equation} k(\\vec{x},\\vec{y}) = \\langle \\varphi(\\vec{x}), \\varphi(\\vec{y})\\rangle_{\\mathcal{H}} \\end{equation}\\] Any method which can be expressed involving inner products can be kernelized by replacing terms of the form \\(\\vec{x}^T_i\\vec{x}_j\\) with the quantity \\(k(\\vec{x}_i,\\vec{x}_j)\\). Thus, we are replacing inner products of our original \\(d\\)-dimensional data with inner products in the associated feature space \\(\\mathcal{H}\\). Importantly, if we only need inner products, we never need to explicitly compute the feature map \\(\\varphi\\) for any of our data! At first glance this connection may seem minor, but by using kernels we can turn many linear techniques into nonlinear methods including PCA, SVD, support vector machines, linear regression, and many others. There are some limits though. Not every choice of \\(k\\) has an associated feature space. A function is only a kernel if it satisfies Mercer’s Condition. Theorem 5.1 (Mercer's Condition) A function \\[k:\\mathbb{R}^d\\times \\mathbb{R}^d \\to \\mathbb{R}\\] has a an associated feature space \\(\\mathcal{H}\\) and feature mapping \\(\\varphi:\\mathbb{R}^d \\to \\mathcal{H}\\) such that \\[k(\\vec{x},\\vec{y}) = \\langle \\varphi(\\vec{x}), \\varphi(\\vec{y})\\rangle_{\\mathcal{H}}, \\qquad \\forall \\vec{x},\\vec{y}\\in\\mathbb{R}^d\\] if and only if for any \\(N \\in \\{1,2,\\dots\\}\\) and \\(\\vec{x}_1,\\dots,\\vec{x}_N\\in\\mathbb{R}^d\\) the kernel matrix \\({\\bf K}\\in \\mathbb{R}^{N}\\) with entries \\({\\bf K}_{ij} = k(\\vec{x}_i,\\vec{x}_j)\\) is positive semidefinite. Equivalently, it must be the case that \\[\\int_{\\mathbb{R}^d}\\int_{\\mathbb{R}^d} g(\\vec{x})g(\\vec{y}) k(\\vec{x},\\vec{y}) d\\vec{x}d\\vec{y} \\ge 0\\] whenever \\(\\int_{\\mathbb{R}^2}[g(\\vec{x})]d\\vec{x}&lt;\\infty.\\) We will only consider symmetric functions such that \\(k(\\vec{x},\\vec{y}) = k(\\vec{y},\\vec{x})\\) for all \\(\\vec{x},\\vec{y}\\in\\mathbb{R}^d\\). It may not be immediately obvious if a symmetric function satisfies Mercer’s condition, but there are many known examples. A few are shown in the following table. Name Equation Tuning Parameters Radial Basis Function \\(k(\\vec{x},\\vec{y} = \\exp\\left(-\\sigma\\|\\vec{x}-\\vec{y}\\|^2\\right)\\) Scale \\(\\sigma &gt;0\\) Laplace \\(k(\\vec{x},\\vec{y} = \\exp\\left(-\\sigma\\|\\vec{x}-\\vec{y}\\|\\right)\\) Scale \\(\\sigma &gt;0\\) Polynomial \\(k(\\vec{x},\\vec{y}) = (c+ \\vec{x}^T\\vec{y})^d\\) Offset \\(c &gt;0\\), Degree \\(d \\in \\mathbb{N}\\) The radial basis function (rbf) is the most commonly used kernel and has an associated feature space \\(\\mathcal{H}\\) which is infinite dimensional! The associated feature map \\(\\varphi\\) for the rbf kernel is \\[\\varphi(\\vec{x}) = e^{-\\sigma\\|\\vec{x}\\|^2}\\left(a_{\\ell_0}^{(0)}, a_{1}^{(1)},\\dots,a_{\\ell_1}^{(1)}, a_{1}^{(2)},\\dots, a_{\\ell_2}^{(2)},\\dots \\right)\\] where \\(\\ell_j = \\binom{d+j-1}{j}\\) and \\(a_\\ell^{(j)} = \\frac{(2\\sigma)^{j/2}x_1^{\\eta_1}\\dots x^{\\eta_d}}{\\sqrt{\\eta_1!\\dots\\eta_d!}}\\) when \\(\\eta_1+\\dots+\\eta_d = j.\\) The preceding expression is quite cumbersome, but there is one important point to emphasize. Every possible polynomial combination of the coordinates of \\(\\vec{x}\\) appears in some coordinate of \\(\\varphi(\\vec{x})\\) (though higher order terms are shrunk by the factorial factors in the denominator of \\(a_\\ell^{(j)}\\)). Thus, the rbf kernel is associated with a very expressive feature space which makes it a potent but dangerous choice since risks overfitting. To explore these details more, let’s discuss one very important application of kernels in unsupervised learning. "],["kernel-pca.html", "5.1 Kernel PCA", " 5.1 Kernel PCA Suppose we have a kernel \\(k\\) and associated feature map \\(\\varphi\\). In kernel PCA, we want to apply to PCA to the featurized data \\(\\varphi(\\vec{x}_1),\\dots,\\varphi(\\vec{x}_N)\\) rather than the original data. The idea is that by studying the featurized data, we can identify additional nonlinear structure in the features that provides a better lower-dimensional representation of the data. We have discussed three approaches to computing PC scores to data: (i) diagonalization of the sample covariance, (ii) applying SVD to the centered data, and (iii) using the duality of PCA and classical scaling. For the rbf kernel and its infinite dimensional feature map, approaches (i) and (ii) are impossible. Why? The centered data matrix of features \\[{\\bf H}\\tilde{\\bf X} = {\\bf H}\\begin{bmatrix} \\varphi(\\vec{x}_1)^T \\\\ \\vdots \\\\ \\varphi(\\vec{x}_N)^T\\end{bmatrix} =\\begin{bmatrix} \\varphi(\\vec{x}_1)^T-\\bar{\\varphi}^T \\\\ \\vdots \\\\ \\varphi(\\vec{x}_N)^T-\\bar{\\varphi}^T\\end{bmatrix} \\] has a infinite number of columns so that we cannot compute its SVD. In the above expression, \\(\\bar{\\varphi} = \\frac{1}{N} \\sum_{i=1}^N \\varphi(\\vec{x}_i)\\) is the mean for the feature vectors. The associated sample covariance matrix \\[{\\bf \\Sigma}_F = \\frac{1}{N} \\tilde{\\bf X}{\\bf H}\\tilde{\\bf X } = \\frac{1}{N} \\sum_{i=1}^N \\left(\\varphi(\\vec{x}_i) - \\bar{\\varphi}\\right)\\left(\\varphi(\\vec{x}_i) - \\bar{\\varphi}\\right)^T\\] will have an infinite number of rows and columns so we cannot hope to diagonalize it either. Fortunately, the third option, using duality of classical scaling and PC, provides a workaround. Observe that the inner product matrix of the centered feature data \\({\\bf H}\\tilde{\\bf X} ({\\bf H}\\tilde{\\bf X})^T\\) can be written in terms of the kernel since \\[{\\bf H}\\tilde{\\bf X} ({\\bf H}\\tilde{\\bf X})^T = {\\bf H} \\begin{bmatrix} \\varphi(\\vec{x}_1)^T \\\\ \\vdots \\\\ \\varphi(\\vec{x}_N)^T\\end{bmatrix} \\begin{bmatrix} \\varphi(\\vec{x}_1) &amp; \\dots &amp; \\varphi(\\vec{x}_N)\\end{bmatrix} {\\bf H} = {\\bf H K H}\\] where \\({\\bf K}\\) has the inner products in the feature space which we can calculate using the kernel function \\[{\\bf K}_{ij} = \\varphi(\\vec{x}_i)^T\\varphi(\\vec{x}_j) = k(\\vec{x}_i,\\vec{x}_j).\\] Since \\(k\\) is a symmetric kernel, it follows that \\({\\bf K}\\) is positive semidefinite. Using this property, one can argue that \\({\\bf HKH}\\) will also be positive semidefinite. We can use the eigendecomposition of the doubly centered kernel to compute the kernel principal component scores. Specifically, if \\({\\bf HKH}\\) rank \\(r\\) with eigenvalues \\(\\lambda_1\\ge \\dots \\ge \\lambda_r &gt;0\\) and corresponding eigenvalues \\(\\vec{u}_1,\\dots,\\vec{u}_r \\in \\mathbb{R}^N\\), then \\({\\bf HKH}\\) factorizes as \\[{\\bf HKH} = \\underbrace{\\begin{bmatrix}\\vec{u}_1 &amp; \\dots &amp;\\vec{u}_r\\end{bmatrix} \\begin{bmatrix} \\lambda_1^{1/2} &amp;0 &amp;0 \\\\ 0&amp; \\ddots &amp; 0 \\\\ 0 &amp;0 &amp; \\lambda_r^{1/2} \\end{bmatrix}}_{{\\bf U\\Lambda}^{1/2}} \\left({\\bf U\\Lambda}^{1/2}\\right)^T. \\] The rows of the matrix \\({\\bf U\\Lambda}^{1/2}\\) are almost the kernel PC scores. The only issue is an additional the identity \\[{\\bf HKH} = ({\\bf H}\\tilde{\\bf X})({\\bf H}\\tilde{\\bf X})^T\\] is missing the factor of \\(1/N\\) appearing in the covariance calculation. Accounting for this, the first \\(r\\) non-zero kernel PC scores are the rows of the matrix \\[\\frac{1}{\\sqrt{N}} {\\bf U\\Lambda}^{1/2}\\] and the corresponding nonzero PC variances are \\(\\lambda_1/N,\\dots,\\lambda_r/N.\\) Notably, at no point do we compute the PC loadings! However, similar to standard PCA, we use the scores for dimension reduction and the PC variances for choosing a dimension. Without the loadings, we cannot recompute the original data. Below, we show an application of kernel PCA to the helix and demonstrate its ability to identify the one-dimensional structure of the helix and its sensitivity to kernel selection and tuning. Example 5.1 (Kernel PCA applied to the Helix) First, we show the kPCA variances for three different kernels and tuning parameters. The data are regularly spaced points along the helix. From these graphs, one would infer very different lower dimensional choices depending on the kernel and parameters. The polynomial kernel provides the most robust estimate of the one-dimensional nature of the data. Figure 5.1: kPCA Variances for different Kernels Below, we show the recovered one-dimensional coordinates for the polynomial kernel with offset 1 and degree 4 shown below, which is good, but do not quite reflect the equal spaced nature of the points. As the preceding example demonstrates, kernel PCA can identify nonlinear structure, but is quite sensitive to kernel selection and tuning. More advanced implementations make use of cross-validation to aid in the selection and tuning of the kernel [11]. References "],["exercises-3.html", "5.2 Exercises", " 5.2 Exercises "],["ch-nonlinear.html", "Chapter 6 Manifold Learning", " Chapter 6 Manifold Learning In the previous sections, we have focused on methods which seek to approximate our data through a linear combination of feature vectors. As we have seen, the resulting approximations live on linear (or affine) subspaces in the case of PCA and SVD and positive spans or convex combinations in the case of NMF. While our data may exhibit some low-dimensional structure, there is no practical reason to expect such behavior to be inherently linear. In the resulting sections, we will explore methods which consider nonlinear structure and assume the data reside on or near a manifold. Such methods are referred to as nonlinear dimension reduction or manifold learning. Critical to this discussion is the notion of a manifold. Definition 6.1 (Informal Definition of a Manifold) A manifold is a (topological) space which locally resembles Euclidean space. Each point on a \\(k\\)-dimensional manifold has a neighborhood that can be mapped continuously to \\(\\mathbb{R}^k\\). To guide your intuition, think of a manifold as a smooth, possibly curved surface. Here are a few examples. Example 6.1 (Examples of Manifolds) Add line, sphere, plane, and S And here is an example of something which isn’t a manifold. Example 6.2 (Non-manifold) figure 8 Much more could be said about the mathematical foundations of manifolds which are far beyond the scope of this book. For those interested in the such details consider checking out REFERENCES HERE. We will appeal to a more intuitive understanding of manifolds and when necessary provide informal, descriptive “definitions” of important concepts. For now, let’s turn to the standard manifold assumption which is common to this area of unsupervised learning. "],["data-on-a-manifold.html", "6.1 Data on a manifold", " 6.1 Data on a manifold In the simplest setting, we will assume there are points \\(\\vec{z}_1,\\dots,\\vec{z}_N\\in A \\subset \\mathbb{R}^k\\) which are iid random samples. These points are (nonlinearly) mapped into a higher dimensional space \\(\\mathbb{R}^d\\) by a smooth map \\(\\Psi\\) giving data \\(\\vec{x}_i = \\Psi(\\vec{z}_i)\\) for \\(i=1,\\dots,N.\\) Hereafter, we refer to \\(\\Psi\\) as the manifold map. In this setting, we are only given \\(\\vec{x}_1,\\dots,\\vec{x}_N\\), and we want to recover the lower-dimensional \\(\\vec{z}_1,\\dots,\\vec{z}_N\\). If possible, we would also like recover \\(\\Psi\\) and \\(\\Psi^{-1}\\) and in the most ideal case, the sampling distribution that generated the lower-dimensional coordinates \\(\\vec{z}_1,\\dots,\\vec{z}_N\\). Example 6.3 (Mapping to the Swiss Roll) Let \\(A = (\\pi/2,9\\pi/2)\\times (0,15)\\). We define the map \\(\\Psi:A\\to \\mathbb{R}^3\\) as follows \\[\\Psi(\\vec{z}) = \\Psi(z_1,z_2) = \\begin{bmatrix} z_1\\sin(z_1) \\\\ z_1\\cos(z_1) \\\\ z_2 \\end{bmatrix}\\] Below we show \\(N=10^4\\) samples which are drawn uniformly from \\(A\\). We then show the resulting observations after applying map \\(\\Psi\\) to each sample. We may also consider the more complicated case where the observations are corrupted by additive noise. In this setting, the typical assumption is that the noise follows after the manifold map so that our data are \\[\\vec{x}_i = \\Psi(\\vec{z}_i) + \\vec{\\epsilon}_i, \\qquad i = 1,\\dots, N\\] for some noise vectors \\(\\{\\vec{\\epsilon}_i\\}_{i=1,\\dots,N}.\\) Example 6.4 (Swiss Roll with Additive Gaussian Noise) Here, we perturb the observations in the preceding example with additive \\(\\mathcal{N}(\\vec{0},0.1{\\bf I})\\) noise. In addition to the goals in the noiseless case, we may also add the goal of learning the noiseless version of the data which reside on a manifold. However, there are a number of practical issues to this setup. First, the dimension, \\(k\\), of the original lower-dimensional points is typically unknown. Similar to previous methods, we could pick a value of \\(k\\) with the goal of visualization, base our choice off of prior knowledge, or run our algorithms different choices of \\(k\\) and compare the results. More advanced methods for estimating the true value of \\(k\\) are an open area of research (REFERENCES NEEDED). There is also a issue with the uniqueness problem statement. Given only the high dimensional observations, there is no way we could identify the original lower-dimensional points without more information. In fact, one could find an unlimited sources of equally suitable results. Here is the issue. Let \\(\\Phi:\\mathbb{R}^k\\to\\mathbb{R}^k\\) be some invertible function. As an example, you could think of \\(\\Phi\\) as defining a translation, reflection, rotation, or some composition of these operations. If our original observed data are \\(\\vec{x}_i = \\Psi(\\vec{z}_i)\\), our manifold learning algorithm could instead infer that the manifold map is \\(\\Psi \\circ \\Phi^{-1}\\) and the lower-dimensional points are \\(\\Phi(\\vec{z}_i)\\). This is a perfectly reasonable result since \\((\\Psi\\circ \\Phi^{-1}\\circ)\\Phi(\\vec{z}_i) = \\Psi(\\vec{z}_i)= \\vec{x}_i\\) for \\(i=1,\\dots,N\\), which is the only result we require. Without additional information, there is little we could do to address this issue. For the purposes of visualization, however, we will typically be most interested in the relationship between the lower-dimensional points rather than their specific location or orientation. As such, we need not be concerned about a manifold learning algorithm that provides a translated or rotated representation of \\(\\vec{z}_1,\\dots,\\vec{z}_N.\\) More complicated transformations of the lower-dimensional coordinates are of greater concern and may be addressed through additional assumptions about the manifold map \\(\\Psi.\\) In the following sections, we will review a small collection of different methods which address the manifold learning problem. This collection is by no means exhaustive so we provide a small list with associated references to conclude the chapter. "],["isometric-feature-map-isomap.html", "6.2 Isometric Feature Map (ISOMAP)", " 6.2 Isometric Feature Map (ISOMAP) 6.2.1 Introduction The first manifold learning method we are going to cover is the Isometric Feature Map (ISOMAP), originally published by Tenenbaum, de Silva, and Langford in 2000 [12]. As suggested by the name, we will see that the assumption of isometry is central to this method. ISOMAP combines the major algorithmic features of PCA and MDS — computational efficiency, global optimality, and asymptotic convergence guarantees. Thanks to these extraordinary features, ISOMAP is capable of learning a broad class of nonlinear manifolds. 6.2.2 Key Definitions Different notions of pointwise distance Prior to discussing the ISOMAP algorithm, let’s briefly discuss the notion of isometry through an example which motivates different notions of distance between two points. Example 6.5 (Distance between points on a Helix) Consider the helix map \\(\\Psi:\\mathbb{R}\\to\\mathbb{R}^3\\) given by the formula \\[\\begin{equation} \\Psi(t) = \\begin{bmatrix} \\frac{1}{\\sqrt{2}}\\cos(t) \\\\ \\frac{1}{\\sqrt{2}}\\sin(t) \\\\ \\frac{1}{\\sqrt{2}}t \\\\ \\end{bmatrix} \\end{equation}\\] Below, we show the result of applying the Helix map to each point in the interval \\((0,25)\\). Let’s focus on two points \\(\\vec{x}_1 = \\Psi(2\\pi)= (1/\\sqrt{2},0,\\sqrt{2}\\pi)^T\\) and \\(\\vec{x}_2 = \\Psi(4\\pi)=(1/\\sqrt{2},0,2\\sqrt{2}\\pi)^T\\) in particular which are shown as large black dots in the figure below. There are a few different ways we could measure the distance between the two black points. The first approach would be to ignore the helix (manifold) structure viewing them as vectors in \\(\\mathbb{R}^3\\) and directly measure their Euclidean distance which gives \\[\\|\\vec{x}_1 - \\vec{x}_2\\| = \\sqrt{2}\\pi.\\] However, we also know that these points are images of the one-dimensional coordinate \\(z_1 = 2\\pi\\) and \\(z_2 = 4\\pi\\) respectively. Thus, we could also consider the Euclidean distance of the lower-dimemsional coordinates which is \\(|2\\pi - 4\\pi| = 2\\pi\\), which notably differs from the Euclidean distance. A third option is to return to the three-dimensional representation but to also account for the manifold structure when considering distance. Recall Euclidean distance gives the length of the shortest, straightline path connecting the two points. Instead, let’s restrict ourselves to only those paths which stay on the helix (manifold). You may correctly conclude that the curve starting at \\(\\Psi(2\\pi)\\), rotating up the helix one rotation, and ending at \\(\\Psi(4\\pi)\\) is the shortest such path. Fortunately, computing arc-length is relatively friendly in this example since \\(\\Psi\\) already parameterizes the path connecting these two points. The arc-length is then \\[\\int_{2\\pi}^{4\\pi} \\left\\|\\frac{d\\Psi}{dt}\\right\\| dt = \\int_{2\\pi}^{4\\pi} dt = 2\\pi.\\] Jumping slightly ahead, we then say the manifold distance between \\(\\Psi(2\\pi)\\) and \\(\\Psi(4\\pi)\\) is \\(2\\pi\\). Importantly, the manifold distance coincides exactly with the Euclidean distance between the lower-dimensional coordinates. In fact, for any two points, \\(s\\) and \\(t\\), on the real line their Euclidean distance, \\(|s-t|\\) will be the same as the manifold distance between \\(\\Psi(s)\\) and \\(\\Psi(t)\\). Thus, the helix map \\(\\Psi\\) above serves as our first example of an isometric (distance preserving) map. We may generalize this idea to any smooth manifold to define a new notion of distance. Given a manifold \\(\\mathcal{M}\\), we define the manifold distance function \\(d_\\mathcal{M} : \\mathcal{M} \\times \\mathcal{M} \\to [0,\\infty)\\) as follows Definition of Manifold Distance ::: {.definition #def-manifold-dist name=“Manifold Distance Function”} Given two points \\(\\vec{x}\\) and \\(\\vec{y}\\) on a smooth manifold, \\(\\mathcal{M}\\), let \\(\\Gamma(\\vec{x},\\vec{y})\\) be the set of all piecewise smooth curves connecting \\(\\vec{x}\\) and \\(\\vec{y}\\) constrained to stay on \\(\\mathcal{M}\\). Then, we define the manifold distance to be \\[\\begin{equation} d_\\mathcal{M}(\\vec{x},\\vec{y}) = \\inf_{\\gamma \\in \\Gamma(\\vec{x},\\vec{y})} L(\\gamma) \\tag{6.1} \\end{equation}\\] where \\(L(\\gamma)\\) is the arclength of \\(\\gamma.\\) ::: As we reviewed above, the helix example with the arclength formula is one example of a manifold and distance function. Additional examples of a manifold and manifold distance include, Euclidean space \\(\\mathbb{R}^d\\) where standard Euclidean distance gives the manifold distance. The sphere in \\(\\mathbb{R}^3\\) which is a two-dimensional manifold. Its manifold distance is also called the Great Circle Distance. We may now define the notion of isometry which is a central assumption of ISOMAP. Definition of Isometry ::: {.definition #def-isometry name=“Isometry”} Let \\(\\mathcal{M}_1\\) be a manifold with distance function \\(d_{\\mathcal{M}_1}\\) and let \\(\\mathcal{M}_2\\) be a second manifold with distance function \\(d_{\\mathcal{M}_2}\\). The mapping \\(\\Psi:\\mathcal{M}_1 \\mapsto \\mathcal{M}_2\\) is an isometry if \\[d_{\\mathcal{M}_1}(x,y) = d_{\\mathcal{M}_2}\\left(\\Psi(\\vec{x}),\\Psi(\\vec{y})\\right) \\qquad \\text{ for all } \\vec{x},\\vec{y}\\in \\mathcal{M}_1.\\] ::: For the purposes of ISOMAP, we will think of \\(\\mathcal{M}_1\\) as some subset of a \\(\\mathbb{R}^k\\) for \\(k\\) small where we measure distances using the Euclidean norm. Then \\(\\mathcal{M}_2\\) will be a \\(k\\)-dimensional manifold in \\(\\mathbb{R}^d\\) containing our data. Our first assumption is that the manifold mapping \\(\\Psi\\) is an isometry. Unfortunately, in practice we do not know the manifold nor will we have a method for parameterizing curves on the manifold to compute distances. 6.2.3 Algorithm Instead, ISOMAP makes use of a data-driven approach to estimate the manifold distance between points following a three-step procedure. 1) Construct Weighted Neighborhood Graph: MDS uses Euclidean distance to measure pairwise distance between points \\(\\vec{x}_i\\) and \\(\\vec{x}_j\\) (data points in space \\(\\mathcal{M}_2\\)), while ISOMAP uses the geodesic distance in order to reveal the underlying manifold structure. However, when the data points in the high dimensional space \\(\\mathcal{M}_2\\) have a manifold structure, usually the Euclidean pairwise distance is quite different from their pairwise geodesic distance. Fortunately, for small distances on a smoothly embedded manifold, the geodesic path between two close-by points lies nearly flat in the ambient space. So, the length of this path will be very close to the straight line (Euclidean) distance between those points in the ambient space. The key intuition is that as the density of data points on the manifold increases (i.e., points get closer and closer), the straight line segment in the ambient space connecting two neighboring points becomes a better and better approximation of the shortest path between those points on the manifold. In the limit of the density going to infinity, these distances converge. Let’s elucidate this concept with two illustrative examples. Firstly, imagine a two-dimensional surface, like a Swiss Roll, situated within a three-dimensional space. For an ant journeying across the Swiss Roll, the vast size difference means its immediate surroundings appear flat. From its perspective, the distance between its consecutive steps closely mirrors the distance a human might measure (Euclidean distance) – both virtually equating to the roll’s geodesic distance. For a larger-scale analogy, think of Earth. Suppose extraterrestrial beings possessed technology allowing them to traverse straight through Earth’s crust and mantle, thus following the shortest Euclidean path. Their journey from Los Angeles to New York might save them hundreds of miles compared to humans. However, when moving between closer landmarks, such as the Science Center to the Smith Center, their advantage diminishes. As a result, when it comes to the measurement of geodesic distance, it is reasonable to only look at those data points that are close to each other. First, calculate all the pairwise Euclidean distance \\(d_{ij}=||\\vec{x}_i - \\vec{x}_j||_2\\), then determine which points are neighbors on the manifold by connecting each point to Either (i) All points that lie within a ball of radius \\(\\epsilon\\) of that point; OR (ii) all points which are K-nearest neighbors with it. (Two different criteria, \\(K\\) and \\(\\epsilon\\) are tuning parameters) According to this rule, a weighted neighborhood graph \\(G = G(V,E)\\) can be built. The set of vertices (data points in space \\(\\mathcal{M}_2\\)): \\(V = \\{\\vec{x}_1, \\dots , \\vec{x}_N\\}\\) are the input data points, and the set of edges \\(E = \\{e_{ij}\\}\\) indicate neighborhood relationships between the points. \\(e_{ij} = d_{ij}\\) if (i) \\(||\\vec{x}_i - \\vec{x}_j||_2 \\leq \\epsilon\\); OR (ii) \\(\\vec{x}_j\\) is one of the K-nearest neighbors of \\(\\vec{x}_i\\), otherwise \\(e_{ij} = \\infty\\). Sometimes, the tuning of \\(\\epsilon\\) (or \\(K\\)) is quite decisive in the output of ISOMAP, we will explain this later with a simulation example. 2) Compute graph distances In this step, we want to estimate the unknown true geodesic distances \\(\\{d^{\\mathcal{M}}_{ij}\\}\\) between all pairs of points with the help of the neighborhood graph \\(G\\) we have just built. We use the graph distances \\(\\{d^{\\mathcal{G}}_{ij}\\}\\)— the shortest distances between all pairs of points in the graph \\(G\\) to estimate \\(\\{d^{\\mathcal{M}}_{ij}\\}\\). For \\(\\vec{x}_i\\) and \\(\\vec{x}_j\\) that are not connected to each other, we try to find the shortest path that goes along the connected points on the graph. Following this particular sequence of neighbor-to-neighbor links, the sum of all the link weights along the path is defined as \\(\\{d^{\\mathcal{G}}_{ij}\\}\\). In other words, we use a number of short Euclidean distances (representing the local structure of the manifold) to approximate the geodesic distance \\(\\{d^{\\mathcal{M}}_{ij}\\}\\). This path finding step is usually done by Floyd-Warshall algorithm, which iteratively tries all transit points \\(k\\) and find those that \\(\\tilde{d}_{ik} + \\tilde{d}_{kj} &lt; \\tilde{d}_{ij}\\), and updates \\(\\tilde{d}_{ij} = \\tilde{d}_{ik} + \\tilde{d}_{kj}\\) for all possible combination of \\(i,j\\). The algorithm works best in dense neighboring graph scenario, with a computational complexity of \\(O(n^3)\\). The theoretical guarantee of this graph distance computation method is given by Bernstein et, al.[13] one year after they first proposed ISOMAP in their previous paper. They show that asymptotically (as \\(n \\rightarrow \\infty\\)), the estimate \\(d^{\\mathcal{G}}\\) converges to \\(d^{\\mathcal{M}}\\) as long as the data points are sampled from a probability distribution that is supported by the entire manifold, and the manifold itself is flat. The distance matrix \\(\\Delta\\) can be expressed as: \\[\\Delta_{ij} = d^{\\mathcal{G}}_{ij}\\] Simulation Example Here we provide a randomly generated Neighborhood Graph for six data points, it uses the K-nearest neighbor criteria (can easily tell this since the matrix is not symmetric, \\(K=2\\)) # Define the matrix matrix &lt;- matrix(c( 0, 3, 4, Inf, Inf, Inf, 7, 0, Inf, 2, Inf, Inf, 6, Inf,0, Inf, 7, Inf, Inf, 5, Inf, 0, Inf, 10, Inf, Inf,8, Inf, 0, 13, Inf, Inf,Inf, 9, 14, 0 ), byrow = TRUE, nrow = 6) print(matrix) ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 0 3 4 Inf Inf Inf ## [2,] 7 0 Inf 2 Inf Inf ## [3,] 6 Inf 0 Inf 7 Inf ## [4,] Inf 5 Inf 0 Inf 10 ## [5,] Inf Inf 8 Inf 0 13 ## [6,] Inf Inf Inf 9 14 0 Shown below is the implementation of Floyd-Warshall algorithm in R. As you can see from the three for loops, its computation complexity is \\(O(n^3)\\). # Adjusting the matrix to set d_ij and d_ji to the smaller value n &lt;- dim(matrix)[1] for (i in 1:n) { for (j in 1:n) { if (i != j &amp;&amp; is.finite(matrix[i, j]) &amp;&amp; is.finite(matrix[j, i])) { min_val &lt;- min(matrix[i, j], matrix[j, i]) matrix[i, j] &lt;- min_val matrix[j, i] &lt;- min_val } } } # Floyd-Warshall Algorithm floyd_warshall &lt;- function(mat) { n &lt;- dim(mat)[1] dist &lt;- mat for (k in 1:n) { for (i in 1:n) { for (j in 1:n) { dist[i, j] &lt;- min(dist[i, j], dist[i, k] + dist[k, j]) } } } return(dist) } # Get the result result &lt;- floyd_warshall(matrix) # Print the result print(result) ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 0 3 4 5 11 14 ## [2,] 3 0 7 2 14 11 ## [3,] 4 7 0 9 7 18 ## [4,] 5 2 9 0 16 9 ## [5,] 11 14 7 16 0 13 ## [6,] 14 11 18 9 13 0 3) Applying MDS to \\(\\Delta\\) As mentioned before, ISOMAP can be viewed as the application of classical MDS in non-linear case. As a result, the reconstruction of \\(\\{\\vec{z}_i\\}\\) in the \\(k\\) dimensional \\(\\mathcal{M}_1\\) follows similar steps as that of classical MDS. The main goal is to preserve the geodesic distance of the manifold in \\(\\mathcal{M}_2\\) as much as possible. Without any additional information, there are infinite \\(\\{\\vec{z}_i\\}\\) that can be viewed as the optimal solution. For some invertible function \\(\\Phi:\\mathbb{R}^k\\to\\mathbb{R}^k\\), a new manifold mapping \\(\\Psi \\circ \\Phi^{-1}\\) can be constructed. \\(\\vec{x}_i = \\Psi \\circ \\Phi^{-1} (\\Phi(\\vec{z}_i))\\), which proofs that \\(\\{\\Phi(\\vec{z}_i)\\}\\) is equivalent to \\(\\{\\vec{z}_i\\}\\) when it comes to the reconstruction of the lower dimensional configuration. Without loss of generality, we assume that \\(\\{\\vec{z}_i\\}\\) are actually centered. So the distance matrix of \\(\\{\\vec{z}_i\\}\\) can be expressed as \\(B=Z^T Z\\), so that \\(B_{ii}=||z_i||^2_2\\) and \\(B_{ij}={z_i}^T z_j\\). The embedding vectors \\(\\{\\hat{z}_{i}\\}\\) (estimate of points in lower dimensional feature space \\(\\mathcal{M}_1\\)) are chosen in order to minimize the objective function: \\[(\\sum ||\\vec{z}_i - \\vec{z}_j||_2 - \\Delta_{ij})^2\\] Following the same procedure explained in classical MDS chapter, we can compute each entry of \\(B\\): \\[B_{ij}= -\\frac{1}{2} \\Delta^2_{ij} + \\frac{1}{d} \\sum^{d}_{i=1} \\Delta^2_{ij} + \\frac{1}{d} \\sum^{d}_{j=1} \\Delta^2_{ij} - \\frac{1}{2d^2} \\sum^{d}_{i=1} \\sum^{d}_{j=1} \\Delta^2_{ij}\\] To express it in matrix form, it is actually, \\(B = - \\frac{1}{2} H \\Delta H\\), where \\(H = I_n - \\frac{1}{n} \\mathbb{1} \\mathbb{1}^T\\). The next step is just a PCA problem. Implement eigen decomposition on matrix B, \\(B=U \\Lambda U^T= (\\Lambda^{1/2} U)^T (\\Lambda^{1/2} U)\\), then arrange the singular value in descending order, find the first \\(k^{\\prime}\\) ones. We acquire \\(\\Lambda_{k^{\\prime}}\\) and \\(U_{k^{\\prime}}\\). \\[(\\hat{z}_1 | \\hat{z}_2 | \\dots | \\hat{z}_N) = \\Lambda_{k^{\\prime}} U_{k^{\\prime}}\\] Since we don’t know the dimension of the underlying feature space, here \\(k^{\\prime}\\) is a tuning parameter. Usually, we use a scree plot (\\(k^{\\prime}\\) against the sum of the omitted eigenvalues ) and find the elbow point. 6.2.4 Limitations of ISOMAP Though ISOMAP is a powerful manifold learning method that works well under most circumstances. It still has some limitations in certain scenarios. If the noises \\(\\{\\epsilon_i\\}\\) is not negligible, then ISOMAP may fail to identify the manifold. Also, ISOMAP is quite sensitive to the tuning parameters. To alleviate the negative impact, it’s highly suggested to start with a relatively small \\(\\epsilon\\) or \\(K\\), and increase them gradually. Here we use the Swiss Roll Example to help explain this point. # generate Swiss roll-shaped data S &lt;- rep(0,2000) Swiss &lt;- matrix(NA, nrow = 2000, ncol = 3) for( n in 1:2000){ s &lt;- runif(1, min = 3*pi/2, max = 9*pi/2) t &lt;- runif(1, min = 0, max = 15) S[n] &lt;- s Swiss[n, ] &lt;- c( s*cos(s), t, s*sin(s) ) } par(mfrow = c(2,2)) # K = 20 scatterplot3d(Swiss, color = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S ), xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3])) plot(embed(Swiss, &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 20)@data@data, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K = 20&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S) ) # K = 50 scatterplot3d(Swiss, color = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S ), xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3])) plot(embed(Swiss, &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 50)@data@data, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K = 50&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S) ) Obviously, ISOMAP performs well when \\(K\\) is small. However, as \\(K\\) increases, the algorithm no longer recovers the lower dimensional feature space. Because the distance between nearby arms is not large, some points from different arms are considered as “close”. The pairwise geodesic distances between these points is approximated by their Euclidean distance, which is not correct, of course. When data points are sparse in certain areas or directions of the manifold, the integrity of the learned manifold structure can be compromised. The following example will clarify this notion: Consider the Swiss Roll as an illustration. This time, however, the Swiss Roll is made sparse along its horizontal direction. To the naked eye, this sparse region seems to have minimal impact on the overall manifold. Naturally, we still perceive it as a Swiss Roll. set.seed(42) S &lt;- rep(0,2000) Swiss_sparse &lt;- matrix(NA, nrow = 2000, ncol = 3) for( n in 1:2000){ s &lt;- runif(1, min = 3*pi/2, max = 9*pi/2) t &lt;- runif(1, min = 0, max = 60) S[n] &lt;- s Swiss_sparse[n, ] &lt;- c( s*cos(s), t, s*sin(s) ) } # # # Manually create a sparse region # mask &lt;- Swiss[,1] &gt; 2 &amp; Swiss[,1] &lt; 8 &amp; Swiss[,2] &gt; 10 &amp; Swiss[,2] &lt; 15 # Swiss_sparse &lt;- Swiss[!mask, ] # S &lt;- S[!mask] scatterplot3d(Swiss_sparse, color = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S), main = &quot;Swiss Roll with Sparse Region&quot;, xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3])) However, when using ISOMAP to recover the lower-dimensional feature space, complications arise, even when adjusting various tuning parameters. set.seed(77) par(mfrow = c(2,2)) # K = 10 plot(embed(Swiss_sparse, &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 10)@data@data, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K = 10&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) # k = 20 plot(embed(Swiss_sparse, &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 20)@data@data, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K = 20&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) # K = 50 plot(embed(Swiss_sparse, &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 50)@data@data, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K = 50&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) # K = 100 plot(embed(Swiss_sparse, &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 100)@data@data, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K = 100&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) One of the two major assumptions of ISOMAP is the convexity of the manifold, that is to say, if the manifold contains many holes and concave margins, then the result of ISOMAP will probably be not ideal. Here we use the example of a folded washer manifold to illustrate this point. It is obvious that the folded washer is concave in its four ends. No matter how we tune the parameter \\(K\\), ISOMAP always fails to recover the lower dimensional feature. # generate washer in 2d N &lt;- 1e5 washer &lt;- matrix(NA, nrow =N, ncol = 2) for (n in 1:N){ r &lt;- runif(1,min=5,max = 10); a = runif(1,min = 0, max = 2*pi); washer[n,] &lt;- r*c(cos(a),sin(a)) + c(20,0) } # generate folded washer in 3D washer3 &lt;- cbind(washer, washer[,2]^2) # generate rolled washer in 3D washer.swiss &lt;- washer3 for (n in 1:dim(washer3)[1] ){ washer.swiss[n,] &lt;- c( washer[n,1]*cos(washer[n,1]), washer[n,2], washer[n,1]*sin(washer[n,1] )) } N &lt;- 2000 par(mfrow = c(2,2)) # K = 10 scatterplot3d(washer3[1:N,], color = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), washer[1:N,1] ), xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3])) plot(embed(washer3[1:N,], &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 10)@data@data %*% matrix(c(0,1,1,0),nrow = 2), xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=10&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), washer[,1]) ) # K = 20 plot(embed(washer3[1:N,], &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 20)@data@data %*% matrix(c(0,1,1,0),nrow = 2), xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=20&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), washer[,1]) ) # K = 50 plot(embed(washer3[1:N,], &quot;Isomap&quot;, .mute = c(&quot;message&quot;, &quot;output&quot;), ndim =2, knn = 50)@data@data %*% matrix(c(0,1,1,0),nrow = 2), xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=50&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), washer[,1]) ) References "],["locally-linear-embeddings-lles.html", "6.3 Locally Linear Embeddings (LLEs)", " 6.3 Locally Linear Embeddings (LLEs) 6.3.1 Introduction Locally linear embedding (LLE) is an unsupervised learning algorithm first introduced in 2000 by Sam T. Roweis and Lawrence K. Saul [14]. In the original four-page paper, the two authors introduced the LLE algorithm and demonstrated its effectiveness in dimensional reduction, manifold learning, and in handling real-world high-dimensional data. Unlike clustering methods for local dimensional reduction, LLE maps its inputs into a single global coordinate system of lower dimensionality, and its optimizations do not involve local minima. By exploiting the local symmetries of linear reconstructions, LLE is able to learn the global structure of nonlinear manifolds, such as those generated by images of faces or documents of text. Thanks to its great mathematical properties and relatively low computing cost (compared to other manifold learning methods, like ISOMAP), LLE quickly became attractive to researchers after its emergence due to its ability to deal with large amounts of high dimensional data and its non-iterative way of finding the embeddings [15]. Compared to ISOMAP and some other previous manifold learning methods, LLE is computationally simpler and can give useful results on a broader range of manifolds [16]. For dimensional reduction, most methods introduced before LLE need to estimate pairwise distances between even two remote data points, no matter it is the simple Euclidean distance (classical MDS) or more sophisticated manifold distance (ISOMAP). The underlying main idea of these methods is actually finding a configuration that recovers all pairwise distances of original data points as much as possible. LLE, however, is quite different from these previous methods as it focuses on preserving locally linear relationships. 6.3.2 Algorithm LLE algorithm is actually built on very simple geometric intuitions. As explained in MDS Part, if we consider a small enough region on a manifold in \\(D\\) dimensional space, in most cases, it can be regarded as a \\(d\\) dimensional hyperplane (\\(d \\ll D\\)). LLE also makes use of this intuition and assumes that the whole manifold consist of numerous \\(d\\)-dimensional patches that have been stitched together. Assuming that there exists sufficient data (data points are compact), it is reasonable to expect that each data point and its neighbors lie on or close to a locally linear patch of the manifold. Following this idea, LLE approximates each data point by a weighted linear combination of its neighbors and proceeds to find a lower-dimensional configuration of data points so that the linear approximations of all data points are best preserved. Specifically speaking, LLE algorithm consists of three steps. The initial step involves selecting a certain number of each data point’s nearest neighbors based on Euclidean distance. Following this, the second step calculates the optimal reconstruction weights for each point using its nearest neighbors. The final step carries out the embedding while maintaining the local geometry depicted by the reconstruction weights. 6.3.2.1 Construct Neighborhood Graph This step is actually very similar to that of ISOMAP. The process of finding neighbors in LLE is typically conducted using grouping methods like k-nearest neighbors (KNN) or selecting neighbors within a fixed radius ball (\\(\\epsilon\\)-neighborhoods), based on the Euclidean distance for each data point, in the provided data set. The KNN method is predominantly utilized for its straightforwardness and ease of implementation. The following explanations are based on KNN method. Denote \\(N\\) data points in original \\(D\\) dimensional space as \\(\\vec{x}_1, \\vec{x}_2, \\dots, \\vec{x}_N \\in \\mathbb{R}^D\\). For a point \\(\\vec{x}_i, \\quad 1 \\leq i \\leq N\\), its neighbor set is defined as \\(N_i^k \\subseteq \\{1, 2, 3, \\dots, i-1, i+1, \\dots, N \\}\\), where \\(N_i^k\\) can also be called as the indices of \\(k\\) nearest neighbors of \\(\\vec{x}_i\\). The tuning parameter \\(k\\) is chosen small enough so that the patch around \\(\\vec{x}_i\\) is flat. However, \\(k\\) should also be strictly larger than \\(d\\) so as to let the algorithm work. As we can tell from these, LLE works well only if data points are dense and hopefully evenly distributed, which will be explained in detail in later examples. The parameter tuning of the appropriate number of neighbors, \\(k\\), faces challenges of complexity, non-linearity, and diversity of high-dimensional input samples. A larger \\(k\\) value might cause the algorithm to overlook or even lose the local nonlinear features on the manifold. This issue is exacerbated as neighbor selection, typically based on Euclidean distance, can result in distant neighbors when considering the intrinsic geometry of the data, akin to a short circuit. Conversely, an overly small \\(k\\) value may lead the LLE algorithm to fragment the continuous manifold into isolated local pieces, losing global characteristics. 6.3.2.2 Reconsruct with Linear Weights As put before, we try to reconstruct each \\(\\vec{x}_i\\) using an almost convex weighted combination of its neighbors. The respective weights of all its neighbors \\(\\vec{x}_j, \\; j \\neq i\\) for each \\(\\vec{x}_i\\) is quite essential in the later reconstruction of the underlying intrinsic configuration, as we consider these weights to remain invariant before and after mapping. To explain it in mathematical formulas, the approximate of \\(\\vec{x}_i\\): \\(\\tilde{x}_i\\) is defined as \\(\\tilde{x}_i = \\sum_{j=1}^N w_{ij} \\vec{x}_j\\). There are two constraints for this formula: First, \\(w_{ij} \\equiv 0\\), if \\(j \\notin N_i^k\\) (consistent with the assumption of \\(k\\) nearest neighbors); Second, the sum of weights for each \\(\\vec{x}_i\\) is always zero, i.e., \\(\\sum_{j=1}^N w_{ij}=1\\). Then, the problem of finding the optimal \\(w_{ij}, \\; 1 \\leq i,j \\leq N\\) is equivalent to solving the following constrained Least Squares problem for \\(\\forall 1 \\leq i \\leq N\\): (1) \\[ \\begin{aligned} &amp; \\min \\left\\| \\vec{x}_i-\\sum_{j \\in N_i^k} w_{i j} \\vec{x}_j\\right\\|^2 \\\\ &amp; \\text { s.t. } \\quad \\sum_{j \\in N_i^k} w_{i j}=1 . \\end{aligned} \\] It is worth noting that the weights can be negative theoretically, though in practice, we don’t expect that to happen. Invariance to Rotation, Rescaling and Transaction Define \\(\\epsilon(w) = \\sum_{i=1}^N \\left\\| \\vec{x}_i-\\sum_{j \\in N_i^k} w_{i j} \\vec{x}_j\\right\\|^2\\), which is the cost function. \\(\\epsilon(w)\\) is unchanged by rotation or rescaling by common factor Actually \\(\\sum_{i=1}^N \\left\\| a \\text{U} \\vec{x}_i-\\sum_{j \\in N_i^k} w_{i j} a \\text{U} \\vec{x}_j\\right\\|^2 = a^2 \\epsilon(w)\\), where \\(a\\) is a non-zero scaler and \\(\\text{U}\\) is an orthonormal matrix. \\(\\epsilon(w)\\) is unchanged by transactions Thanks to the constraint that \\(\\sum_{j=1}^N w_{ij}=1\\), for any transaction \\(\\vec{x}_i \\rightarrow \\vec{x}_i + \\vec{y}\\), the cost function does not change. \\[\\sum_{i=1}^N \\left\\| (\\vec{x}_i + \\vec{y}) -\\sum_{j \\in N_i^k} w_{i j} (\\vec{x}_j + \\vec{y}) \\right\\|^2 = \\sum_{i=1}^N \\left\\| \\vec{x}_i-\\sum_{j \\in N_i^k} w_{i j} \\vec{x}_j\\right\\|^2 = \\epsilon(w)\\] From the expressions, we develop a strategy that optimizes one row of matrix \\(w\\) at a time. Now let’s try to rewrite \\(\\epsilon(\\vec{w}_i)=\\left\\| \\vec{x}_i-\\sum_{j \\in N_i^k} w_{i j} \\vec{x}_j\\right\\|^2\\). \\[\\begin{align} \\epsilon(\\vec{w}_i) &amp;= \\left\\| \\vec{x}_i-\\sum_{j \\in N_i^k} w_{i j} \\vec{x}_j\\right\\|^2 \\\\ &amp; = \\left[ \\sum_{j=1}^N w_{ij} (\\vec{x}_i - \\vec{w}_j) \\right]^T \\left[ \\sum_{l=1}^N w_{il} (\\vec{x}_i - \\vec{w}_l) \\right]^T \\\\ &amp; = \\sum_{j=1}^N \\sum_{l=1}^N w_{ij} w_{il} (\\vec{x}_i -\\vec{x}_j)^T (\\vec{x}_i - \\vec{x}_l) \\\\ &amp; = \\vec{w}_i^T G_i \\vec{w}_i \\end{align}\\] \\(\\vec{w}_i^T = (w_{i1}, w_{i2}, \\dots w_{iN})\\) is the \\(i^{th}\\) row of W. Here \\(G_i \\in \\mathbb{R}^{N \\times N}\\), where entry \\(G_{i}(j.l), \\; 1 \\leq j,l \\leq N\\) can be represented as: \\[ G_{i}(j,l) = \\begin{cases} (\\vec{x}_i - \\vec{x}_j)^T (\\vec{x}_i - \\vec{x}_l) &amp; j,l \\in N_i^k \\\\ 0 &amp; j \\; or \\; l \\notin N_i^k \\end{cases} \\] The \\((j,l)\\) entry of \\(G_i\\) is actually the inner product of \\(\\vec{x}_j\\) and \\(\\vec{x}_l\\) when centered around \\(\\vec{x}_i\\). From this expression, we know that actually \\(G_i\\) is a sparse matrix and can be reduced to a compact matrix \\(\\tilde{G}_i \\in \\mathbb{R}^{k \\times k}\\) that eliminates those empty columns and rows. \\[\\begin{align} \\tilde{G}_i &amp; = (\\vec{x}_{i[1]} - \\vec{x}_i, \\dots, \\vec{x}_{i[k]} - \\vec{x}_i)^T (\\vec{x}_{i[1]} - \\vec{x}_i, \\dots, \\vec{x}_{i[k]} - \\vec{x}_i) \\\\ &amp; = Q_i^T Q_i \\end{align}\\] where \\([1]\\) denotes the first entry in \\(N_i^k\\). So \\(\\tilde{G}_i\\) is actually a real symmetric and positive semi-definite matrix. Now let’s go back to deal with the optimization function — Equation 1 can be solved with Lagrange multiplier given that it has only equality constraints. (More details about the use of Lagrange multiplier can be found in [Lagrange multiplier]https://en.wikipedia.org/wiki/Lagrange_multiplier) Optimizing Equation 1 is equivalent to minimizing (for \\(\\forall 1 \\leq i \\leq N\\)) \\[ f(\\vec{w}_i, \\lambda) = \\vec{w}^T_i G_i \\vec{w}_i - \\lambda (\\vec{w}^T_i \\mathbf{1}_k -1) \\] which has the result: \\[ \\vec{w}_i^{\\star} = \\frac{\\tilde{G}^{-}_i \\mathbf{1}_k}{\\mathbf{1}^T_k \\tilde{G}^{-}_i \\mathbf{1}_k} \\] Complement: As discussed before, we can only proof that \\(\\tilde{G}_i\\) is positive semi-definite, however, we cannot ensure that it is positive definite, which means \\(\\tilde{G}_i\\) is not necessarily invertible. That is why we use the generalize inverse sign here. In practice, it can be done through performing SVD on \\(\\tilde{G}_i\\) and select the first few large singular values and eliminate the rest. Then when computing \\(\\tilde{G}^{-}_i\\), just do the reciprocal of these retained singular values. Actually \\(\\tilde{G}_i\\) only has \\(d\\) (the intrinsic original dimension if you forget) relatively large eigenvalues. The rest are either very small or zeros. So it is very likely that \\(\\tilde{G}_i\\) is singular, making the computation result highly unstable. In {[16]}, the authors proposed to address this issue through regularizing \\(\\tilde{G}_i\\). \\[ \\tilde{G}_i \\leftarrow \\tilde{G}_i+ \\left(\\frac{\\Delta^2}{k}\\right) \\operatorname{Tr}\\left(\\tilde{G}_i\\right) \\mathbf{I} \\] Here \\(Tr(\\tilde{G}_i)\\) denotes the trace of \\(\\tilde{G}_i\\) and \\(\\Delta \\ll 1\\). 6.3.2.3 Embedding In the previous step, we have recovered the optimal weight matrix \\[ \\mathbf{W} = \\left(\\begin{array}{l} \\vec{w}_1^T \\\\ \\vdots \\\\ \\vec{w}_N^T \\end{array}\\right) \\] The optimal weights \\(\\mathbb{W}\\) reflects local, linear geometry around each \\(\\vec{x}_i\\), thus if the configuration \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N \\in \\mathbb{R}^d\\) are the lower dimensional representation, they should also “match” the local geometry. Following this idea, the objective function is: (2) \\[ \\begin{aligned} &amp; \\underset{\\mathbf{Y}}{\\text{argmin}} \\sum_{i=1}^N \\left\\| \\vec{y}_i - \\sum_{j=1}^{N} w_{ij} \\vec{y}_j^T \\right\\|^2 \\\\ = &amp; \\underset{\\mathbf{Y}}{\\text{argmin}} \\sum_{i=1}^N \\left\\| \\sum_{j=1}^N w_{ij} (\\vec{y}_i - \\vec{y}_j)^T \\right\\|^2 \\\\ = &amp; \\underset{\\mathbf{Y}}{\\text{argmin}} \\left\\| \\mathbf{Y - WY} \\right\\|_F^2 \\\\ = &amp; \\underset{\\mathbf{Y}}{\\text{argmin}} \\left\\| (\\mathbf{I}_N - \\mathbf{W}) \\mathbf{Y} \\right\\|_F^2 \\\\ = &amp; \\underset{\\mathbf{Y}}{\\text{argmin}} \\; \\text{Tr} \\left[ \\mathbf{Y}^T (\\mathbf{I}_N - \\mathbf{W})^T (\\mathbf{I}_N - \\mathbf{W}) \\mathbf{Y} \\right] \\end{aligned} \\] where \\(\\mathbf{Y}=(\\vec{y}_1 | \\vec{y}_2 | \\dots | \\vec{y}_N)^T\\) There are two constraints: \\(\\mathbf{1}_N^T \\mathbf{Y} = \\vec{0}\\). This forces \\(\\vec{y}\\) to be centered \\(\\frac{1}{N} \\mathbf{Y}^T \\mathbf{Y} = \\mathbf{I}_d\\). This fixes rotation and scaling. Key Observation Considering the final expression of Equation 2, the optimization function is now equivalent to finding \\(\\vec{y}_i\\)s that minimizes \\(\\mathbf{Y}^T (\\mathbf{I}_N - \\mathbf{W})^T (\\mathbf{I}_N - \\mathbf{W}) \\mathbf{Y}\\). Here we introduce \\(\\mathbf{M} = (\\mathbf{I}_N - \\mathbf{W})^T (\\mathbf{I}_N - \\mathbf{W})\\), which is a positive semi-definite matrix. Since \\(\\mathbf{M} \\mathbf{1}_N = (\\mathbf{I} - \\mathbf{W})^T (\\mathbf{1}_N - \\mathbf{W} \\mathbf{1}_N) = \\vec{0}\\), \\(\\mathbf{1}_N\\) is an eigen-vector of \\(\\mathbf{M}\\) with eigenvalue zero. \\[ \\begin{aligned} \\mathbf{Y}^T (\\mathbf{I}_N - \\mathbf{W})^T (\\mathbf{I}_N - \\mathbf{W}) \\mathbf{Y} = \\mathbf{Y}^T \\mathbf{M} \\mathbf{Y} \\end{aligned} \\] From constraint (b), we know that columns of \\(\\mathbf{Y}\\) are orthogonal to each other. As a result, this whole problem can be simplified to finding the eigen-vectors of \\(\\mathbf{M}\\) with the smallest eigenvalues. Compute eigen-vectors with the smallest \\(d+1\\) eigenvalues \\(0=\\lambda_1 \\leq \\lambda_2 &lt; \\dots &lt; \\lambda_{d+1}\\), eliminate \\(\\mathbf{1}_N\\) (the first one). The remaining \\(d\\) vectors are respectively \\(\\vec{v}_2, \\vec{v}_3, \\dots \\vec{v}_{d+1} \\in \\mathbb{R}^N\\). So \\(\\mathbf{Y} = (\\vec{v}_2 | \\vec{v}_2 | \\dots | \\vec{v}_{d+1})\\), we successfully recover the corresponding \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N \\in \\mathbb{R}^d\\). An illustration of the algorithm In the original paper [14], the authors provide a very intuitive plot that summarizes the above three steps. LLE_illustration Parameter Tuning There are two parameters to tune in LLE, i.e. (the number of neighbors: \\(k \\,\\); the dimension of the recovered configuration: \\(d \\,\\)). For selection of \\(d\\), we usually use a reverse scree plot and find the elbow point. It is worth noting that we are choosing the smallest \\(d+1\\) eigenvalues and compute their corresponding eigen-vectors here. Since the eigen-vectors and eigenvalues of a particular matrix is super sensitive to any sort of noises or perturbations, especially for those small eigenvalues, it is hard to accurately derive the corresponding eigen-vectors \\(\\vec{v}_2, \\dots, \\vec{v}_{d+1}\\). This is called ill-conditioned eigen-problem. Choose the optimal \\(k\\) LLE seeks to preserve local structure through nearest neighbor connections. This is the key point to LLE. As a result, we may use the neighbor set of the original \\(\\vec{x}_1, \\vec{x}_2, \\dots, \\vec{x}_N \\in \\mathbb{R}^D\\) and \\(\\vec{y}_1, \\vec{y}_2, \\dots, \\vec{y}_N \\in \\mathbb{R}^d\\) as a criteria. As explained before, we use \\(N_i^k\\) to denote the indices of k-nearest neighbors to \\(\\vec{x}_i\\). Similarly, we can also use \\(V_i^k\\) to denote the indices of k-nearest neighbors to \\(\\vec{y}_i\\). They should be as close as possible. So our objective function here is: \\[ Q(k)= \\frac{\\sum_{i=1}^N \\left| N_i^k \\cap V_i^k \\right|}{Nk} \\] Plot \\(Q(k)\\) against \\(k\\), select \\(k^{\\star}\\) where the increase of \\(Q(k)\\) becomes negligible. 6.3.3 Strengths and Weaknesses of LLE 6.3.3.1 Strengths High Computation Efficiency The low computation cost of LLE algorithm may be its most shinning advantage over other manifold learning methods, and it is actually one of its biggest selling point when it was first introduced. The LLE algorithm Involves solving a sparse eigen problem, with computational complexity of roughly \\(O(N^2 d^2 + N d^3)\\) where \\(N\\) is the number of data points and \\(d\\) is the dimension of the recovered configuration. In comparison, ISOMAP requires computing shortest paths between all pairs of points, which is typically done using Dijkstra’s or Floyd-Warshall algorithm, leading to a complexity of \\(O(N^2 log N)\\) or \\(O(N^3)\\) respectively. Then, it involves eigen decomposition similar to classical MDS which is \\(O(N^3)\\). In practice, \\(d \\ll N\\), hence the computation cost of LLE is lower than that of ISOMAP in most cases. Few parameters to tune There are only two parameters to tune, respectively the number of neighbors included in the map: \\(k\\), and the dimensional of the original configuration: \\(d\\). In addition, there exist clear methods to find the optimal \\(k\\) and \\(d\\), as stated in the previous part. This makes LLE algorithm easy to find the optimal parameters. 6.3.3.2 Weaknesses Sensitivity to tuning parameters The result of LLE is quite sensitive to its two control parameters: the number of neighbors \\(k \\,\\) and the dimensional of the original configuration: \\(d\\). Here we use the Swiss Roll example to illustrate this. LLE is optimal at \\(k=45\\). However, when \\(k=40\\), the recovered lower-dimensional configuration is wrong (Green points and yellow points overlap, which is not the case in Swiss Roll); and when we slightly increase \\(k\\) to 50, the recovered two-dimensional expression is not necessarily a rectangle. set.seed(42) # Install and load necessary packages # install.packages(&quot;dimRed&quot;) # install.packages(&quot;rgl&quot;) library(dimRed) library(rgl) library(Rdimtools) library(scatterplot3d) # Generate Swiss roll-shaped data S &lt;- rep(0, 2000) Swiss &lt;- matrix(NA, nrow = 2000, ncol = 3) for (n in 1:2000) { s &lt;- runif(1, min = 3 * pi / 2, max = 9 * pi / 2) t &lt;- runif(1, min = 0, max = 20) S[n] &lt;- s Swiss[n, ] &lt;- c(s * cos(s), t, s * sin(s)) } par(mfrow = c(2,2)) scatterplot3d(Swiss, color = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S), xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3])) plot(do.lle(Swiss, ndim = 2, type = c(&quot;knn&quot;,40))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=40&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) plot(do.lle(Swiss, ndim = 2, type = c(&quot;knn&quot;,45))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=45&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) plot(do.lle(Swiss, ndim = 2, type = c(&quot;knn&quot;,50))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=50&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) Vulnerable to sparse or unevenly-distributed samples The vulnerability towards sparsity and uneven distribution exists in almost all manifold learning methods, including ISOMAP, as we have illustrated in the previous section. LLE is not immune to this either. When a data set is unevenly distributed, since LLE relies on the original Euclidean distance metric, it tends to select neighbors from a singular direction where these neighbors are densely clustered. Clearly, using these selected neighbors to reconstruct the reference point results in significant redundancy in that specific direction. Concurrently, essential information from other directions or regions is not retained for the reconstruction of the reference point. As a result, these selected neighbors are inadequate for accurately representing and reconstructing the reference point. Consequently, much of the intrinsic structure and internal features will be lost after dimension reduction using LLE. We borrow the “stretched” Swiss Roll example from ISOMAP section and try LLE this time. LLE also cracks in this scenario, regardless of the chosen parameter \\(k\\). set.seed(42) S &lt;- rep(0,2000) Swiss_sparse &lt;- matrix(NA, nrow = 2000, ncol = 3) for( n in 1:2000){ s &lt;- runif(1, min = 3*pi/2, max = 9*pi/2) t &lt;- runif(1, min = 0, max = 60) S[n] &lt;- s Swiss_sparse[n, ] &lt;- c( s*cos(s), t, s*sin(s) ) } par(mfrow = c(2,2)) scatterplot3d(Swiss_sparse, color = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S), main = &quot;Swiss Roll with Sparse Region&quot;, xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3])) plot(do.lle(Swiss_sparse, ndim = 2, type = c(&quot;knn&quot;,35))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=35&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) plot(do.lle(Swiss_sparse, ndim = 2, type = c(&quot;knn&quot;,40))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=40&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) plot(do.lle(Swiss_sparse, ndim = 2, type = c(&quot;knn&quot;,45))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=45&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) In addition, we manually create a Swiss Roll with some sparse regions and try LLE on it. From naked eye, these sparse regions won’t affect the overall manifold look. However, since LLE utilizes the local structure, it is greatly affected. library(scatterplot3d) library(Rdimtools) set.seed(42) S &lt;- rep(0,2000) Swiss &lt;- matrix(NA, nrow = 2000, ncol = 3) for(n in 1:2000){ s &lt;- runif(1, min = 3*pi/2, max = 9*pi/2) t &lt;- runif(1, min = 0, max = 15) S[n] &lt;- s Swiss[n, ] &lt;- c( s*cos(s), t, s*sin(s) ) } # Manually create a sparse region mask &lt;- Swiss[,2] &gt; 5 &amp; Swiss[,2] &lt; 10 &amp; Swiss[,3] &gt; -5 &amp; Swiss[,3] &lt; 5 Swiss_masked &lt;- Swiss[!mask, ] S &lt;- S[!mask] par(mfrow = c(2,2)) scatterplot3d(Swiss_masked, color = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S), main = &quot;Swiss Roll with Sparse Region&quot;, xlab = expression(x[1]), ylab = expression(x[2]), zlab = expression(x[3])) plot(do.lle(Swiss_masked, ndim = 2, type = c(&quot;knn&quot;,20))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=20&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) plot(do.lle(Swiss_masked, ndim = 2, type = c(&quot;knn&quot;,30))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=30&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) plot(do.lle(Swiss_masked, ndim = 2, type = c(&quot;knn&quot;,50))$Y, xlab = &quot;1st Dimension&quot;, ylab = &quot;2nd Dimension&quot;, main = &quot;K=50&quot;, col = myColorRamp(c(&quot;red&quot;,&quot;purple&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;yellow&quot;), S)) Sensitivity to noise LLE is super sensitive to noise. Even a small noise would cause failure in deriving low dimensional configurations. Justin Wang, et.al utilize various visualization examples to illustrate this drawback in their paper [17], you may take a look if you are interested. Various algorithms have been developed to address this issue, i.e., Robustly Locally Linear Embedding (RLLE) [18], and Locally Linear Embedding with Additive Noise (LLEAN) [17]. The former works well when outliers exist, while the latter has a satisfactory performance when the original points are distorted with noises. References "],["laplacian-eigenmap.html", "6.4 Laplacian Eigenmap", " 6.4 Laplacian Eigenmap The Laplacian eigenmap [19] is method of manifold learning with algorithmic and geometric similarities to LLEs. Like LLEs and ISOMAP, Laplacian eigenmaps make use of \\(k\\)-nearest neighbor relationships and the solution of an eigenvalue problem to reconstruct the low-dimensional manifold. As suggested by the name, we will be using the graph Laplacian matrix and emphasize the preservation of nearby points on the manifold making Laplacian Eigenmaps a local method with a different emphasis than LLEs. The graph Laplacian is an important matrix representation of our data which we will revisit later when discussing spectral clustering. In practice, Laplacian eigenmaps use sparse version of the graph Laplacian. For now, we will briefly introduce this matrix without sparsity and an important identity relating the graph Laplacian and the loss function we will minimize when constructing our low-dimensional representation. Given data \\(\\vec{x}_1,\\dots,\\vec{x}_N\\), we are going to build a weighted graph \\(\\mathcal{G}=(V,\\mathcal{E}, {\\bf W})\\), with one node per sample and weighted, undirected edges connecting the nodes. The weights, \\({\\bf W}_{ij}\\ge 0, \\, 1\\le i,j\\le N\\), correspond to a notion of affinity, which is typically a decreasing function of the distance between our data. Two common choices are (i) binary weights: \\[{\\bf W}_{ij} = \\begin{cases} 1 &amp; \\|\\vec{x}_i-\\vec{x}_j\\| \\le \\epsilon \\\\ 0 &amp; \\text{ else} \\end{cases}\\] and (ii) weights based on the radial basis function: \\[{\\bf W}_{ij} = \\exp\\left(-\\frac{\\|\\vec{x}_i-\\vec{x}_j\\|^2}{2\\sigma^2}\\right). \\] The symmetric matrix \\({\\bf W}\\) is called the (weighted) adjacency matrix of the graph, \\(\\mathcal{G}\\), encodes of all the pairwise relationships. We always set the diagonal entries of \\({\\bf W}\\) to zero to preclude self-connections in the graph. From the adjacency matrix, we can compute the total affinity of each node (sample) to all other nodes (samples) by summing along the rows. Specifically, the \\(i\\)th entry of the vector \\({\\bf W}\\vec{1}_N\\), has the total affinity of the \\(i\\)th node (\\(\\vec{x}_i\\)) to all other nodes (data). Using these summed affinities, we then create the graph Laplacian \\[\\begin{equation} {\\bf L} = {\\bf D} - {\\bf W} \\end{equation}\\] where \\({\\bf D}\\) is a diagonal matrix with entries \\({\\bf W}\\vec{1}_N\\) along its diagonal. The graph Laplacian is a symmetric matrix, and while not obvious at first glance, it is also positive semidefinite thanks to the following important identity. Given any vector \\(\\vec{y}\\in\\mathbb{R}^N\\), \\[\\begin{equation} \\vec{y}^T{\\bf L} \\vec{y} = \\frac{1}{2} \\sum_{i=1}^n\\sum_{j=1}^N {\\bf W}_{ij} (y_i-y_j)^2 \\tag{6.2} \\end{equation}\\] However, it is not full rank. The previous equation shows that \\(\\vec{1}\\) is an eigenvector with eigenvalue 0. In the previous statement we can view the entries of vector \\(\\vec{y}\\) as \\(N\\) separate scalars. However, we can also extend the preceding expression to include Euclidean distances between vectors \\(\\vec{y}_1,\\dots,\\vec{y}_N\\in\\mathbb{R}^t\\) to give the following important expression \\[\\begin{equation} \\sum_{i=1}^N\\sum_{j=1}^N {\\bf W}_{ij} \\|\\vec{y}_i-\\vec{y}_j\\|^2 = \\frac{1}{2}tr\\left({\\bf Y}^T{\\bf LY}\\right) \\end{equation}\\] where \\({\\bf Y}\\in\\mathbb{R}^{N\\times t}\\) has rows \\(\\vec{y}_1^T,\\dots,\\vec{y}_N^T.\\) We will return to this identity and its implications for Laplacian Eigenmaps after discussing the algorithmic details of the method 6.4.1 Algorithm 6.4.1.1 Compute neighbor relationships Fix either a number of nearest neighbors \\(k &gt; 0\\) or maximum distance \\(\\epsilon &gt; 0\\). If using \\(\\epsilon\\), then \\(\\vec{x}_i\\) and \\(\\vec{x}_j\\) (correspondingly nodes \\(i\\) and \\(j\\) in the graph) are neighbors if \\(\\|\\vec{x}_i-\\vec{x}_j\\| \\le \\epsilon\\). Alternatively, if using the nearest neighbor parameter \\(k\\), then we consider \\(\\vec{x}_i,\\vec{x}_j\\) to be neighbors if \\(\\vec{x}_i\\) is one the \\(k\\) closest points to \\(\\vec{x}_j\\) and \\(\\vec{x}_j\\) is one of the \\(k\\) closest points to \\(\\vec{x}_i.\\) The construction of neighbors, like the use of pairwise distance alone, results in symmetric neighbor relationship. We then connect nodes \\(i\\) and \\(j\\) with an edge if \\(\\vec{x}_i\\) and \\(\\vec{x}_j\\) are neighbors. 6.4.1.2 Compute weights and build graph Laplacian Nodes which are not connected immediately receive an edge weight equal to zero. For all connected nodes, we compute the edge weight \\[{\\bf W}_{ij} = \\exp\\left(-\\frac{\\|\\vec{x}_i-\\vec{x}_j\\|^2}{2\\sigma^2}\\right).\\] Here we have shown weights based on the radial basis function, which is motivated by theoretical connections to the heat kernel and an approximation of the Laplacian on the manifold \\(\\mathcal{X}\\) [19]. As such, this method is the default in most implementation of Laplacian eigenmaps. The parameter \\(\\sigma^2\\) does require tuning which can have a large impact on the performance of the algorithm. When \\(k\\) or \\(\\epsilon\\) are small, which is typically the case in practice, the (weighted) adjacency matrix \\({\\bf W}\\) will be sparse (most entries equal to 0). From this adjacency matrix, we then construct the graph Laplacian as above. The graph Laplacian built from these weights will also be sparse. By preserving only those connections between nearest points, we have only maintained the pairwise, local relationships on the manifold. We will now use \\({\\bf L}\\) to construct a lower-dimensional representation of the data. 6.4.1.3 Solve generalized eigenvalue problem Consider the loss function \\[\\begin{equation} \\mathcal{L}(\\vec{y}_1,\\dots,\\vec{y}_N) = \\sum_{i=1}^N\\sum_{j=1}^N {\\bf W}_{ij} \\|\\vec{y}_i-\\vec{y}_j\\|^2. \\end{equation}\\] This loss function is most sensitive to large pairwise distance \\(\\|\\vec{y}_i-\\vec{y}_j\\|\\) when \\({\\bf W}_{ij}\\) is also large (our original data were close). Thus, minimizing the preceding penalty prioritizes keeping \\(\\vec{y}_i\\) and \\(\\vec{y}_j\\) close when \\(\\vec{x}_i\\) and \\(\\vec{x}_j\\) have a high affinity (weight). As a result, Laplacian eigenmaps emphasize local geometry. Vectors \\(\\vec{y}_1,\\dots,\\vec{y}_N\\) which minimizes this loss function are not unique. First, there is an issue of translation. To address this issue, we will add a constraint that $ {}$ is a centered data matrix, i.e. \\({\\bf Y}^T{\\bf D}\\vec{1} = \\vec{0}\\). We can view the matrix \\({\\bf DY}\\) as a reweighting of the data matrix \\({\\bf Y}\\) with higher weights \\({\\bf D}_{ii}\\) for data \\(\\vec{x}_i\\) which were closer to more points. Here \\({\\bf D}\\) is the diagonal matrix used in the definition of the graph Laplacian. Note that \\[{\\bf DY} = \\begin{bmatrix} {\\bf D}_{11} \\vec{y}_1^T \\\\ \\vdots \\\\ {\\bf D}_{NN}\\vec{y}_N\\end{bmatrix}.\\] Requiring \\({\\bf DY}\\) to be centered results in configurations where those points with highest affinity a constrained close to the origin in our lower dimensional representation. However, solving the optimization problem with this modified centering constraint is still ill-posed, namely we could take \\(\\vec{y}_1=\\dots=\\vec{y}_N = \\vec{0}\\) giving a configuration which is collapsed onto the origin. In fact, given any configuration \\(\\vec{y}_1,\\dots,\\vec{y}_N\\) we could decrease the loss by rescaling all of our data by some constant scalar scalar \\(0 &lt; c &lt; 1\\) since \\({\\bf D}(c{\\bf Y}) = c {\\bf DY}\\) will still be centered. To address this scaling issue and give a meaningful \\(t\\)-dimensional configuration, we also add the constraint \\({\\bf Y}^T {\\bf D Y} = {\\bf I}_t\\). This constraint eliminates the collapse of the \\(t\\)-dimensional configuration onto a \\(t-1\\) dimensional hyperplane, and in particular eliminates the cases where the \\(1-\\)dimensional configuration collapses onto a point. Thus, we seek a data matrix \\({\\bf Y}\\in\\mathbb{R}^{N\\times t}\\) solving the following constrained optimization problem \\[\\begin{equation} \\mathop{\\mathrm{arg\\,min}}_{{\\bf Y}^T {\\bf D Y} = {\\bf I}_t, {\\bf Y}^T{\\bf D}\\vec{1}^T = \\vec{0} } = tr({\\bf Y}^T {\\bf L Y}). \\end{equation}\\] To solve this problem, we first introduce the change of variable \\(\\tilde{\\bf Y} = {\\bf D}^{1/2}{\\bf Y}\\) so that the constraints become \\[{\\bf Y}^T{\\bf D}\\vec{1}^T = ({\\bf D}^{1/2} {\\bf Y})^T{\\bf D}^{1/2}\\vec{1}^T = \\tilde{\\bf Y}^T {\\bf D}^{1/2} \\vec{1}^T = \\vec{0}\\] and \\[{\\bf Y}^T{\\bf D Y}= {\\bf Y}^T{\\bf D}^{1/2} {\\bf D}^{1/2}{\\bf Y} = ({\\bf D}^{1/2}{\\bf Y})^T ({\\bf D}^{1/2}{\\bf Y}) = \\tilde{\\bf Y}^T\\tilde{\\bf Y} = {\\bf I}\\] implying that the columns of \\(\\tilde{\\bf Y}\\) are orthonormal After the change of variable, our optimization problem becomes \\[\\begin{equation} \\mathop{\\mathrm{arg\\,min}}_{\\tilde{\\bf Y}^T\\tilde{\\bf Y} = {\\bf I}_t, \\tilde{\\bf Y}^{1/2} {\\bf D}^{1/2}\\vec{1} = \\vec{0} } tr\\left(\\tilde{\\bf Y}^T {\\bf D}^{-1/2}{\\bf L}{\\bf D}^{-1/2}\\tilde{\\bf Y} \\right). \\end{equation}\\] We can minimize this equation by making use of the eigenvalues and eigenvectors of the (symmetric) normalized graph Laplacian \\[{\\bf L}_{sym} = {\\bf I} - {\\bf D}^{-1/2}{\\bf W}{\\bf D}^{-1/2}.\\] Importantly, note that \\({\\bf L}_{sym}\\) is symmetric. Furthemore, it is positive semidefinite since it can be viewed as the graph Laplacian of a graph with weights \\({\\bf W}_{ij}/\\sqrt{{\\bf D}_{ii}{\\bf D}_{jj}}\\) thus subject to the identity (6.2). Thus, it is diagonalizable with orthonormal eigenvectors \\(\\vec{v}_1,\\dots,\\vec{v}_N\\in\\mathbb{R}^N\\) and associated nonnegative eigenvalues \\(\\lambda_1 \\le \\dots \\le \\lambda_N\\) which we list in increasing order in this case. This leads to the first important observation We could use any \\(t\\) of these vectors as the columns of \\(\\tilde{Y}\\) and immediately satisfy the constraint \\(\\tilde{\\bf Y}^T\\tilde{\\bf Y} = {\\bf I}.\\) However, we have an additional constraint and the minimization to consider. Note that \\(\\vec{1}_N\\) is an eigenvector of original graph Laplacian with eigenvalue \\(0\\). Thus, \\({\\bf L}_{sym}\\) also has eigenvalue 0 with associated eigenvector \\(\\vec{v}_1 = {\\bf D}^{1/2}\\vec{1}\\) since \\[{\\bf L}_{sym} ({\\bf D}^{1/2}\\vec{1}) ={\\bf D}^{-1/2}({\\bf D}^{1/2} - {\\bf W D}^{-1/2}){\\bf D}^{1/2}\\vec{1} = {\\bf D}^{-1/2}({\\bf D}-{\\bf W})\\vec{1} = {\\bf D}^{-1/2} {\\bf L}\\vec{1} = \\vec{0}.\\] As a result, all other eigenvectors of \\({\\bf L}_{sym}\\) must be orthogonal to \\(\\vec{v}_1 = {\\bf D}^{1/2}\\vec{1}.\\) This suggests that if we drop the first eigenvector associated with eigenvalue \\(\\lambda_1 = 0\\) and use \\(t\\) the remaining eigenvectors of \\({\\bf L}_{sym}\\) as the columns of \\(\\tilde{\\bf Y}\\) we will satisfy the constraint \\(\\tilde{\\bf Y}^T {\\bf D}^{1/2}\\vec{1} = \\vec{0}.\\) The finaly observation is that we should choose the eigenvectors to minimize the objective. We make use of the eigenvalues themselves and take \\[\\tilde{Y} = \\begin{bmatrix} \\vec{v}_2 &amp; \\dots &amp; \\vec{v}_{t+1} \\end{bmatrix}\\] so that \\[tr\\left( \\tilde{\\bf Y}^T{\\bf L}_{sym}\\tilde{\\bf Y}\\right) = \\lambda_2+\\dots+\\lambda_{t+1}\\] is minimized. After undoing the change of variables, we take use the rows of \\[{\\bf Y} = {\\bf D}^{-1/2}\\tilde{\\bf Y}\\in \\mathbb{R}^{N\\times t}\\] as our \\(t\\)-dimensional configuration. References "],["autoencoders-aes.html", "6.5 Autoencoders (AEs)", " 6.5 Autoencoders (AEs) 6.5.1 Introduction Autoencoders, which originated from the domain of neural network research, represent a class of unsupervised deep learning models. At its core, autoencoders seek to learn a compressed, efficient representation of input data by leveraging a network structure that nonlinearly encodes the data into a lower dimension space and subsequently decodes it to reconstruct the original data. [20] The typical architecture of an autoencoder comprises three main components: Encoder: A function \\(f(\\vec{x})\\) that compresses the input \\(\\vec{x}\\) into a latent representation. Latent Space: The reduced dimensionality representation, often denoted as \\(\\vec{z}\\), where \\(\\vec{z} = f(\\vec{x})\\). Decoder: A function \\(g(\\vec{z})\\) that aims to reconstruct the original input from the latent representation. The primary objective during the training phase of an autoencoder is to minimize the reconstruction error, often quantified using metrics such as Mean Squared Error (MSE) between the input data and its reconstructed counterpart. The minimization forces the model to capture salient features of the data in the latent space, thereby enabling efficient data compression, noise reduction, and feature extraction. The utility of Autoencoders has been demonstrated in a wide array of applications, from dimensionality reduction, anomaly detection, denoising, to more complex tasks such as generating new data instances. Variations and extensions of the basic Autoencoder model, including Variational Autoencoders (VAEs) [21] and Denoising Autoencoders [22], have further broadened their applicability by introducing probabilistic interpretations and noise robustness, respectively. In the broader context of machine learning and artificial intelligence, Autoencoders exemplify the power of unsupervised learning paradigms, emphasizing the capability of neural networks to derive meaningful representations from data without explicit labeling. 6.5.2 Algorithm 6.5.2.1 Notations Input - Dataset \\(X = \\{\\vec{x}_1, \\vec{x}_2, \\dots \\vec{x}_n\\}\\) where \\(\\vec{x}_i\\) is a vectorized representation of each data sample. - Encoder neural network \\(E\\) with parameters \\(\\theta_e\\) mapping inputs to latent space. - Decoder neural network \\(D\\) with parameters \\(\\theta_d\\) mapping latent space back to the original space. - Reconstruction loss function \\(L\\), e.g., Mean Squared Error (MSE). Output: - Optimized parameters \\(\\theta_e^*\\) for \\(E\\) and \\(\\theta_d^*\\) for \\(D\\). 6.5.2.2 Steps Breakdown Initialization: Initialize encoder \\(E\\) and decoder \\(D\\) neural network weights using techniques like Xavier or He initialization to ensure weight variance remains controlled during training. Forward Propagation: For each data sample \\(\\vec{x}_i\\): Use encoder \\(E\\) to transform \\(\\vec{x}_i\\) to latent space: \\[ \\vec{z}_i = E_{\\theta_e}(\\vec{x}_i) \\] Use decoder \\(D\\) to reconstruct \\(\\vec{x}_i\\) from \\(\\vec{z}_i\\): \\[ \\vec{x}^{\\prime}_i = D_{\\theta_d}(\\vec{z}_i) \\] Loss Computation: Calculate reconstruction loss for the given sample using \\(L\\): \\[ L_i = L(\\vec{x}_i, \\vec{x}^{\\prime}_i) \\] Compute average loss for the batch: \\[ L_{batch} = \\frac{1}{N} \\sum_{i=1}^{N} L_i \\] where \\(N\\) is the batch size. Backward Propagation: Compute the gradient of \\(L_{batch}\\) with respect to encoder and decoder parameters using back-propagation. Use gradient descent (or its variants) to update both \\(\\theta_e\\) and \\(\\theta_d\\): \\[ \\theta_e = \\theta_e - \\alpha \\frac{\\partial L_{batch}}{\\partial \\theta_e} \\] \\[ \\theta_d = \\theta_d - \\alpha \\frac{\\partial L_{batch}}{\\partial \\theta_d} \\] where \\(\\alpha\\) is the learning rate. Training Loop: Execute steps 2-4 for multiple iterations (epochs) over the entire data set. Regularly shuffle the data set before each epoch to ensure IID (independent and identically distributed) property. Model Retrieval: Once convergence is achieved, i.e., when the reduction in \\(L_{batch}\\) between subsequent epochs is negligible or after a pre-defined number of epochs, extract the optimized parameters \\(\\theta_e^*\\) and \\(\\theta_d^*\\). These define the trained Autoencoder. Optional Fine-tuning: For better performance, further fine-tune the trained Autoencoder using techniques like early stopping based on validation loss, or introduce regularization techniques like dropout to prevent overfitting. 6.5.3 Example Compared to other manifold learning methods we have introduced (ISOMAP and LLE), the implementation and parameter tuning of Autoencoders is much more complicated. We’ll explore how to implement an autoencoder in R using the Keras library with the famous MNIST dataset. As a Neuro Network method, Autoencoders have a number of parameters, thus requiring a large dataset to train. This explains why we choose MNIST dataset here. Load and Preprocess the Data mnist &lt;- dataset_mnist() train_images &lt;- mnist$train$x The above code loads the MNIST dataset from keras package. mnist variable is divided into a training set and a test set, both containing the image information and label information. Since we are using Autoencoders to conduct dimensio reduction here (unsupervised learning), we only require the image information from the traing set. The train_images contains the images from the training set. # Flatten and normalize the images train_images &lt;- array_reshape(train_images, c(nrow(train_images), 28*28)) train_images &lt;- train_images / 255 For an Autoencoder to process these images, they need to be reshaped into a flat vector. This step reshapes each 28x28 image into a vector of length 784. Furthermore, to facilitate the neural network’s training, the pixel values (originally between 0 to 255) are normalized to fall between 0 and 1. Build the Autoencoders The autoencoder comprises two main parts: Encoder and Decoder, as we have stated before. # initiates the input layer for the autoencoder which expects input vectors of length 784 input_img &lt;- layer_input(shape = c(28*28)) # Encoder encoded &lt;- input_img %&gt;% layer_dense(units = 128, activation = &quot;relu&quot;) %&gt;% layer_dropout(rate=0.8) %&gt;% layer_dense(units = 2, activation = &quot;tanh&quot;) The Encoder starts with the input image and passes it through a dense layer with 128 neurons and ReLU activation. A dropout layer is added for regularization, reducing the risk of over-fitting. The last layer of the Encoder further compresses the data into a 2D representation. Dropout Layer In the context of Keras, layer_dropout(rate=0.8) adds a dropout layer where there’s an 80% chance that any given neuron in the previous layer will be turned off during training for a particular update. In practice, it means that during training step, for each training iteration, \\(80\\%\\) of the neurons of the preceding layer will be randomly selected and turned off. These turned-off neurons won’t have any influence on the computation for that specific iteration. Dropout is only active during training, during testing step, all neurons will be active, and dropout won’t be applied. This step is super important, if dropout layer is not introduced, the model will be largely over-fitted. You may try this yourself. Activation Function Activation functions play a vital role in neural networks, determining the output of a neuron based on its input. They introduce non-linear properties into the network, enabling it to learn from the error and make adjustments, which is essential for learning complex patterns. There are several common activation functions we can choose from. Sigmoid (Logistic) Function: Equation: \\(f(x) = \\frac{1}{1 + e^{-x}}\\) Range: Between 0 and 1 Pros: Smooth gradient, preventing “jumps” in output values Cons: Can cause vanishing gradient problems in deep networks Hyperbolic Tangent (tanh) Function: Equation: \\(f(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}\\) Range: Between -1 and 1 Pros: Zero-centered, making it easier for the model to generalize Cons: Like the sigmoid, it can also lead to vanishing gradient issues Rectified Linear Unit (ReLU) Function: Equation: \\(f(x) = max(0, x)\\) Range: From 0 to infinity Pros: Helps mitigate the vanishing gradient problem, leading to faster convergence Cons: Neurons can sometimes “die”, especially with a large learning rate Softmax Function: Equation: \\(\\sigma(z)_j = \\frac{e^{z_j}}{\\sum_{k=1}^{K} e^{z_k}}\\) for \\(j = 1, ..., K\\) Used primarily in the output layer of a classifier, where it turns logits into probabilities by distributing them over several classes Range: Between 0 to 1 Each activation function has its unique characteristics and is suitable for different kinds of tasks. The choice of an activation function depends on the specific problem at hand, the nature of the data, and the architecture of the neural network. # Decoder decoded &lt;- encoded %&gt;% layer_dense(units = 128, activation = &quot;relu&quot;) %&gt;% layer_dropout(rate=0.8) %&gt;% layer_dense(units = 28*28, activation = &quot;tanh&quot;) # combines the encoder and decoder into the Autoencoder model autoencoder &lt;- keras_model(input = input_img, output = decoded) The Decoder takes the encoded 2D representation and attempts to reconstruct the original image. It uses a dense layer with 128 neurons followed by another dropout layer. The final dense layer outputs vectors of length \\(784 \\, (28 \\times 28)\\), matching the original image’s shape. Compile and Train Autoencoders Before training, the model needs to be compiled. The ‘adam’ optimizer and the ‘mean_squared_error’ loss function are chosen for this task. You may choose different loss functions according to your specific data type and objective, here MSE might be the most suitable. autoencoder %&gt;% compile( optimizer = &#39;adam&#39;, loss = &#39;mean_squared_error&#39; ) summary(autoencoder) ## Model: &quot;model_2&quot; ## _______________________________________________________________________________________________________ ## Layer (type) Output Shape Param # ## ======================================================================================================= ## input_2 (InputLayer) [(None, 784)] 0 ## dense_5 (Dense) (None, 128) 100480 ## dropout_2 (Dropout) (None, 128) 0 ## dense_4 (Dense) (None, 2) 258 ## dense_7 (Dense) (None, 128) 384 ## dropout_3 (Dropout) (None, 128) 0 ## dense_6 (Dense) (None, 784) 101136 ## ======================================================================================================= ## Total params: 202258 (790.07 KB) ## Trainable params: 202258 (790.07 KB) ## Non-trainable params: 0 (0.00 Byte) ## _______________________________________________________________________________________________________ The Autoencoder is trained using the training images as both inputs and targets. This is because the Autoencoder’s goal is to reconstruct its input as closely as possible. history &lt;- autoencoder %&gt;% fit( train_images, train_images, epochs = 40, batch_size = 256, shuffle = TRUE, validation_split = 0.2, getOption(&quot;keras.fit_verbose&quot;, default = 0) ) plot(history) Visualize the Encoded Representations To visualize the 2D representations learned by the Encoder, a separate Encoder model is created. This model shares its weights with the Autoencoders’ Encoder portion. It’s then used to predict or transform the training images into their 2D encoded form. encoder &lt;- keras_model(inputs = input_img, outputs = encoded) encoded_images &lt;- predict(encoder, train_images) # Convert to a data frame for easier viewing encoded_df &lt;- as.data.frame(encoded_images) head(encoded_df) ## V1 V2 ## 1 0.6415132 0.3450728 ## 2 -0.8257185 0.8414662 ## 3 -0.3318500 -0.4682082 ## 4 0.9297777 -0.7595418 ## 5 -0.6300858 -0.9524314 ## 6 -0.1059450 -0.3664891 Using the ggplot2 package, the encoded images are visualized, color-coded by their true labels. This visualization provides insights into how well the encoder has learned to cluster different digits in this reduced-dimensional space. We also compare the result of Autoencoders with that of PCA, as shown below. library(ggplot2) library(plotly) labels_train &lt;- mnist$train$y labels_train &lt;- as.factor(labels_train) # Plotting the data ae &lt;- ggplot(encoded_df, aes(x = V1, y = V2, color = labels_train)) + geom_point(alpha = 0.6, size = 1) + labs(title = &quot;Autoencoder projection&quot;, x = &quot;DF1&quot;, y = &quot;DF2&quot;, color = &quot;Response&quot;) + theme_minimal() # plotting 3d results # ae3 &lt;- plot_ly(encoded_df, x=~V1, y=~V2, z =~V3, # color = labels_train, # size = 0.1) pca_result &lt;- prcomp(train_images) # Extract the scores of the first two principal components scores &lt;- as.data.frame(pca_result$x[, 1:2]) colnames(scores) &lt;- c(&quot;PC1&quot;, &quot;PC2&quot;) p &lt;- ggplot(scores, aes(x = PC1, y = PC2, color = labels_train)) + geom_point(alpha = 0.6) + labs(title = &quot;PCA&quot;, x = &quot;PC1&quot;, y = &quot;PC2&quot;, color=&quot;response&quot;) + theme_minimal() # # 3D # scores &lt;- as.data.frame(pca_result$x[, 1:3]) # colnames(scores) &lt;- c(&quot;PC1&quot;, &quot;PC2&quot;, &quot;PC3&quot;) # p3 &lt;- plot_ly(scores, x = ~PC1, y =~PC2, z=~PC3, # color = labels_train, # size = 0.1) par(mfrow = c(2,1)) p ae Alternative Choices for the use of R packages for Autoencoders Besides package keras we have used as an example, h2o package is also a popular package for implementing Autoencoders. Unlike h2o package has an automated machine learning (AutoML) feature, making it easy for users to train and compare multiple models. In addition, it requires less manual tuning and configuration for deep learning, making it more accessible for beginners or those not primarily focused on deep learning. You may have a try yourself if you are interested after class. https://cran.r-project.org/web/packages/h2o/index.html (Keep in mind that h2o is Java-based, so having Java installed is a prerequisite of using h2o package) We choose keras here because it allows the development of custom layers, loss functions, and metrics, enabling you to have a clearer understanding of the mechanism and implementation of Autoencoders. References "],["additional-methods.html", "6.6 Additional methods", " 6.6 Additional methods "],["exercises-4.html", "6.7 Exercises", " 6.7 Exercises "],["ch-clustering.html", "Chapter 7 Clustering", " Chapter 7 Clustering We now turn to clustering, which is the branch of UL focused on partitioning our data into subgroups of similar observations. Hereafter, we use the terms clusters and subgroups interchangably. There are naturally a number of questions which arise including: how many clusters (if any) exist? what do we mean by similar observations? As we will see through a series of examples, these two points are linked. Given a notion of similarity (which are implicitly defined for different clustering algorithms and tuneable for others), a certain number of clusters and clustering of data may be optimal. Given a different notion of similarity, an entirely different organization of the data into a different number of clusters may arise. For now, let us focus on the the latter question regarding similarity. Consider the following three examples of data sets in \\(\\mathbb{R}^2\\). Visually, how would you cluster the observations? In particular, how many subgroups would you say exist and how would your partition the data into these subgroups? Example 7.1 (Different notions of similar subgroups) "],["center-based.html", "7.1 Center-based", " 7.1 Center-based 7.1.1 k-means 7.1.2 k-mediods "],["hierarchical.html", "7.2 Hierarchical", " 7.2 Hierarchical "],["model-based.html", "7.3 Model-based", " 7.3 Model-based "],["spectral.html", "7.4 Spectral", " 7.4 Spectral "]]
